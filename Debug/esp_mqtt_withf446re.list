
esp_mqtt_withf446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005534  08005534  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800553c  0800553c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  2000007c  080055c0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  080055c0  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d639  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002047  00000000  00000000  0002d6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002188b  00000000  00000000  00030748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b94d  00000000  00000000  00051fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c926d  00000000  00000000  0005d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a8  00000000  00000000  00126be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005128 	.word	0x08005128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08005128 	.word	0x08005128

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_UART_RxCpltCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_UART_RxCpltCallback+0x16>
	   esp8266_rxcallback();
 80005ea:	f000 fba9 	bl	8000d40 <esp8266_rxcallback>

}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40011000 	.word	0x40011000

080005fc <set_pa8_high>:

void set_pa8_high(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <set_pa8_high+0x14>)
 8000608:	f001 fd34 	bl	8002074 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020000 	.word	0x40020000

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0a4      	sub	sp, #144	; 0x90
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f001 f95d 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f8a1 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f965 	bl	80008f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000626:	f000 f90f 	bl	8000848 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f937 	bl	800089c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_buffer,100);
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	4940      	ldr	r1, [pc, #256]	; (8000734 <main+0x120>)
 8000632:	4841      	ldr	r0, [pc, #260]	; (8000738 <main+0x124>)
 8000634:	f002 fc73 	bl	8002f1e <HAL_UART_Receive_IT>
 set_pa8_high();
 8000638:	f7ff ffe0 	bl	80005fc <set_pa8_high>
Wifi_connect(WIFI_SSID, WIFI_PSWD);
 800063c:	493f      	ldr	r1, [pc, #252]	; (800073c <main+0x128>)
 800063e:	4840      	ldr	r0, [pc, #256]	; (8000740 <main+0x12c>)
 8000640:	f000 fe10 	bl	8001264 <Wifi_connect>
HAL_Delay(5000);
 8000644:	f241 3088 	movw	r0, #5000	; 0x1388
 8000648:	f001 f9b8 	bl	80019bc <HAL_Delay>
uint16_t keepalive=60;
 800064c:	233c      	movs	r3, #60	; 0x3c
 800064e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
connect_broker("5.196.95.208", "1883", "MQTT", "Semih35", keepalive, 0x02);
 8000652:	2302      	movs	r3, #2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <main+0x130>)
 800065e:	4a3a      	ldr	r2, [pc, #232]	; (8000748 <main+0x134>)
 8000660:	493a      	ldr	r1, [pc, #232]	; (800074c <main+0x138>)
 8000662:	483b      	ldr	r0, [pc, #236]	; (8000750 <main+0x13c>)
 8000664:	f000 fe8c 	bl	8001380 <connect_broker>
HAL_Delay(500);
 8000668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066c:	f001 f9a6 	bl	80019bc <HAL_Delay>
setmqttcallback(mqtthandler);
 8000670:	4838      	ldr	r0, [pc, #224]	; (8000754 <main+0x140>)
 8000672:	f001 f84b 	bl	800170c <setmqttcallback>
HAL_Delay(2000);
 8000676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067a:	f001 f99f 	bl	80019bc <HAL_Delay>
uint32_t publishtime=HAL_GetTick();
 800067e:	f001 f991 	bl	80019a4 <HAL_GetTick>
 8000682:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
uint32_t connectionsendpackettime=HAL_GetTick();
 8000686:	f001 f98d 	bl	80019a4 <HAL_GetTick>
 800068a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80


char transfer_data[123];
mqtt_publish("espdeneme", "semihdemirli");
 800068e:	4932      	ldr	r1, [pc, #200]	; (8000758 <main+0x144>)
 8000690:	4832      	ldr	r0, [pc, #200]	; (800075c <main+0x148>)
 8000692:	f000 ff65 	bl	8001560 <mqtt_publish>
subscribe_handler();
 8000696:	f000 fd1b 	bl	80010d0 <subscribe_handler>
 uint8_t sub=1;
 800069a:	2301      	movs	r3, #1
 800069c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
if((HAL_GetTick()-publishtime)>240000){
 80006a0:	f001 f980 	bl	80019a4 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <main+0x14c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d907      	bls.n	80006c2 <main+0xae>
	mqtt_publish("espdeneme", "semihdemirli");
 80006b2:	4929      	ldr	r1, [pc, #164]	; (8000758 <main+0x144>)
 80006b4:	4829      	ldr	r0, [pc, #164]	; (800075c <main+0x148>)
 80006b6:	f000 ff53 	bl	8001560 <mqtt_publish>
	publishtime=HAL_GetTick();
 80006ba:	f001 f973 	bl	80019a4 <HAL_GetTick>
 80006be:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84


}
if((HAL_GetTick()-connectionsendpackettime)>45000){
 80006c2:	f001 f96f 	bl	80019a4 <HAL_GetTick>
 80006c6:	4602      	mov	r2, r0
 80006c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d91c      	bls.n	8000710 <main+0xfc>
	if(mqtt_is_connected()==MQTT_IS_NOT_CONNECTED){
 80006d6:	f001 f86b 	bl	80017b0 <mqtt_is_connected>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d117      	bne.n	8000710 <main+0xfc>
		connect_broker("5.196.95.208", "1883", "MQTT", "Semih35", keepalive, 0x02);
 80006e0:	2302      	movs	r3, #2
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <main+0x130>)
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <main+0x134>)
 80006ee:	4917      	ldr	r1, [pc, #92]	; (800074c <main+0x138>)
 80006f0:	4817      	ldr	r0, [pc, #92]	; (8000750 <main+0x13c>)
 80006f2:	f000 fe45 	bl	8001380 <connect_broker>
		HAL_Delay(10);
 80006f6:	200a      	movs	r0, #10
 80006f8:	f001 f960 	bl	80019bc <HAL_Delay>
		connectionsendpackettime=HAL_GetTick();
 80006fc:	f001 f952 	bl	80019a4 <HAL_GetTick>
 8000700:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f001 f959 	bl	80019bc <HAL_Delay>
		sub=0;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	}
}
if(!sub){
 8000710:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <main+0x112>
	subscribe_handler();
 8000718:	f000 fcda 	bl	80010d0 <subscribe_handler>
	sub++;
 800071c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000720:	3301      	adds	r3, #1
 8000722:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
}
read_message();
 8000726:	f000 fcf5 	bl	8001114 <read_message>
//mqtt_loop();
	  HAL_Delay(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f001 f945 	bl	80019bc <HAL_Delay>
if((HAL_GetTick()-publishtime)>240000){
 8000732:	e7b5      	b.n	80006a0 <main+0x8c>
 8000734:	200001f4 	.word	0x200001f4
 8000738:	20000324 	.word	0x20000324
 800073c:	08005140 	.word	0x08005140
 8000740:	0800514c 	.word	0x0800514c
 8000744:	08005160 	.word	0x08005160
 8000748:	08005168 	.word	0x08005168
 800074c:	08005170 	.word	0x08005170
 8000750:	08005178 	.word	0x08005178
 8000754:	08000c81 	.word	0x08000c81
 8000758:	08005188 	.word	0x08005188
 800075c:	08005198 	.word	0x08005198
 8000760:	0003a980 	.word	0x0003a980

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2234      	movs	r2, #52	; 0x34
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fbc8 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <SystemClock_Config+0xdc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <SystemClock_Config+0xdc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xdc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <SystemClock_Config+0xe0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a25      	ldr	r2, [pc, #148]	; (8000844 <SystemClock_Config+0xe0>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007d8:	23b4      	movs	r3, #180	; 0xb4
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 ff77 	bl	80026e0 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f8:	f000 f8be 	bl	8000978 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fc:	f001 fc54 	bl	80020a8 <HAL_PWREx_EnableOverDrive>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000806:	f000 f8b7 	bl	8000978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000816:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2105      	movs	r1, #5
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fc8d 	bl	8002148 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000834:	f000 f8a0 	bl	8000978 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000880:	f002 f9cc 	bl	8002c1c <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f875 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000324 	.word	0x20000324
 8000898:	40011000 	.word	0x40011000

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f002 f9a2 	bl	8002c1c <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f84b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000498 	.word	0x20000498
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_GPIO_Init+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <MX_GPIO_Init+0x80>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_GPIO_Init+0x80>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_GPIO_Init+0x80>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <MX_GPIO_Init+0x80>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_GPIO_Init+0x80>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x84>)
 8000946:	f001 fb95 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x84>)
 8000964:	f001 f9f2 	bl	8001d4c <HAL_GPIO_Init>

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a36      	ldr	r2, [pc, #216]	; (8000acc <HAL_UART_MspInit+0xf8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d135      	bne.n	8000a62 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a40:	2307      	movs	r3, #7
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <HAL_UART_MspInit+0x100>)
 8000a4c:	f001 f97e 	bl	8001d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2025      	movs	r0, #37	; 0x25
 8000a56:	f001 f8b0 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5a:	2025      	movs	r0, #37	; 0x25
 8000a5c:	f001 f8c9 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a60:	e030      	b.n	8000ac4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <HAL_UART_MspInit+0x104>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d12b      	bne.n	8000ac4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_UART_MspInit+0xfc>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x100>)
 8000ac0:	f001 f944 	bl	8001d4c <HAL_GPIO_Init>
}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40004400 	.word	0x40004400

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 ff28 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	  HAL_UART_Receive(&huart1, (uint8_t *)&rx_data, 1, 10);
 8000b34:	230a      	movs	r3, #10
 8000b36:	2201      	movs	r2, #1
 8000b38:	4910      	ldr	r1, [pc, #64]	; (8000b7c <USART1_IRQHandler+0x4c>)
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <USART1_IRQHandler+0x50>)
 8000b3c:	f002 f94d 	bl	8002dda <HAL_UART_Receive>


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <USART1_IRQHandler+0x50>)
 8000b42:	f002 facf 	bl	80030e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	  Uart_data[rx_count++]=rx_data;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <USART1_IRQHandler+0x54>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	b2d1      	uxtb	r1, r2
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <USART1_IRQHandler+0x54>)
 8000b50:	7011      	strb	r1, [r2, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <USART1_IRQHandler+0x4c>)
 8000b56:	7819      	ldrb	r1, [r3, #0]
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <USART1_IRQHandler+0x58>)
 8000b5a:	5499      	strb	r1, [r3, r2]
	  if(strstr(Uart_data,return_data)!=NULL){
 8000b5c:	490b      	ldr	r1, [pc, #44]	; (8000b8c <USART1_IRQHandler+0x5c>)
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <USART1_IRQHandler+0x58>)
 8000b60:	f003 fa35 	bl	8003fce <strstr>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <USART1_IRQHandler+0x46>
		  rx_count=0;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <USART1_IRQHandler+0x54>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
		  rx_flag=1;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <USART1_IRQHandler+0x60>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
	  }



  /* USER CODE END USART1_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200004dd 	.word	0x200004dd
 8000b80:	20000324 	.word	0x20000324
 8000b84:	200004de 	.word	0x200004de
 8000b88:	20000368 	.word	0x20000368
 8000b8c:	200000a8 	.word	0x200000a8
 8000b90:	200004dc 	.word	0x200004dc

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f003 f968 	bl	8003e98 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20020000 	.word	0x20020000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	20000098 	.word	0x20000098
 8000bfc:	20000670 	.word	0x20000670

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <send_esp8266>:
uint8_t publishCon = 0x30;
uint8_t subscribeCon = 0x82;
char tx_infodata[150];
char uart_mqttcopy_data[100];
int cnt;
static bool send_esp8266(const char *cmd) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
if (HAL_UART_Transmit(&huart1, (uint8_t*) cmd, strlen(cmd), 100) == HAL_OK)
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff faf9 	bl	8000224 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <send_esp8266+0x30>)
 8000c3c:	f002 f83b 	bl	8002cb6 <HAL_UART_Transmit>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <send_esp8266+0x26>
	return true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <send_esp8266+0x28>
return false;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000324 	.word	0x20000324

08000c58 <flush_response>:
// Gönderdiğimiz komuta göre IP BİLGİSİ VS . ONU ALMAK İÇİN ESP8266 PARSER KODU YAZABİLİRİZ.
static void flush_response() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	uint8_t garbage[1];
	while (HAL_UART_Receive(&huart1, garbage, 1, 10) == HAL_OK)
 8000c5e:	bf00      	nop
 8000c60:	1d39      	adds	r1, r7, #4
 8000c62:	230a      	movs	r3, #10
 8000c64:	2201      	movs	r2, #1
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <flush_response+0x24>)
 8000c68:	f002 f8b7 	bl	8002dda <HAL_UART_Receive>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f6      	beq.n	8000c60 <flush_response+0x8>
		;
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000324 	.word	0x20000324

08000c80 <mqtthandler>:
void mqtthandler(const char *topic, const char *payload) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	if ((!strcmp(topic, "SEMİH54")) && (!strcmp(payload, "ON"))) {
 8000c8a:	4923      	ldr	r1, [pc, #140]	; (8000d18 <mqtthandler+0x98>)
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fabf 	bl	8000210 <strcmp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11b      	bne.n	8000cd0 <mqtthandler+0x50>
 8000c98:	4920      	ldr	r1, [pc, #128]	; (8000d1c <mqtthandler+0x9c>)
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f7ff fab8 	bl	8000210 <strcmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d114      	bne.n	8000cd0 <mqtthandler+0x50>
		mqtt_publish("ledinfoiot1", "SEMledacildi");
 8000ca6:	491e      	ldr	r1, [pc, #120]	; (8000d20 <mqtthandler+0xa0>)
 8000ca8:	481e      	ldr	r0, [pc, #120]	; (8000d24 <mqtthandler+0xa4>)
 8000caa:	f000 fc59 	bl	8001560 <mqtt_publish>
		HAL_Delay(200);
 8000cae:	20c8      	movs	r0, #200	; 0xc8
 8000cb0:	f000 fe84 	bl	80019bc <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t) *tx_infodata,
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <mqtthandler+0xa8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461c      	mov	r4, r3
				sprintf(tx_infodata, "led1acildi\r\n"), 100);
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <mqtthandler+0xac>)
 8000cbc:	481a      	ldr	r0, [pc, #104]	; (8000d28 <mqtthandler+0xa8>)
 8000cbe:	f003 f92b 	bl	8003f18 <siprintf>
 8000cc2:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t) *tx_infodata,
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	4621      	mov	r1, r4
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <mqtthandler+0xb0>)
 8000ccc:	f001 fff3 	bl	8002cb6 <HAL_UART_Transmit>
	}
	if ((!strcmp(topic, "IOT")) && (!strcmp(payload, "ON"))) {
 8000cd0:	4918      	ldr	r1, [pc, #96]	; (8000d34 <mqtthandler+0xb4>)
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fa9c 	bl	8000210 <strcmp>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d118      	bne.n	8000d10 <mqtthandler+0x90>
 8000cde:	490f      	ldr	r1, [pc, #60]	; (8000d1c <mqtthandler+0x9c>)
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f7ff fa95 	bl	8000210 <strcmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d111      	bne.n	8000d10 <mqtthandler+0x90>
		HAL_UART_Transmit(&huart2, (uint8_t) *tx_infodata,
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <mqtthandler+0xa8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461c      	mov	r4, r3
				sprintf(tx_infodata, "led1acildi\r\n"), 100);
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <mqtthandler+0xac>)
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <mqtthandler+0xa8>)
 8000cf6:	f003 f90f 	bl	8003f18 <siprintf>
 8000cfa:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t) *tx_infodata,
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	4621      	mov	r1, r4
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <mqtthandler+0xb0>)
 8000d04:	f001 ffd7 	bl	8002cb6 <HAL_UART_Transmit>

		mqtt_publish("ledinfo", "led1acildi");
 8000d08:	490b      	ldr	r1, [pc, #44]	; (8000d38 <mqtthandler+0xb8>)
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <mqtthandler+0xbc>)
 8000d0c:	f000 fc28 	bl	8001560 <mqtt_publish>

	}

}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	080051a4 	.word	0x080051a4
 8000d1c:	080051b0 	.word	0x080051b0
 8000d20:	080051b4 	.word	0x080051b4
 8000d24:	080051c4 	.word	0x080051c4
 8000d28:	200005c4 	.word	0x200005c4
 8000d2c:	080051d0 	.word	0x080051d0
 8000d30:	20000498 	.word	0x20000498
 8000d34:	080051e0 	.word	0x080051e0
 8000d38:	080051e4 	.word	0x080051e4
 8000d3c:	080051f0 	.word	0x080051f0

08000d40 <esp8266_rxcallback>:

 void esp8266_rxcallback(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	if (!received_mqttdata.is_data_received_start)
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d46:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <esp8266_rxcallback+0x1c>
		received_mqttdata.is_data_received_start = true;
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	received_mqttdata.received_uart_data[received_mqttdata.current_data_idx++] =
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	b291      	uxth	r1, r2
 8000d66:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d68:	f8a2 1064 	strh.w	r1, [r2, #100]	; 0x64
 8000d6c:	461a      	mov	r2, r3
			received_mqttdata.received_uart_char_data;
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d70:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
	received_mqttdata.received_uart_data[received_mqttdata.current_data_idx++] =
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d76:	5499      	strb	r1, [r3, r2]
	if (received_mqttdata.current_data_idx == 2
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d112      	bne.n	8000da8 <esp8266_rxcallback+0x68>
			&& (!strcmp(received_mqttdata.received_uart_data, "\r\n")
 8000d82:	492c      	ldr	r1, [pc, #176]	; (8000e34 <esp8266_rxcallback+0xf4>)
 8000d84:	482a      	ldr	r0, [pc, #168]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d86:	f7ff fa43 	bl	8000210 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <esp8266_rxcallback+0x5e>
					|| (!strcmp(received_mqttdata.received_uart_data, "\n\r")))) {
 8000d90:	4929      	ldr	r1, [pc, #164]	; (8000e38 <esp8266_rxcallback+0xf8>)
 8000d92:	4827      	ldr	r0, [pc, #156]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000d94:	f7ff fa3c 	bl	8000210 <strcmp>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d104      	bne.n	8000da8 <esp8266_rxcallback+0x68>
		received_mqttdata.current_data_idx = 0;
 8000d9e:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8000da6:	e032      	b.n	8000e0e <esp8266_rxcallback+0xce>
	}

	else if (received_mqttdata.current_data_idx > 2
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000daa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d906      	bls.n	8000dc0 <esp8266_rxcallback+0x80>
			&& ((strstr(received_mqttdata.received_uart_data, "\r")))
 8000db2:	210d      	movs	r1, #13
 8000db4:	481e      	ldr	r0, [pc, #120]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000db6:	f003 f8fd 	bl	8003fb4 <strchr>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d106      	bne.n	8000dce <esp8266_rxcallback+0x8e>
			|| (strstr(received_mqttdata.received_uart_data, "\n"))) {
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	481b      	ldr	r0, [pc, #108]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000dc4:	f003 f8f6 	bl	8003fb4 <strchr>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00f      	beq.n	8000dee <esp8266_rxcallback+0xae>
		if(strstr(received_mqttdata.received_uart_data,"CONNECT"))
 8000dce:	491b      	ldr	r1, [pc, #108]	; (8000e3c <esp8266_rxcallback+0xfc>)
 8000dd0:	4817      	ldr	r0, [pc, #92]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000dd2:	f003 f8fc 	bl	8003fce <strstr>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <esp8266_rxcallback+0xa4>
			received_mqttdata.tcp_conn_handled=true;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		received_mqttdata.is_data_first_part_recived_completely = true;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000dec:	e00f      	b.n	8000e0e <esp8266_rxcallback+0xce>
	}
	else if (strstr(received_mqttdata.received_uart_data, ">"))
 8000dee:	213e      	movs	r1, #62	; 0x3e
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000df2:	f003 f8df 	bl	8003fb4 <strchr>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <esp8266_rxcallback+0xc6>
		received_mqttdata.is_data_first_part_recived_completely = true;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000e04:	e003      	b.n	8000e0e <esp8266_rxcallback+0xce>


	else {
		received_mqttdata.is_data_first_part_recived_completely = false;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}
	if (received_mqttdata.current_data_idx
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000e10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e14:	2b62      	cmp	r3, #98	; 0x62
 8000e16:	d903      	bls.n	8000e20 <esp8266_rxcallback+0xe0>
			>= sizeof(received_mqttdata.received_uart_data) - 1) {
		received_mqttdata.current_data_idx = 0;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <esp8266_rxcallback+0xf0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	}
	HAL_UART_Receive_IT(&huart1,
 8000e20:	2201      	movs	r2, #1
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <esp8266_rxcallback+0x100>)
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <esp8266_rxcallback+0x104>)
 8000e26:	f002 f87a 	bl	8002f1e <HAL_UART_Receive_IT>
			(uint8_t*) &received_mqttdata.received_uart_char_data, 1);
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200004e8 	.word	0x200004e8
 8000e34:	080051f8 	.word	0x080051f8
 8000e38:	080051fc 	.word	0x080051fc
 8000e3c:	08005200 	.word	0x08005200
 8000e40:	2000054f 	.word	0x2000054f
 8000e44:	20000324 	.word	0x20000324

08000e48 <fill_with_garbage_data>:
static void fill_with_garbage_data(char garbage_val) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < sizeof(received_mqttdata.received_uart_data); i++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e010      	b.n	8000e7a <fill_with_garbage_data+0x32>
		if (i == (sizeof(received_mqttdata.received_uart_data) - 1)) {
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b63      	cmp	r3, #99	; 0x63
 8000e5c:	d105      	bne.n	8000e6a <fill_with_garbage_data+0x22>
			received_mqttdata.received_uart_data[i] = '\0';
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <fill_with_garbage_data+0x48>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
			continue;
 8000e68:	e004      	b.n	8000e74 <fill_with_garbage_data+0x2c>
		}
		received_mqttdata.received_uart_data[i] = garbage_val;
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <fill_with_garbage_data+0x48>)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(received_mqttdata.received_uart_data); i++){
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b63      	cmp	r3, #99	; 0x63
 8000e7e:	d9eb      	bls.n	8000e58 <fill_with_garbage_data+0x10>

}
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200004e8 	.word	0x200004e8

08000e94 <return_last_garbage_idx>:
static uint16_t return_last_garbage_idx(char garbage_val) {
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
for (int i = 0; i < received_mqttdata.current_data_idx; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	e00c      	b.n	8000ebe <return_last_garbage_idx+0x2a>
	if (received_mqttdata.received_uart_data[i] == garbage_val) {
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <return_last_garbage_idx+0x48>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	79fa      	ldrb	r2, [r7, #7]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d102      	bne.n	8000eb8 <return_last_garbage_idx+0x24>
		return i;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	e00b      	b.n	8000ed0 <return_last_garbage_idx+0x3c>
for (int i = 0; i < received_mqttdata.current_data_idx; i++)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <return_last_garbage_idx+0x48>)
 8000ec0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	dbeb      	blt.n	8000ea4 <return_last_garbage_idx+0x10>
	}
return -1;
 8000ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	200004e8 	.word	0x200004e8

08000ee0 <send_cmd_receive_total_response>:
uint8_t send_cmd_receive_total_response(const char *send_atcmd,
	uint32_t timeout) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
static is_at_cmd_sended = false;
int received_last_idx = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 //Burada tüm data uzunluğu $ karakteri ile dolduruluyor.
if (is_at_cmd_sended == false) {
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <send_cmd_receive_total_response+0xe0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d110      	bne.n	8000f18 <send_cmd_receive_total_response+0x38>
	fill_with_garbage_data('$');
 8000ef6:	2024      	movs	r0, #36	; 0x24
 8000ef8:	f7ff ffa6 	bl	8000e48 <fill_with_garbage_data>
	flush_response();
 8000efc:	f7ff feac 	bl	8000c58 <flush_response>
	if (send_esp8266(send_atcmd)){
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fe8f 	bl	8000c24 <send_esp8266>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <send_cmd_receive_total_response+0x34>
		is_at_cmd_sended = true;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <send_cmd_receive_total_response+0xe0>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e001      	b.n	8000f18 <send_cmd_receive_total_response+0x38>
	}
	else
		return false;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e04e      	b.n	8000fb6 <send_cmd_receive_total_response+0xd6>
}
uint32_t start_execution_time = HAL_GetTick();
 8000f18:	f000 fd44 	bl	80019a4 <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]
while (!received_mqttdata.is_data_received_start)
 8000f1e:	bf00      	nop
 8000f20:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <send_cmd_receive_total_response+0xe4>)
 8000f22:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f7      	bne.n	8000f20 <send_cmd_receive_total_response+0x40>
	; //ilk data gelene kadar bekle.
while (((HAL_GetTick() - start_execution_time) < timeout)
 8000f30:	bf00      	nop
 8000f32:	f000 fd37 	bl	80019a4 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d904      	bls.n	8000f4c <send_cmd_receive_total_response+0x6c>
		&& received_mqttdata.is_data_received_start)
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <send_cmd_receive_total_response+0xe4>)
 8000f44:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f2      	bne.n	8000f32 <send_cmd_receive_total_response+0x52>
	; //Burada received_mqtt buffer'ına datalar gelmeye başladı.
if (is_at_cmd_sended)
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <send_cmd_receive_total_response+0xe0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <send_cmd_receive_total_response+0x7c>
	received_mqttdata.is_data_received_start = true; //Data Alma işleminin bittiği düşünülüyor
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <send_cmd_receive_total_response+0xe4>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
if (received_mqttdata.is_data_first_part_recived_completely) {
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <send_cmd_receive_total_response+0xe4>)
 8000f5e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d026      	beq.n	8000fb4 <send_cmd_receive_total_response+0xd4>
	if (received_mqttdata.current_data_idx > 0) {
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <send_cmd_receive_total_response+0xe4>)
 8000f68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <send_cmd_receive_total_response+0xd4>
		for (int i = 0; i < 2; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e00a      	b.n	8000f8c <send_cmd_receive_total_response+0xac>
			received_last_idx += return_last_garbage_idx('$');
 8000f76:	2024      	movs	r0, #36	; 0x24
 8000f78:	f7ff ff8c 	bl	8000e94 <return_last_garbage_idx>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 2; i++)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	ddf1      	ble.n	8000f76 <send_cmd_receive_total_response+0x96>
		if ((2 * return_last_garbage_idx('$')) == received_last_idx) {
 8000f92:	2024      	movs	r0, #36	; 0x24
 8000f94:	f7ff ff7e 	bl	8000e94 <return_last_garbage_idx>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d108      	bne.n	8000fb4 <send_cmd_receive_total_response+0xd4>
			is_at_cmd_sended = false;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <send_cmd_receive_total_response+0xe0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
			received_mqttdata.is_data_first_part_recived_completely = false;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <send_cmd_receive_total_response+0xe4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			return true;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <send_cmd_receive_total_response+0xd6>

		}

	}
}
return false;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	200004e8 	.word	0x200004e8

08000fc8 <send_cmd_receive_expected_resp>:

static bool send_cmd_receive_expected_resp(const char *send_at_cmd,
	uint32_t timeout, char *expected_at_resp, uint16_t wait_time) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0a4      	sub	sp, #144	; 0x90
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	807b      	strh	r3, [r7, #2]
uint32_t start_time = HAL_GetTick();
 8000fd6:	f000 fce5 	bl	80019a4 <HAL_GetTick>
 8000fda:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
bool is_time_expired = false;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
bool  is_command_received_totaly=false;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
while (!(is_command_received_totaly=(send_cmd_receive_total_response(send_at_cmd, timeout)))
 8000fea:	bf00      	nop
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff ff76 	bl	8000ee0 <send_cmd_receive_total_response>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf14      	ite	ne
 8000ffa:	2301      	movne	r3, #1
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001002:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d008      	beq.n	8001022 <send_cmd_receive_expected_resp+0x5a>
		&& ((HAL_GetTick() - start_time) < wait_time))
 8001010:	f000 fcc8 	bl	80019a4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3e4      	bcc.n	8000fec <send_cmd_receive_expected_resp+0x24>
	;
if (is_command_received_totaly==false)
 8001022:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <send_cmd_receive_expected_resp+0x6e>
	is_time_expired = true;
 8001030:	2301      	movs	r3, #1
 8001032:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
if (!is_time_expired) {
 8001036:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d03d      	beq.n	80010c0 <send_cmd_receive_expected_resp+0xf8>
	received_mqttdata.is_data_first_part_recived_completely = false;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <send_cmd_receive_expected_resp+0x104>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	char copy_data[112] = { 0 };
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	226c      	movs	r2, #108	; 0x6c
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f002 ff55 	bl	8003f08 <memset>
	uint8_t last_received_idx;
	if ((last_received_idx = return_last_garbage_idx('$')) != -1)
 800105e:	2024      	movs	r0, #36	; 0x24
 8001060:	f7ff ff18 	bl	8000e94 <return_last_garbage_idx>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		last_received_idx--; //Burada son data $ ile doldurulmuştu.1 eksiği son gelen data indeksini tutuyor.
 800106a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800106e:	3b01      	subs	r3, #1
 8001070:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	else
		return false;
	received_mqttdata.received_uart_data[last_received_idx + 1] = '\0';
 8001074:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001078:	3301      	adds	r3, #1
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <send_cmd_receive_expected_resp+0x104>)
 800107c:	2100      	movs	r1, #0
 800107e:	54d1      	strb	r1, [r2, r3]
	memcpy(copy_data, received_mqttdata.received_uart_data,
 8001080:	4812      	ldr	r0, [pc, #72]	; (80010cc <send_cmd_receive_expected_resp+0x104>)
 8001082:	f7ff f8cf 	bl	8000224 <strlen>
 8001086:	4602      	mov	r2, r0
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	490f      	ldr	r1, [pc, #60]	; (80010cc <send_cmd_receive_expected_resp+0x104>)
 800108e:	4618      	mov	r0, r3
 8001090:	f002 ff2c 	bl	8003eec <memcpy>
			strlen(received_mqttdata.received_uart_data));
	//received_mqttdata.received_uart_data
	if (strstr(copy_data, expected_at_resp)) {
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f002 ff97 	bl	8003fce <strstr>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <send_cmd_receive_expected_resp+0xf4>
		memset(received_mqttdata.received_uart_data, '\0',
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	2100      	movs	r1, #0
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <send_cmd_receive_expected_resp+0x104>)
 80010ac:	f002 ff2c 	bl	8003f08 <memset>
				sizeof(received_mqttdata.received_uart_data));
		received_mqttdata.current_data_idx = 0;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <send_cmd_receive_expected_resp+0x104>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		return true;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e002      	b.n	80010c2 <send_cmd_receive_expected_resp+0xfa>
	} else
		return false;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <send_cmd_receive_expected_resp+0xfa>
}
return false;
 80010c0:	2300      	movs	r3, #0

}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3790      	adds	r7, #144	; 0x90
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200004e8 	.word	0x200004e8

080010d0 <subscribe_handler>:

void subscribe_handler() {//Burada Herhangi bir  Topic'e üye olma işlemleri otomatikleştirilimiş
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
mqtt_subscribe("SEMİH54", 0x00);
 80010d4:	2100      	movs	r1, #0
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <subscribe_handler+0x38>)
 80010d8:	f000 faa8 	bl	800162c <mqtt_subscribe>
HAL_Delay(2000);
 80010dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010e0:	f000 fc6c 	bl	80019bc <HAL_Delay>
mqtt_subscribe("IOT", 0x00);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <subscribe_handler+0x3c>)
 80010e8:	f000 faa0 	bl	800162c <mqtt_subscribe>
HAL_Delay(2000);
 80010ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010f0:	f000 fc64 	bl	80019bc <HAL_Delay>
mqtt_subscribe("iot2", 0x00);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <subscribe_handler+0x40>)
 80010f8:	f000 fa98 	bl	800162c <mqtt_subscribe>
HAL_Delay(2000);
 80010fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001100:	f000 fc5c 	bl	80019bc <HAL_Delay>

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	080051a4 	.word	0x080051a4
 800110c:	080051e0 	.word	0x080051e0
 8001110:	08005208 	.word	0x08005208

08001114 <read_message>:
void read_message() {
 8001114:	b580      	push	{r7, lr}
 8001116:	b0c6      	sub	sp, #280	; 0x118
 8001118:	af00      	add	r7, sp, #0
int remain_length = 0, message_length = 0, topic_length = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
char message[100];
char topic[150];
HAL_UART_AbortReceive_IT(&huart1);
 800112c:	484a      	ldr	r0, [pc, #296]	; (8001258 <read_message+0x144>)
 800112e:	f001 ff27 	bl	8002f80 <HAL_UART_AbortReceive_IT>
for (int i = 0; i < sizeof(rx_buffer); i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001138:	e06e      	b.n	8001218 <read_message+0x104>
	if (rx_buffer[i] == 0x30) {
 800113a:	4a48      	ldr	r2, [pc, #288]	; (800125c <read_message+0x148>)
 800113c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b30      	cmp	r3, #48	; 0x30
 8001146:	d162      	bne.n	800120e <read_message+0xfa>
		remain_length = rx_buffer[i + 1];
 8001148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800114c:	3301      	adds	r3, #1
 800114e:	4a43      	ldr	r2, [pc, #268]	; (800125c <read_message+0x148>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		topic_length = rx_buffer[i + 2] + rx_buffer[i + 3];
 8001156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800115a:	3302      	adds	r3, #2
 800115c:	4a3f      	ldr	r2, [pc, #252]	; (800125c <read_message+0x148>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	4619      	mov	r1, r3
 8001162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001166:	3303      	adds	r3, #3
 8001168:	4a3c      	ldr	r2, [pc, #240]	; (800125c <read_message+0x148>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	440b      	add	r3, r1
 800116e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		message_length = remain_length - (topic_length + 2);
 8001172:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001176:	3302      	adds	r3, #2
 8001178:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		for (int k = 0; k < topic_length; k++) {
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001188:	e012      	b.n	80011b0 <read_message+0x9c>
			topic[k] = rx_buffer[i + 4 + k];
 800118a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800118e:	1d1a      	adds	r2, r3, #4
 8001190:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001194:	4413      	add	r3, r2
 8001196:	4a31      	ldr	r2, [pc, #196]	; (800125c <read_message+0x148>)
 8001198:	5cd1      	ldrb	r1, [r2, r3]
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011a0:	4413      	add	r3, r2
 80011a2:	460a      	mov	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
		for (int k = 0; k < topic_length; k++) {
 80011a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80011b0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80011b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbe6      	blt.n	800118a <read_message+0x76>
		}
		for (int j = 0; j < message_length; j++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011c2:	e016      	b.n	80011f2 <read_message+0xde>
			message[j] = rx_buffer[i + 4 + topic_length + j];
 80011c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011c8:	1d1a      	adds	r2, r3, #4
 80011ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011ce:	441a      	add	r2, r3
 80011d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011d4:	4413      	add	r3, r2
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <read_message+0x148>)
 80011d8:	5cd1      	ldrb	r1, [r2, r3]
 80011da:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80011de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < message_length; j++) {
 80011e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011ec:	3301      	adds	r3, #1
 80011ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80011f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80011f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbe2      	blt.n	80011c4 <read_message+0xb0>
		}
		receivedfirstcallbck(topic, message);
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <read_message+0x14c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001206:	1d3a      	adds	r2, r7, #4
 8001208:	4610      	mov	r0, r2
 800120a:	4798      	blx	r3
		break;
 800120c:	e008      	b.n	8001220 <read_message+0x10c>
for (int i = 0; i < sizeof(rx_buffer); i++) {
 800120e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001212:	3301      	adds	r3, #1
 8001214:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800121c:	2b95      	cmp	r3, #149	; 0x95
 800121e:	d98c      	bls.n	800113a <read_message+0x26>
	}
}
memset(rx_buffer, 0, sizeof(rx_buffer)); 						// clear buffer
 8001220:	2296      	movs	r2, #150	; 0x96
 8001222:	2100      	movs	r1, #0
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <read_message+0x148>)
 8001226:	f002 fe6f 	bl	8003f08 <memset>
memset(message, 0, sizeof(message));
 800122a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f002 fe68 	bl	8003f08 <memset>
memset(topic, 0, sizeof(topic));
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2296      	movs	r2, #150	; 0x96
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fe62 	bl	8003f08 <memset>
HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_buffer, 100);
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	4905      	ldr	r1, [pc, #20]	; (800125c <read_message+0x148>)
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <read_message+0x144>)
 800124a:	f001 fe68 	bl	8002f1e <HAL_UART_Receive_IT>
}
 800124e:	bf00      	nop
 8001250:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000324 	.word	0x20000324
 800125c:	200001f4 	.word	0x200001f4
 8001260:	200005b8 	.word	0x200005b8

08001264 <Wifi_connect>:

void Wifi_connect(char *SSID, char *Password) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
bool err = false;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
err += (uint8_t) send_cmd_receive_expected_resp("AT+CWMODE=1\r\n", 1500, "OK",
 8001274:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001278:	4a25      	ldr	r2, [pc, #148]	; (8001310 <Wifi_connect+0xac>)
 800127a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800127e:	4825      	ldr	r0, [pc, #148]	; (8001314 <Wifi_connect+0xb0>)
 8001280:	f7ff fea2 	bl	8000fc8 <send_cmd_receive_expected_resp>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800128c:	4413      	add	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		600); /*HAL_UART_Transmit(&huart1,(uint8_t *)"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),1000);*/
err += (uint8_t) send_cmd_receive_expected_resp("AT+CWQAP\r\n", 1500, "OK",
 800129a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <Wifi_connect+0xac>)
 80012a0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80012a4:	481c      	ldr	r0, [pc, #112]	; (8001318 <Wifi_connect+0xb4>)
 80012a6:	f7ff fe8f 	bl	8000fc8 <send_cmd_receive_expected_resp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012b2:	4413      	add	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		600); /*HAL_UART_Transmit(&huart1,(uint8_t *)"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"),1000);*/
//	HAL_UART_Transmit(&huart1,(uint8_t *)"AT+RST\r\n",strlen("AT+RST\r\n"),100);
//	HAL_Delay(5000);
char wifi_data[45] = { 0 };
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2229      	movs	r2, #41	; 0x29
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fe1b 	bl	8003f08 <memset>
sprintf(wifi_data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Password); /*HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Password),1000);*/
 80012d2:	f107 0008 	add.w	r0, r7, #8
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <Wifi_connect+0xb8>)
 80012dc:	f002 fe1c 	bl	8003f18 <siprintf>
err += (uint8_t) send_cmd_receive_expected_resp(wifi_data, 1500, "OK", 600);
 80012e0:	f107 0008 	add.w	r0, r7, #8
 80012e4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <Wifi_connect+0xac>)
 80012ea:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80012ee:	f7ff fe6b 	bl	8000fc8 <send_cmd_receive_expected_resp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012fa:	4413      	add	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
if (err == 3)
	return true;
else
	return false;
}
 8001308:	3738      	adds	r7, #56	; 0x38
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	08005210 	.word	0x08005210
 8001314:	08005214 	.word	0x08005214
 8001318:	08005224 	.word	0x08005224
 800131c:	08005230 	.word	0x08005230

08001320 <learn_local_esp8266_ip>:
static bool learn_local_esp8266_ip(char *ip_addr) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
while (!(send_cmd_receive_total_response("AT+CIFSR\r\n", 1500)))
 8001328:	bf00      	nop
 800132a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <learn_local_esp8266_ip+0x54>)
 8001330:	f7ff fdd6 	bl	8000ee0 <send_cmd_receive_total_response>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f7      	beq.n	800132a <learn_local_esp8266_ip+0xa>
	;
	if (sscanf(received_mqttdata.received_uart_data, "+CIFSR:STAIP,\"%[^\"]",
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <learn_local_esp8266_ip+0x58>)
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <learn_local_esp8266_ip+0x5c>)
 8001340:	f002 fe0a 	bl	8003f58 <siscanf>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10e      	bne.n	8001368 <learn_local_esp8266_ip+0x48>
			ip_addr) == 1) {
		memset(received_mqttdata.received_uart_data, '\0',
 800134a:	2264      	movs	r2, #100	; 0x64
 800134c:	2100      	movs	r1, #0
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <learn_local_esp8266_ip+0x5c>)
 8001350:	f002 fdda 	bl	8003f08 <memset>
				sizeof(received_mqttdata.received_uart_data));
		received_mqttdata.current_data_idx = 0;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <learn_local_esp8266_ip+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		received_mqttdata.is_data_first_part_recived_completely = false;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <learn_local_esp8266_ip+0x5c>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return true;
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <learn_local_esp8266_ip+0x4a>

	}
	return false;
 8001368:	2300      	movs	r3, #0

}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	08005248 	.word	0x08005248
 8001378:	08005254 	.word	0x08005254
 800137c:	200004e8 	.word	0x200004e8

08001380 <connect_broker>:


void connect_broker(char *ip, char *port, char *protocoltype, char *client_id,
	uint16_t keepalive, uint8_t flag) {
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b095      	sub	sp, #84	; 0x54
 8001384:	af0a      	add	r7, sp, #40	; 0x28
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
uint8_t err=0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
char esp8266_ip[16]={0};
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
err=send_cmd_receive_expected_resp("AT+CIPCLOSE\r\n", 1200, "OK", 800);
 80013a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013a8:	4a61      	ldr	r2, [pc, #388]	; (8001530 <connect_broker+0x1b0>)
 80013aa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80013ae:	4861      	ldr	r0, [pc, #388]	; (8001534 <connect_broker+0x1b4>)
 80013b0:	f7ff fe0a 	bl	8000fc8 <send_cmd_receive_expected_resp>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
HAL_Delay(100);
 80013ba:	2064      	movs	r0, #100	; 0x64
 80013bc:	f000 fafe 	bl	80019bc <HAL_Delay>
err=send_cmd_receive_expected_resp("AT+CIPMUX=0\r\n", 1500, "OK",600);
 80013c0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80013c4:	4a5a      	ldr	r2, [pc, #360]	; (8001530 <connect_broker+0x1b0>)
 80013c6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80013ca:	485b      	ldr	r0, [pc, #364]	; (8001538 <connect_broker+0x1b8>)
 80013cc:	f7ff fdfc 	bl	8000fc8 <send_cmd_receive_expected_resp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f000 faf0 	bl	80019bc <HAL_Delay>
err=learn_local_esp8266_ip(esp8266_ip);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff9d 	bl	8001320 <learn_local_esp8266_ip>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f000 fae5 	bl	80019bc <HAL_Delay>
		sprintf(tx_buffer, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", ip, port);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4951      	ldr	r1, [pc, #324]	; (800153c <connect_broker+0x1bc>)
 80013f8:	4851      	ldr	r0, [pc, #324]	; (8001540 <connect_broker+0x1c0>)
 80013fa:	f002 fd8d 	bl	8003f18 <siprintf>
		send_cmd_receive_expected_resp(tx_buffer, 1500, "OK", 600);
 80013fe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001402:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <connect_broker+0x1b0>)
 8001404:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001408:	484d      	ldr	r0, [pc, #308]	; (8001540 <connect_broker+0x1c0>)
 800140a:	f7ff fddd 	bl	8000fc8 <send_cmd_receive_expected_resp>

HAL_Delay(2000);
 800140e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001412:	f000 fad3 	bl	80019bc <HAL_Delay>
if(received_mqttdata.tcp_conn_handled){
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <connect_broker+0x1c4>)
 8001418:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8083 	beq.w	8001528 <connect_broker+0x1a8>
ProtocolNameLength = strlen(protocoltype);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7fe fefe 	bl	8000224 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <connect_broker+0x1c8>)
 800142e:	801a      	strh	r2, [r3, #0]
ClientIDLength = strlen(client_id);
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f7fe fef7 	bl	8000224 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <connect_broker+0x1cc>)
 800143c:	801a      	strh	r2, [r3, #0]
uint8_t remainlength;
remainlength = 2 + ProtocolNameLength + 6 + ClientIDLength;
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <connect_broker+0x1c8>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <connect_broker+0x1cc>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3308      	adds	r3, #8
 8001450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
uint16_t total_length = sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s",
 8001454:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <connect_broker+0x1d0>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	469c      	mov	ip, r3
 800145a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
		(char) connect, (char) remainlength, (char) (ProtocolNameLength << 8),
		(char) ProtocolNameLength, protocoltype, (char) level, (char) flag,
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <connect_broker+0x1c8>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
uint16_t total_length = sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s",
 8001464:	4618      	mov	r0, r3
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <connect_broker+0x1d4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461c      	mov	r4, r3
 800146c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
		(char) (keepalive << 8), (char) keepalive, (char) (ClientIDLength << 8),
 8001470:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001474:	b2d2      	uxtb	r2, r2
uint16_t total_length = sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s",
 8001476:	4615      	mov	r5, r2
		(char) ClientIDLength, client_id);
 8001478:	4a34      	ldr	r2, [pc, #208]	; (800154c <connect_broker+0x1cc>)
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	b2d2      	uxtb	r2, r2
uint16_t total_length = sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s",
 800147e:	4616      	mov	r6, r2
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	9209      	str	r2, [sp, #36]	; 0x24
 8001484:	9608      	str	r6, [sp, #32]
 8001486:	2200      	movs	r2, #0
 8001488:	9207      	str	r2, [sp, #28]
 800148a:	9506      	str	r5, [sp, #24]
 800148c:	2200      	movs	r2, #0
 800148e:	9205      	str	r2, [sp, #20]
 8001490:	9304      	str	r3, [sp, #16]
 8001492:	9403      	str	r4, [sp, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	9001      	str	r0, [sp, #4]
 800149a:	2300      	movs	r3, #0
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	460b      	mov	r3, r1
 80014a0:	4662      	mov	r2, ip
 80014a2:	492d      	ldr	r1, [pc, #180]	; (8001558 <connect_broker+0x1d8>)
 80014a4:	4826      	ldr	r0, [pc, #152]	; (8001540 <connect_broker+0x1c0>)
 80014a6:	f002 fd37 	bl	8003f18 <siprintf>
 80014aa:	4603      	mov	r3, r0
 80014ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		sprintf(tx_buffer, "AT+CIPSEND=%d\r\n", total_length);
 80014ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014b0:	461a      	mov	r2, r3
 80014b2:	492a      	ldr	r1, [pc, #168]	; (800155c <connect_broker+0x1dc>)
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <connect_broker+0x1c0>)
 80014b6:	f002 fd2f 	bl	8003f18 <siprintf>
	if(send_esp8266(tx_buffer)){
 80014ba:	4821      	ldr	r0, [pc, #132]	; (8001540 <connect_broker+0x1c0>)
 80014bc:	f7ff fbb2 	bl	8000c24 <send_esp8266>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d030      	beq.n	8001528 <connect_broker+0x1a8>
		sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s", (char) connect,
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <connect_broker+0x1d0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	469c      	mov	ip, r3
 80014cc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
				(char) remainlength, (char) (ProtocolNameLength << 8),
				(char) ProtocolNameLength, protocoltype, (char) level,
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <connect_broker+0x1c8>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
		sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s", (char) connect,
 80014d6:	4618      	mov	r0, r3
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <connect_broker+0x1d4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461c      	mov	r4, r3
 80014de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
				(char) flag, (char) (keepalive << 8), (char) keepalive,
 80014e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80014e6:	b2d2      	uxtb	r2, r2
		sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s", (char) connect,
 80014e8:	4615      	mov	r5, r2
				(char) (ClientIDLength << 8), (char) ClientIDLength, client_id);
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <connect_broker+0x1cc>)
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	b2d2      	uxtb	r2, r2
		sprintf(tx_buffer, "%c%c%c%c%s%c%c%c%c%c%c%s", (char) connect,
 80014f0:	4616      	mov	r6, r2
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	9209      	str	r2, [sp, #36]	; 0x24
 80014f6:	9608      	str	r6, [sp, #32]
 80014f8:	2200      	movs	r2, #0
 80014fa:	9207      	str	r2, [sp, #28]
 80014fc:	9506      	str	r5, [sp, #24]
 80014fe:	2200      	movs	r2, #0
 8001500:	9205      	str	r2, [sp, #20]
 8001502:	9304      	str	r3, [sp, #16]
 8001504:	9403      	str	r4, [sp, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	9001      	str	r0, [sp, #4]
 800150c:	2300      	movs	r3, #0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	460b      	mov	r3, r1
 8001512:	4662      	mov	r2, ip
 8001514:	4910      	ldr	r1, [pc, #64]	; (8001558 <connect_broker+0x1d8>)
 8001516:	480a      	ldr	r0, [pc, #40]	; (8001540 <connect_broker+0x1c0>)
 8001518:	f002 fcfe 	bl	8003f18 <siprintf>
		send_esp8266(tx_buffer);
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <connect_broker+0x1c0>)
 800151e:	f7ff fb81 	bl	8000c24 <send_esp8266>
HAL_Delay(100);
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f000 fa4a 	bl	80019bc <HAL_Delay>
	}
	}
}
 8001528:	bf00      	nop
 800152a:	372c      	adds	r7, #44	; 0x2c
 800152c:	46bd      	mov	sp, r7
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	08005210 	.word	0x08005210
 8001534:	08005268 	.word	0x08005268
 8001538:	08005278 	.word	0x08005278
 800153c:	08005288 	.word	0x08005288
 8001540:	2000028c 	.word	0x2000028c
 8001544:	200004e8 	.word	0x200004e8
 8001548:	200004e4 	.word	0x200004e4
 800154c:	200005c0 	.word	0x200005c0
 8001550:	2000000d 	.word	0x2000000d
 8001554:	2000000c 	.word	0x2000000c
 8001558:	080052a4 	.word	0x080052a4
 800155c:	080052c0 	.word	0x080052c0

08001560 <mqtt_publish>:
		mqttbuffer.is_new = 0;
	}
}
}

void mqtt_publish(const char *topic, const char *message) {
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af04      	add	r7, sp, #16
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]

uint16_t topiclength = strlen(topic);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7fe fe5a 	bl	8000224 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	81fb      	strh	r3, [r7, #14]
uint8_t remainlength = 2 + topiclength + strlen(message);
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	b2dc      	uxtb	r4, r3
 8001578:	6838      	ldr	r0, [r7, #0]
 800157a:	f7fe fe53 	bl	8000224 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4423      	add	r3, r4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3302      	adds	r3, #2
 8001588:	737b      	strb	r3, [r7, #13]
int length = sprintf(tx_buffer, "%c%c%c%c%s%s", (char) publishCon,
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <mqtt_publish+0xb8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	7b7a      	ldrb	r2, [r7, #13]
		(char) remainlength, (char) (topiclength << 8), (char) topiclength,
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	b2db      	uxtb	r3, r3
int length = sprintf(tx_buffer, "%c%c%c%c%s%s", (char) publishCon,
 8001596:	4619      	mov	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	9303      	str	r3, [sp, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	9101      	str	r1, [sp, #4]
 80015a2:	2300      	movs	r3, #0
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	4602      	mov	r2, r0
 80015aa:	491c      	ldr	r1, [pc, #112]	; (800161c <mqtt_publish+0xbc>)
 80015ac:	481c      	ldr	r0, [pc, #112]	; (8001620 <mqtt_publish+0xc0>)
 80015ae:	f002 fcb3 	bl	8003f18 <siprintf>
 80015b2:	60b8      	str	r0, [r7, #8]
		topic, message);
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
		sprintf(tx_buffer, "AT+CIPSEND=%d\r\n", length), 100);
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <mqtt_publish+0xc4>)
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <mqtt_publish+0xc0>)
 80015ba:	f002 fcad 	bl	8003f18 <siprintf>
 80015be:	4603      	mov	r3, r0
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	2364      	movs	r3, #100	; 0x64
 80015c4:	4916      	ldr	r1, [pc, #88]	; (8001620 <mqtt_publish+0xc0>)
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <mqtt_publish+0xc8>)
 80015c8:	f001 fb75 	bl	8002cb6 <HAL_UART_Transmit>
HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f000 f9f5 	bl	80019bc <HAL_Delay>
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
		sprintf(tx_buffer, "%c%c%c%c%s%s", (char) publishCon,
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <mqtt_publish+0xb8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	7b7a      	ldrb	r2, [r7, #13]
				(char) remainlength, (char) (topiclength << 8),
				(char) topiclength, topic, message), 5000);
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	b2db      	uxtb	r3, r3
		sprintf(tx_buffer, "%c%c%c%c%s%s", (char) publishCon,
 80015de:	4619      	mov	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	9303      	str	r3, [sp, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	9101      	str	r1, [sp, #4]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	4602      	mov	r2, r0
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <mqtt_publish+0xbc>)
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <mqtt_publish+0xc0>)
 80015f6:	f002 fc8f 	bl	8003f18 <siprintf>
 80015fa:	4603      	mov	r3, r0
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001602:	4907      	ldr	r1, [pc, #28]	; (8001620 <mqtt_publish+0xc0>)
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <mqtt_publish+0xc8>)
 8001606:	f001 fb56 	bl	8002cb6 <HAL_UART_Transmit>
HAL_Delay(100);
 800160a:	2064      	movs	r0, #100	; 0x64
 800160c:	f000 f9d6 	bl	80019bc <HAL_Delay>

}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	2000000e 	.word	0x2000000e
 800161c:	080052d0 	.word	0x080052d0
 8001620:	2000028c 	.word	0x2000028c
 8001624:	080052c0 	.word	0x080052c0
 8001628:	20000324 	.word	0x20000324

0800162c <mqtt_subscribe>:
void mqtt_subscribe(const char *topic, uint8_t Qos) {
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af06      	add	r7, sp, #24
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
uint16_t TopicLength = strlen(topic);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7fe fdf3 	bl	8000224 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	81fb      	strh	r3, [r7, #14]
uint8_t RemainLength = 2 + 2 + TopicLength + 1; // packetIDlength(2) + topiclengthdata(2)+topiclength+Qos
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	3305      	adds	r3, #5
 8001648:	737b      	strb	r3, [r7, #13]
uint16_t length = sprintf(tx_buffer, "%c%c%c%c%c%c%s%c", (char) subscribeCon,
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <mqtt_subscribe+0xc8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461c      	mov	r4, r3
 8001650:	7b7a      	ldrb	r2, [r7, #13]
		(char) RemainLength, (char) (packetID << 8), (char) packetID,
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <mqtt_subscribe+0xcc>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
uint16_t length = sprintf(tx_buffer, "%c%c%c%c%c%c%s%c", (char) subscribeCon,
 8001658:	4619      	mov	r1, r3
		(char) (TopicLength << 8), (char) TopicLength, topic, (char) Qos);
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	b2db      	uxtb	r3, r3
uint16_t length = sprintf(tx_buffer, "%c%c%c%c%c%c%s%c", (char) subscribeCon,
 800165e:	4618      	mov	r0, r3
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	9305      	str	r3, [sp, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	9304      	str	r3, [sp, #16]
 8001668:	9003      	str	r0, [sp, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	9101      	str	r1, [sp, #4]
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	4622      	mov	r2, r4
 8001678:	4920      	ldr	r1, [pc, #128]	; (80016fc <mqtt_subscribe+0xd0>)
 800167a:	4821      	ldr	r0, [pc, #132]	; (8001700 <mqtt_subscribe+0xd4>)
 800167c:	f002 fc4c 	bl	8003f18 <siprintf>
 8001680:	4603      	mov	r3, r0
 8001682:	817b      	strh	r3, [r7, #10]
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
		sprintf(tx_buffer, "AT+CIPSEND=%d\r\n", length), 1000);
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	461a      	mov	r2, r3
 8001688:	491e      	ldr	r1, [pc, #120]	; (8001704 <mqtt_subscribe+0xd8>)
 800168a:	481d      	ldr	r0, [pc, #116]	; (8001700 <mqtt_subscribe+0xd4>)
 800168c:	f002 fc44 	bl	8003f18 <siprintf>
 8001690:	4603      	mov	r3, r0
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
 8001692:	b29a      	uxth	r2, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	4919      	ldr	r1, [pc, #100]	; (8001700 <mqtt_subscribe+0xd4>)
 800169a:	481b      	ldr	r0, [pc, #108]	; (8001708 <mqtt_subscribe+0xdc>)
 800169c:	f001 fb0b 	bl	8002cb6 <HAL_UART_Transmit>
HAL_Delay(100);
 80016a0:	2064      	movs	r0, #100	; 0x64
 80016a2:	f000 f98b 	bl	80019bc <HAL_Delay>
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
		sprintf(tx_buffer, "%c%c%c%c%c%c%s%c", (char) subscribeCon,
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <mqtt_subscribe+0xc8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461c      	mov	r4, r3
 80016ac:	7b7a      	ldrb	r2, [r7, #13]
				(char) RemainLength, (char) (packetID << 8), (char) packetID,
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <mqtt_subscribe+0xcc>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b2db      	uxtb	r3, r3
		sprintf(tx_buffer, "%c%c%c%c%c%c%s%c", (char) subscribeCon,
 80016b4:	4619      	mov	r1, r3
				(char) (TopicLength << 8), (char) TopicLength, topic,
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	b2db      	uxtb	r3, r3
		sprintf(tx_buffer, "%c%c%c%c%c%c%s%c", (char) subscribeCon,
 80016ba:	4618      	mov	r0, r3
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	9305      	str	r3, [sp, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	9304      	str	r3, [sp, #16]
 80016c4:	9003      	str	r0, [sp, #12]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	9101      	str	r1, [sp, #4]
 80016cc:	2300      	movs	r3, #0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	4622      	mov	r2, r4
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <mqtt_subscribe+0xd0>)
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <mqtt_subscribe+0xd4>)
 80016d8:	f002 fc1e 	bl	8003f18 <siprintf>
 80016dc:	4603      	mov	r3, r0
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <mqtt_subscribe+0xd4>)
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <mqtt_subscribe+0xdc>)
 80016e8:	f001 fae5 	bl	8002cb6 <HAL_UART_Transmit>
				(char) Qos), 5000);
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	2000000f 	.word	0x2000000f
 80016f8:	2000000a 	.word	0x2000000a
 80016fc:	080052e0 	.word	0x080052e0
 8001700:	2000028c 	.word	0x2000028c
 8001704:	080052c0 	.word	0x080052c0
 8001708:	20000324 	.word	0x20000324

0800170c <setmqttcallback>:
void setmqttcallback(mymqttcallback mqttcallback) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
receivedfirstcallbck = mqttcallback;
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <setmqttcallback+0x1c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200005b8 	.word	0x200005b8

0800172c <receive_response>:

static uint8_t receive_response(char *resp, uint8_t num_of_bytes,
	uint32_t timeout_ms) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	460b      	mov	r3, r1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	72fb      	strb	r3, [r7, #11]
uint32_t start = HAL_GetTick();
 800173a:	f000 f933 	bl	80019a4 <HAL_GetTick>
 800173e:	6178      	str	r0, [r7, #20]
uint8_t resp_buf;
while (num_of_bytes) {
 8001740:	e027      	b.n	8001792 <receive_response+0x66>
	resp_buf = '\0';
 8001742:	2300      	movs	r3, #0
 8001744:	74fb      	strb	r3, [r7, #19]
	if (HAL_UART_Receive(&huart1, &resp_buf, 1, 250) == HAL_OK) {
 8001746:	f107 0113 	add.w	r1, r7, #19
 800174a:	23fa      	movs	r3, #250	; 0xfa
 800174c:	2201      	movs	r2, #1
 800174e:	4815      	ldr	r0, [pc, #84]	; (80017a4 <receive_response+0x78>)
 8001750:	f001 fb43 	bl	8002dda <HAL_UART_Receive>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10e      	bne.n	8001778 <receive_response+0x4c>
		if (resp_buf != '\0') {
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d018      	beq.n	8001792 <receive_response+0x66>
			send_esp8266("paket byte alindi\r\n");
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <receive_response+0x7c>)
 8001762:	f7ff fa5f 	bl	8000c24 <send_esp8266>

			*resp++ = resp_buf;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	7cfa      	ldrb	r2, [r7, #19]
 800176e:	701a      	strb	r2, [r3, #0]
			num_of_bytes--;
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	3b01      	subs	r3, #1
 8001774:	72fb      	strb	r3, [r7, #11]
 8001776:	e00c      	b.n	8001792 <receive_response+0x66>

		}
	}

	else if (HAL_GetTick() - start > timeout_ms) {
 8001778:	f000 f914 	bl	80019a4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	d201      	bcs.n	800178c <receive_response+0x60>
		return 0;
 8001788:	2300      	movs	r3, #0
 800178a:	e006      	b.n	800179a <receive_response+0x6e>
		//break;
	} else {
		send_esp8266("paket byte alinamadi\r\n");
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <receive_response+0x80>)
 800178e:	f7ff fa49 	bl	8000c24 <send_esp8266>
while (num_of_bytes) {
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1d4      	bne.n	8001742 <receive_response+0x16>
	}

}
return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000324 	.word	0x20000324
 80017a8:	080052f4 	.word	0x080052f4
 80017ac:	08005308 	.word	0x08005308

080017b0 <mqtt_is_connected>:

mqtt_connection_e mqtt_is_connected() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
uint8_t length_data = sprintf(tx_buffer, "%c%c", (char) pingreqpacket[0],
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <mqtt_is_connected+0xb4>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
		(char) pingreqpacket[1]);
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <mqtt_is_connected+0xb4>)
 80017be:	785b      	ldrb	r3, [r3, #1]
uint8_t length_data = sprintf(tx_buffer, "%c%c", (char) pingreqpacket[0],
 80017c0:	4929      	ldr	r1, [pc, #164]	; (8001868 <mqtt_is_connected+0xb8>)
 80017c2:	482a      	ldr	r0, [pc, #168]	; (800186c <mqtt_is_connected+0xbc>)
 80017c4:	f002 fba8 	bl	8003f18 <siprintf>
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
char resp[2] = { };
 80017cc:	2300      	movs	r3, #0
 80017ce:	80bb      	strh	r3, [r7, #4]
flush_response();
 80017d0:	f7ff fa42 	bl	8000c58 <flush_response>
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
		sprintf(tx_buffer, "AT+CIPSEND=%d\r\n", length_data), 1000);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4925      	ldr	r1, [pc, #148]	; (8001870 <mqtt_is_connected+0xc0>)
 80017da:	4824      	ldr	r0, [pc, #144]	; (800186c <mqtt_is_connected+0xbc>)
 80017dc:	f002 fb9c 	bl	8003f18 <siprintf>
 80017e0:	4603      	mov	r3, r0
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e8:	4920      	ldr	r1, [pc, #128]	; (800186c <mqtt_is_connected+0xbc>)
 80017ea:	4822      	ldr	r0, [pc, #136]	; (8001874 <mqtt_is_connected+0xc4>)
 80017ec:	f001 fa63 	bl	8002cb6 <HAL_UART_Transmit>
HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f000 f8e3 	bl	80019bc <HAL_Delay>
flush_response();
 80017f6:	f7ff fa2f 	bl	8000c58 <flush_response>
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
		sprintf(tx_buffer, "%c%c", (char) pingreqpacket[0],
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <mqtt_is_connected+0xb4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
				(char) pingreqpacket[1]), 5000);
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <mqtt_is_connected+0xb4>)
 8001802:	785b      	ldrb	r3, [r3, #1]
		sprintf(tx_buffer, "%c%c", (char) pingreqpacket[0],
 8001804:	4918      	ldr	r1, [pc, #96]	; (8001868 <mqtt_is_connected+0xb8>)
 8001806:	4819      	ldr	r0, [pc, #100]	; (800186c <mqtt_is_connected+0xbc>)
 8001808:	f002 fb86 	bl	8003f18 <siprintf>
 800180c:	4603      	mov	r3, r0
HAL_UART_Transmit(&huart1, (uint8_t*) tx_buffer,
 800180e:	b29a      	uxth	r2, r3
 8001810:	f241 3388 	movw	r3, #5000	; 0x1388
 8001814:	4915      	ldr	r1, [pc, #84]	; (800186c <mqtt_is_connected+0xbc>)
 8001816:	4817      	ldr	r0, [pc, #92]	; (8001874 <mqtt_is_connected+0xc4>)
 8001818:	f001 fa4d 	bl	8002cb6 <HAL_UART_Transmit>
HAL_Delay(100);
 800181c:	2064      	movs	r0, #100	; 0x64
 800181e:	f000 f8cd 	bl	80019bc <HAL_Delay>

if (receive_response(resp, length_data, 10000)) {
 8001822:	79f9      	ldrb	r1, [r7, #7]
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	f242 7210 	movw	r2, #10000	; 0x2710
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff7e 	bl	800172c <receive_response>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <mqtt_is_connected+0xa0>
	if (strstr(resp, pingresppacket)) {
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	490f      	ldr	r1, [pc, #60]	; (8001878 <mqtt_is_connected+0xc8>)
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fbc7 	bl	8003fce <strstr>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <mqtt_is_connected+0xaa>
		send_esp8266("PAKETE CEVAP ALİNDİ\r\n");
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <mqtt_is_connected+0xcc>)
 8001848:	f7ff f9ec 	bl	8000c24 <send_esp8266>
		return MQTT_CONNECTED;
 800184c:	2300      	movs	r3, #0
 800184e:	e004      	b.n	800185a <mqtt_is_connected+0xaa>
	}
} else {
	send_esp8266("pakete cevap alinamamistir\r\n");
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <mqtt_is_connected+0xd0>)
 8001852:	f7ff f9e7 	bl	8000c24 <send_esp8266>
	return MQTT_IS_NOT_CONNECTED;
 8001856:	2301      	movs	r3, #1
 8001858:	e7ff      	b.n	800185a <mqtt_is_connected+0xaa>

}

}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000004 	.word	0x20000004
 8001868:	08005320 	.word	0x08005320
 800186c:	2000028c 	.word	0x2000028c
 8001870:	080052c0 	.word	0x080052c0
 8001874:	20000324 	.word	0x20000324
 8001878:	20000008 	.word	0x20000008
 800187c:	08005328 	.word	0x08005328
 8001880:	08005340 	.word	0x08005340

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ae:	f7ff f9a7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 faf7 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7fe fead 	bl	8000614 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018c8:	08005544 	.word	0x08005544
  ldr r2, =_sbss
 80018cc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018d0:	20000670 	.word	0x20000670

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f94f 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	200f      	movs	r0, #15
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff f83a 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f967 	bl	8001c0e <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f92f 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	20000014 	.word	0x20000014
 8001978:	20000010 	.word	0x20000010

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000014 	.word	0x20000014
 80019a0:	2000065c 	.word	0x2000065c

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2000065c 	.word	0x2000065c

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000014 	.word	0x20000014

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff feb6 	bl	80019a4 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d008      	beq.n	8001c58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e052      	b.n	8001cfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0216 	bic.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <HAL_DMA_Abort+0x62>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0208 	bic.w	r2, r2, #8
 8001c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca8:	e013      	b.n	8001cd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001caa:	f7ff fe7b 	bl	80019a4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d90c      	bls.n	8001cd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e015      	b.n	8001cfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e4      	bne.n	8001caa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	223f      	movs	r2, #63	; 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00c      	b.n	8001d3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2205      	movs	r2, #5
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e165      	b.n	8002034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8154 	bne.w	800202e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80ae 	beq.w	800202e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_GPIO_Init+0x300>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a5c      	ldr	r2, [pc, #368]	; (800204c <HAL_GPIO_Init+0x300>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_GPIO_Init+0x300>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <HAL_GPIO_Init+0x308>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d025      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	; (800205c <HAL_GPIO_Init+0x310>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <HAL_GPIO_Init+0x314>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_GPIO_Init+0x318>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x31c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x206>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a49      	ldr	r2, [pc, #292]	; (800206c <HAL_GPIO_Init+0x320>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00c      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f4e:	2307      	movs	r3, #7
 8001f50:	e00a      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x21c>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001faa:	4a31      	ldr	r2, [pc, #196]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_GPIO_Init+0x324>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_GPIO_Init+0x324>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_GPIO_Init+0x324>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f ae96 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40021400 	.word	0x40021400
 800206c:	40021800 	.word	0x40021800
 8002070:	40013c00 	.word	0x40013c00

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_PWREx_EnableOverDrive+0x90>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_PWREx_EnableOverDrive+0x90>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_PWREx_EnableOverDrive+0x90>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_PWREx_EnableOverDrive+0x94>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7ff fc66 	bl	80019a4 <HAL_GetTick>
 80020d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020da:	e009      	b.n	80020f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020dc:	f7ff fc62 	bl	80019a4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ea:	d901      	bls.n	80020f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e01f      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d1ee      	bne.n	80020dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002104:	f7ff fc4e 	bl	80019a4 <HAL_GetTick>
 8002108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800210a:	e009      	b.n	8002120 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210c:	f7ff fc4a 	bl	80019a4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211a:	d901      	bls.n	8002120 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e007      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800212c:	d1ee      	bne.n	800210c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	420e0040 	.word	0x420e0040
 8002140:	40007000 	.word	0x40007000
 8002144:	420e0044 	.word	0x420e0044

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0cc      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d90c      	bls.n	8002184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d044      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d119      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	2b03      	cmp	r3, #3
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e067      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4934      	ldr	r1, [pc, #208]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff fbb4 	bl	80019a4 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff fbb0 	bl	80019a4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e04f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d20c      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f855 	bl	800237c <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fb14 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00
 8002304:	40023800 	.word	0x40023800
 8002308:	0800536c 	.word	0x0800536c
 800230c:	20000000 	.word	0x20000000
 8002310:	20000010 	.word	0x20000010

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_GetHCLKFreq+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002330:	f7ff fff0 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0a9b      	lsrs	r3, r3, #10
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	0800537c 	.word	0x0800537c

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002358:	f7ff ffdc 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0b5b      	lsrs	r3, r3, #13
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	0800537c 	.word	0x0800537c

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002380:	b088      	sub	sp, #32
 8002382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002398:	4bce      	ldr	r3, [pc, #824]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b0c      	cmp	r3, #12
 80023a2:	f200 818d 	bhi.w	80026c0 <HAL_RCC_GetSysClockFreq+0x344>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <HAL_RCC_GetSysClockFreq+0x30>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023e1 	.word	0x080023e1
 80023b0:	080026c1 	.word	0x080026c1
 80023b4:	080026c1 	.word	0x080026c1
 80023b8:	080026c1 	.word	0x080026c1
 80023bc:	080023e7 	.word	0x080023e7
 80023c0:	080026c1 	.word	0x080026c1
 80023c4:	080026c1 	.word	0x080026c1
 80023c8:	080026c1 	.word	0x080026c1
 80023cc:	080023ed 	.word	0x080023ed
 80023d0:	080026c1 	.word	0x080026c1
 80023d4:	080026c1 	.word	0x080026c1
 80023d8:	080026c1 	.word	0x080026c1
 80023dc:	08002561 	.word	0x08002561
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4bbd      	ldr	r3, [pc, #756]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023e2:	61bb      	str	r3, [r7, #24]
       break;
 80023e4:	e16f      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e6:	4bbd      	ldr	r3, [pc, #756]	; (80026dc <HAL_RCC_GetSysClockFreq+0x360>)
 80023e8:	61bb      	str	r3, [r7, #24]
      break;
 80023ea:	e16c      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ec:	4bb9      	ldr	r3, [pc, #740]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f6:	4bb7      	ldr	r3, [pc, #732]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d053      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4bb4      	ldr	r3, [pc, #720]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	461a      	mov	r2, r3
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	ea02 0400 	and.w	r4, r2, r0
 800241a:	603c      	str	r4, [r7, #0]
 800241c:	400b      	ands	r3, r1
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	014b      	lsls	r3, r1, #5
 8002432:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002436:	0142      	lsls	r2, r0, #5
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	4623      	mov	r3, r4
 800243e:	1ac0      	subs	r0, r0, r3
 8002440:	462b      	mov	r3, r5
 8002442:	eb61 0103 	sbc.w	r1, r1, r3
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	018b      	lsls	r3, r1, #6
 8002450:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002454:	0182      	lsls	r2, r0, #6
 8002456:	1a12      	subs	r2, r2, r0
 8002458:	eb63 0301 	sbc.w	r3, r3, r1
 800245c:	f04f 0000 	mov.w	r0, #0
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	00d9      	lsls	r1, r3, #3
 8002466:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800246a:	00d0      	lsls	r0, r2, #3
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4621      	mov	r1, r4
 8002472:	1852      	adds	r2, r2, r1
 8002474:	4629      	mov	r1, r5
 8002476:	eb43 0101 	adc.w	r1, r3, r1
 800247a:	460b      	mov	r3, r1
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0259      	lsls	r1, r3, #9
 8002486:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800248a:	0250      	lsls	r0, r2, #9
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	461a      	mov	r2, r3
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f7fd ff20 	bl	80002e0 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	e04c      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024aa:	4b8a      	ldr	r3, [pc, #552]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	461a      	mov	r2, r3
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	ea02 0a00 	and.w	sl, r2, r0
 80024c2:	ea03 0b01 	and.w	fp, r3, r1
 80024c6:	4650      	mov	r0, sl
 80024c8:	4659      	mov	r1, fp
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	014b      	lsls	r3, r1, #5
 80024d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024d8:	0142      	lsls	r2, r0, #5
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	ebb0 000a 	subs.w	r0, r0, sl
 80024e2:	eb61 010b 	sbc.w	r1, r1, fp
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	018b      	lsls	r3, r1, #6
 80024f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024f4:	0182      	lsls	r2, r0, #6
 80024f6:	1a12      	subs	r2, r2, r0
 80024f8:	eb63 0301 	sbc.w	r3, r3, r1
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	00d9      	lsls	r1, r3, #3
 8002506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800250a:	00d0      	lsls	r0, r2, #3
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	eb12 020a 	adds.w	r2, r2, sl
 8002514:	eb43 030b 	adc.w	r3, r3, fp
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	0299      	lsls	r1, r3, #10
 8002522:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002526:	0290      	lsls	r0, r2, #10
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	461a      	mov	r2, r3
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f7fd fed2 	bl	80002e0 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4613      	mov	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002544:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	3301      	adds	r3, #1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	61bb      	str	r3, [r7, #24]
      break;
 800255e:	e0b2      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d04d      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	461a      	mov	r2, r3
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	ea02 0800 	and.w	r8, r2, r0
 800258e:	ea03 0901 	and.w	r9, r3, r1
 8002592:	4640      	mov	r0, r8
 8002594:	4649      	mov	r1, r9
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	014b      	lsls	r3, r1, #5
 80025a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025a4:	0142      	lsls	r2, r0, #5
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	ebb0 0008 	subs.w	r0, r0, r8
 80025ae:	eb61 0109 	sbc.w	r1, r1, r9
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	018b      	lsls	r3, r1, #6
 80025bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025c0:	0182      	lsls	r2, r0, #6
 80025c2:	1a12      	subs	r2, r2, r0
 80025c4:	eb63 0301 	sbc.w	r3, r3, r1
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	00d9      	lsls	r1, r3, #3
 80025d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025d6:	00d0      	lsls	r0, r2, #3
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	eb12 0208 	adds.w	r2, r2, r8
 80025e0:	eb43 0309 	adc.w	r3, r3, r9
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	0259      	lsls	r1, r3, #9
 80025ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025f2:	0250      	lsls	r0, r2, #9
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	461a      	mov	r2, r3
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	f7fd fe6c 	bl	80002e0 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4613      	mov	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e04a      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	461a      	mov	r2, r3
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	ea02 0400 	and.w	r4, r2, r0
 800262a:	ea03 0501 	and.w	r5, r3, r1
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	014b      	lsls	r3, r1, #5
 800263c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002640:	0142      	lsls	r2, r0, #5
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	1b00      	subs	r0, r0, r4
 8002648:	eb61 0105 	sbc.w	r1, r1, r5
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	018b      	lsls	r3, r1, #6
 8002656:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800265a:	0182      	lsls	r2, r0, #6
 800265c:	1a12      	subs	r2, r2, r0
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	00d9      	lsls	r1, r3, #3
 800266c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002670:	00d0      	lsls	r0, r2, #3
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	1912      	adds	r2, r2, r4
 8002678:	eb45 0303 	adc.w	r3, r5, r3
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	0299      	lsls	r1, r3, #10
 8002686:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800268a:	0290      	lsls	r0, r2, #10
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	461a      	mov	r2, r3
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f7fd fe20 	bl	80002e0 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0f1b      	lsrs	r3, r3, #28
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	61bb      	str	r3, [r7, #24]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026c2:	61bb      	str	r3, [r7, #24]
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	69bb      	ldr	r3, [r7, #24]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	007a1200 	.word	0x007a1200

080026e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e28d      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8083 	beq.w	8002806 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002700:	4b94      	ldr	r3, [pc, #592]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d019      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800270c:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002714:	2b08      	cmp	r3, #8
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002718:	4b8e      	ldr	r3, [pc, #568]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002724:	d00c      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d112      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4b84      	ldr	r3, [pc, #528]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05b      	beq.n	8002804 <HAL_RCC_OscConfig+0x124>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d157      	bne.n	8002804 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e25a      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x90>
 8002762:	4b7c      	ldr	r3, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7b      	ldr	r2, [pc, #492]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0xcc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0xb4>
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b73      	ldr	r3, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a72      	ldr	r2, [pc, #456]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xcc>
 8002794:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7ff f8f6 	bl	80019a4 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff f8f2 	bl	80019a4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e21f      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b61      	ldr	r3, [pc, #388]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xdc>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff f8e2 	bl	80019a4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff f8de 	bl	80019a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e20b      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x104>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06f      	beq.n	80028f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002812:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800281e:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002826:	2b08      	cmp	r3, #8
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1d3      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_OscConfig+0x278>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7ff f88b 	bl	80019a4 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7ff f887 	bl	80019a4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1b4      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_OscConfig+0x278>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff f86a 	bl	80019a4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d4:	f7ff f866 	bl	80019a4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e193      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x27c>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff f84a 	bl	80019a4 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7ff f846 	bl	80019a4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e173      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x234>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_OscConfig+0x27c>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7ff f833 	bl	80019a4 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002942:	f7ff f82f 	bl	80019a4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e15c      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b8a      	ldr	r3, [pc, #552]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b83      	ldr	r3, [pc, #524]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7f      	ldr	r3, [pc, #508]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a7e      	ldr	r2, [pc, #504]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b7c      	ldr	r3, [pc, #496]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a75      	ldr	r2, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe ffef 	bl	80019a4 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe ffeb 	bl	80019a4 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e118      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x31e>
 80029f0:	4b66      	ldr	r3, [pc, #408]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x358>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x340>
 8002a06:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a60      	ldr	r2, [pc, #384]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
 8002a12:	4b5e      	ldr	r3, [pc, #376]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	4a5d      	ldr	r2, [pc, #372]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x358>
 8002a20:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a59      	ldr	r2, [pc, #356]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe ffb0 	bl	80019a4 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe ffac 	bl	80019a4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0d7      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x368>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe ff9a 	bl	80019a4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe ff96 	bl	80019a4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0c1      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80ad 	beq.w	8002c0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d145      	bne.n	8002b52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe ff6a 	bl	80019a4 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe ff66 	bl	80019a4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e093      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	491b      	ldr	r1, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff3b 	bl	80019a4 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe ff37 	bl	80019a4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e064      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x452>
 8002b50:	e05c      	b.n	8002c0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe ff24 	bl	80019a4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe ff20 	bl	80019a4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e04d      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x480>
 8002b7e:	e045      	b.n	8002c0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e040      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <HAL_RCC_OscConfig+0x538>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d030      	beq.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d129      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d122      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d119      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10f      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03f      	b.n	8002cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fec6 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 ff51 	bl	8003b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b08a      	sub	sp, #40	; 0x28
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d17c      	bne.n	8002dd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_UART_Transmit+0x2c>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e075      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Transmit+0x3e>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e06e      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe fe4b 	bl	80019a4 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x82>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d48:	e02a      	b.n	8002da0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fc7d 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e036      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1cf      	bne.n	8002d4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2140      	movs	r1, #64	; 0x40
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fc4d 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e006      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b08a      	sub	sp, #40	; 0x28
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	f040 808c 	bne.w	8002f14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Receive+0x2e>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e084      	b.n	8002f16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Receive+0x40>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e07d      	b.n	8002f16 <HAL_UART_Receive+0x13c>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2222      	movs	r2, #34	; 0x22
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e36:	f7fe fdb5 	bl	80019a4 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e50:	d108      	bne.n	8002e64 <HAL_UART_Receive+0x8a>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e003      	b.n	8002e6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e74:	e043      	b.n	8002efe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2120      	movs	r1, #32
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fbe7 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e042      	b.n	8002f16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	3302      	adds	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e01f      	b.n	8002ef0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb8:	d007      	beq.n	8002eca <HAL_UART_Receive+0xf0>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_UART_Receive+0xfe>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e008      	b.n	8002eea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1b6      	bne.n	8002e76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d11d      	bne.n	8002f74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_UART_Receive_IT+0x26>
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e016      	b.n	8002f76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Receive_IT+0x38>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e00f      	b.n	8002f76 <HAL_UART_Receive_IT+0x58>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fbe0 	bl	8003730 <UART_Start_Receive_IT>
 8002f70:	4603      	mov	r3, r0
 8002f72:	e000      	b.n	8002f76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b09a      	sub	sp, #104	; 0x68
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fa8:	657a      	str	r2, [r7, #84]	; 0x54
 8002faa:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d119      	bne.n	800302c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	61fb      	str	r3, [r7, #28]
   return(result);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f023 0310 	bic.w	r3, r3, #16
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d13f      	bne.n	80030ba <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	60bb      	str	r3, [r7, #8]
   return(result);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003050:	65bb      	str	r3, [r7, #88]	; 0x58
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800305a:	61ba      	str	r2, [r7, #24]
 800305c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	613b      	str	r3, [r7, #16]
   return(result);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_UART_AbortReceive_IT+0x160>)
 800307c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fe3f 	bl	8001d06 <HAL_DMA_Abort_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d022      	beq.n	80030d4 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
 800309c:	e01a      	b.n	80030d4 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fab8 	bl	8003628 <HAL_UART_AbortReceiveCpltCallback>
 80030b8:	e00c      	b.n	80030d4 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 faaa 	bl	8003628 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3768      	adds	r7, #104	; 0x68
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08003893 	.word	0x08003893

080030e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0ba      	sub	sp, #232	; 0xe8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fc25 	bl	8003992 <UART_Receive_IT>
      return;
 8003148:	e256      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800314a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80de 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003164:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80d1 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
 80031c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
 80031e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 81ed 	beq.w	80035ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fbb0 	bl	8003992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_UART_IRQHandler+0x17a>
 8003256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04f      	beq.n	80032fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 faa0 	bl	80037a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d141      	bne.n	80032f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800329e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1d9      	bne.n	8003272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d013      	beq.n	80032ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	4a7d      	ldr	r2, [pc, #500]	; (80034c0 <HAL_UART_IRQHandler+0x3dc>)
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fd17 	bl	8001d06 <HAL_DMA_Abort_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032e8:	4610      	mov	r0, r2
 80032ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e00e      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f990 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00a      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f98c 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e006      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f988 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800330a:	e170      	b.n	80035ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	bf00      	nop
    return;
 800330e:	e16e      	b.n	80035ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 814a 	bne.w	80035ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8143 	beq.w	80035ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 813c 	beq.w	80035ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	f040 80b4 	bne.w	80034c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8140 	beq.w	80035f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800337a:	429a      	cmp	r2, r3
 800337c:	f080 8139 	bcs.w	80035f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003386:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	f000 8088 	beq.w	80034a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003406:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800340a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800340e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e1      	bne.n	80033e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003488:	65ba      	str	r2, [r7, #88]	; 0x58
 800348a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800348e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fbc0 	bl	8001c26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8c0 	bl	800363c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034bc:	e099      	b.n	80035f2 <HAL_UART_IRQHandler+0x50e>
 80034be:	bf00      	nop
 80034c0:	0800386b 	.word	0x0800386b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808b 	beq.w	80035f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8086 	beq.w	80035f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800350e:	647a      	str	r2, [r7, #68]	; 0x44
 8003510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e3      	bne.n	80034ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3314      	adds	r3, #20
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	623b      	str	r3, [r7, #32]
   return(result);
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3314      	adds	r3, #20
 8003542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003546:	633a      	str	r2, [r7, #48]	; 0x30
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800354c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e3      	bne.n	8003522 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	60fb      	str	r3, [r7, #12]
   return(result);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0310 	bic.w	r3, r3, #16
 800357e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800358c:	61fa      	str	r2, [r7, #28]
 800358e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	617b      	str	r3, [r7, #20]
   return(result);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e3      	bne.n	8003568 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f848 	bl	800363c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ac:	e023      	b.n	80035f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_UART_IRQHandler+0x4ea>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f97b 	bl	80038c2 <UART_Transmit_IT>
    return;
 80035cc:	e014      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <HAL_UART_IRQHandler+0x514>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9bb 	bl	8003962 <UART_EndTransmit_IT>
    return;
 80035ec:	e004      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
    return;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
      return;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
      return;
 80035f6:	bf00      	nop
  }
}
 80035f8:	37e8      	adds	r7, #232	; 0xe8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b090      	sub	sp, #64	; 0x40
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	e050      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d04c      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800366e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <UART_WaitOnFlagUntilTimeout+0x30>
 8003674:	f7fe f996 	bl	80019a4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003680:	429a      	cmp	r2, r3
 8003682:	d241      	bcs.n	8003708 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a4:	637a      	str	r2, [r7, #52]	; 0x34
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	613b      	str	r3, [r7, #16]
   return(result);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3314      	adds	r3, #20
 80036d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d8:	623a      	str	r2, [r7, #32]
 80036da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	69f9      	ldr	r1, [r7, #28]
 80036de:	6a3a      	ldr	r2, [r7, #32]
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e5      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e00f      	b.n	8003728 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d09f      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3740      	adds	r7, #64	; 0x40
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2222      	movs	r2, #34	; 0x22
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003774:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0220 	orr.w	r2, r2, #32
 8003794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b095      	sub	sp, #84	; 0x54
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037cc:	643a      	str	r2, [r7, #64]	; 0x40
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3314      	adds	r3, #20
 80037e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b01      	cmp	r3, #1
 800381a:	d119      	bne.n	8003850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	60bb      	str	r3, [r7, #8]
   return(result);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f023 0310 	bic.w	r3, r3, #16
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800383c:	61ba      	str	r2, [r7, #24]
 800383e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6979      	ldr	r1, [r7, #20]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	613b      	str	r3, [r7, #16]
   return(result);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e5      	bne.n	800381c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800385e:	bf00      	nop
 8003860:	3754      	adds	r7, #84	; 0x54
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fec5 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff feb7 	bl	8003628 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b21      	cmp	r3, #33	; 0x21
 80038d4:	d13e      	bne.n	8003954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d114      	bne.n	800390a <UART_Transmit_IT+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d110      	bne.n	800390a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]
 8003908:	e008      	b.n	800391c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6211      	str	r1, [r2, #32]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4619      	mov	r1, r3
 800392a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fe3c 	bl	8003600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b08c      	sub	sp, #48	; 0x30
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	f040 80ab 	bne.w	8003afe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d117      	bne.n	80039e2 <UART_Receive_IT+0x50>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d113      	bne.n	80039e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e026      	b.n	8003a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f4:	d007      	beq.n	8003a06 <UART_Receive_IT+0x74>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <UART_Receive_IT+0x82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e008      	b.n	8003a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d15a      	bne.n	8003afa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0220 	bic.w	r2, r2, #32
 8003a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d135      	bne.n	8003af0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f023 0310 	bic.w	r3, r3, #16
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	623a      	str	r2, [r7, #32]
 8003aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69f9      	ldr	r1, [r7, #28]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d10a      	bne.n	8003ae2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fda7 	bl	800363c <HAL_UARTEx_RxEventCallback>
 8003aee:	e002      	b.n	8003af6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fc fd71 	bl	80005d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e002      	b.n	8003b00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3730      	adds	r7, #48	; 0x30
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	b09f      	sub	sp, #124	; 0x7c
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1e:	68d9      	ldr	r1, [r3, #12]
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	ea40 0301 	orr.w	r3, r0, r1
 8003b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b4c:	f021 010c 	bic.w	r1, r1, #12
 8003b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b56:	430b      	orrs	r3, r1
 8003b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	6999      	ldr	r1, [r3, #24]
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	ea40 0301 	orr.w	r3, r0, r1
 8003b70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4bc5      	ldr	r3, [pc, #788]	; (8003e8c <UART_SetConfig+0x384>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d004      	beq.n	8003b86 <UART_SetConfig+0x7e>
 8003b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4bc3      	ldr	r3, [pc, #780]	; (8003e90 <UART_SetConfig+0x388>)
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d103      	bne.n	8003b8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b86:	f7fe fbe5 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003b8a:	6778      	str	r0, [r7, #116]	; 0x74
 8003b8c:	e002      	b.n	8003b94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b8e:	f7fe fbcd 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003b92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	f040 80b6 	bne.w	8003d0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba2:	461c      	mov	r4, r3
 8003ba4:	f04f 0500 	mov.w	r5, #0
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	6439      	str	r1, [r7, #64]	; 0x40
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bb8:	1912      	adds	r2, r2, r4
 8003bba:	eb45 0303 	adc.w	r3, r5, r3
 8003bbe:	f04f 0000 	mov.w	r0, #0
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	00d9      	lsls	r1, r3, #3
 8003bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bcc:	00d0      	lsls	r0, r2, #3
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	1911      	adds	r1, r2, r4
 8003bd4:	6639      	str	r1, [r7, #96]	; 0x60
 8003bd6:	416b      	adcs	r3, r5
 8003bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	1891      	adds	r1, r2, r2
 8003be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003be8:	415b      	adcs	r3, r3
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003bf4:	f7fc fb74 	bl	80002e0 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4ba5      	ldr	r3, [pc, #660]	; (8003e94 <UART_SetConfig+0x38c>)
 8003bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	011e      	lsls	r6, r3, #4
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	461c      	mov	r4, r3
 8003c0a:	f04f 0500 	mov.w	r5, #0
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	1891      	adds	r1, r2, r2
 8003c14:	6339      	str	r1, [r7, #48]	; 0x30
 8003c16:	415b      	adcs	r3, r3
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c1e:	1912      	adds	r2, r2, r4
 8003c20:	eb45 0303 	adc.w	r3, r5, r3
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	00d9      	lsls	r1, r3, #3
 8003c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c32:	00d0      	lsls	r0, r2, #3
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	1911      	adds	r1, r2, r4
 8003c3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c3c:	416b      	adcs	r3, r5
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	461a      	mov	r2, r3
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	1891      	adds	r1, r2, r2
 8003c4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c4e:	415b      	adcs	r3, r3
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c5a:	f7fc fb41 	bl	80002e0 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <UART_SetConfig+0x38c>)
 8003c64:	fba3 1302 	umull	r1, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2164      	movs	r1, #100	; 0x64
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a87      	ldr	r2, [pc, #540]	; (8003e94 <UART_SetConfig+0x38c>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c84:	441e      	add	r6, r3
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	1894      	adds	r4, r2, r2
 8003c94:	623c      	str	r4, [r7, #32]
 8003c96:	415b      	adcs	r3, r3
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c9e:	1812      	adds	r2, r2, r0
 8003ca0:	eb41 0303 	adc.w	r3, r1, r3
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	f04f 0500 	mov.w	r5, #0
 8003cac:	00dd      	lsls	r5, r3, #3
 8003cae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cb2:	00d4      	lsls	r4, r2, #3
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	462b      	mov	r3, r5
 8003cb8:	1814      	adds	r4, r2, r0
 8003cba:	653c      	str	r4, [r7, #80]	; 0x50
 8003cbc:	414b      	adcs	r3, r1
 8003cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	1891      	adds	r1, r2, r2
 8003ccc:	61b9      	str	r1, [r7, #24]
 8003cce:	415b      	adcs	r3, r3
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cda:	f7fc fb01 	bl	80002e0 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <UART_SetConfig+0x38c>)
 8003ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2164      	movs	r1, #100	; 0x64
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	3332      	adds	r3, #50	; 0x32
 8003cf6:	4a67      	ldr	r2, [pc, #412]	; (8003e94 <UART_SetConfig+0x38c>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4432      	add	r2, r6
 8003d08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d0a:	e0b9      	b.n	8003e80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0e:	461c      	mov	r4, r3
 8003d10:	f04f 0500 	mov.w	r5, #0
 8003d14:	4622      	mov	r2, r4
 8003d16:	462b      	mov	r3, r5
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	6139      	str	r1, [r7, #16]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d24:	1912      	adds	r2, r2, r4
 8003d26:	eb45 0303 	adc.w	r3, r5, r3
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	00d9      	lsls	r1, r3, #3
 8003d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d38:	00d0      	lsls	r0, r2, #3
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	eb12 0804 	adds.w	r8, r2, r4
 8003d42:	eb43 0905 	adc.w	r9, r3, r5
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	008b      	lsls	r3, r1, #2
 8003d5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d5e:	0082      	lsls	r2, r0, #2
 8003d60:	4640      	mov	r0, r8
 8003d62:	4649      	mov	r1, r9
 8003d64:	f7fc fabc 	bl	80002e0 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <UART_SetConfig+0x38c>)
 8003d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	011e      	lsls	r6, r3, #4
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	1894      	adds	r4, r2, r2
 8003d84:	60bc      	str	r4, [r7, #8]
 8003d86:	415b      	adcs	r3, r3
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d8e:	1812      	adds	r2, r2, r0
 8003d90:	eb41 0303 	adc.w	r3, r1, r3
 8003d94:	f04f 0400 	mov.w	r4, #0
 8003d98:	f04f 0500 	mov.w	r5, #0
 8003d9c:	00dd      	lsls	r5, r3, #3
 8003d9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da2:	00d4      	lsls	r4, r2, #3
 8003da4:	4622      	mov	r2, r4
 8003da6:	462b      	mov	r3, r5
 8003da8:	1814      	adds	r4, r2, r0
 8003daa:	64bc      	str	r4, [r7, #72]	; 0x48
 8003dac:	414b      	adcs	r3, r1
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	008b      	lsls	r3, r1, #2
 8003dc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dc8:	0082      	lsls	r2, r0, #2
 8003dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dce:	f7fc fa87 	bl	80002e0 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <UART_SetConfig+0x38c>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <UART_SetConfig+0x38c>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df6:	441e      	add	r6, r3
 8003df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	1894      	adds	r4, r2, r2
 8003e06:	603c      	str	r4, [r7, #0]
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e10:	1812      	adds	r2, r2, r0
 8003e12:	eb41 0303 	adc.w	r3, r1, r3
 8003e16:	f04f 0400 	mov.w	r4, #0
 8003e1a:	f04f 0500 	mov.w	r5, #0
 8003e1e:	00dd      	lsls	r5, r3, #3
 8003e20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e24:	00d4      	lsls	r4, r2, #3
 8003e26:	4622      	mov	r2, r4
 8003e28:	462b      	mov	r3, r5
 8003e2a:	eb12 0a00 	adds.w	sl, r2, r0
 8003e2e:	eb43 0b01 	adc.w	fp, r3, r1
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	008b      	lsls	r3, r1, #2
 8003e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e4a:	0082      	lsls	r2, r0, #2
 8003e4c:	4650      	mov	r0, sl
 8003e4e:	4659      	mov	r1, fp
 8003e50:	f7fc fa46 	bl	80002e0 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <UART_SetConfig+0x38c>)
 8003e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2164      	movs	r1, #100	; 0x64
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	3332      	adds	r3, #50	; 0x32
 8003e6c:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <UART_SetConfig+0x38c>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4432      	add	r2, r6
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	377c      	adds	r7, #124	; 0x7c
 8003e84:	46bd      	mov	sp, r7
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40011000 	.word	0x40011000
 8003e90:	40011400 	.word	0x40011400
 8003e94:	51eb851f 	.word	0x51eb851f

08003e98 <__errno>:
 8003e98:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <__errno+0x8>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000018 	.word	0x20000018

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	4d0d      	ldr	r5, [pc, #52]	; (8003edc <__libc_init_array+0x38>)
 8003ea8:	4c0d      	ldr	r4, [pc, #52]	; (8003ee0 <__libc_init_array+0x3c>)
 8003eaa:	1b64      	subs	r4, r4, r5
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	2600      	movs	r6, #0
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ee4 <__libc_init_array+0x40>)
 8003eb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ee8 <__libc_init_array+0x44>)
 8003eb8:	f001 f936 	bl	8005128 <_init>
 8003ebc:	1b64      	subs	r4, r4, r5
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	0800553c 	.word	0x0800553c
 8003ee0:	0800553c 	.word	0x0800553c
 8003ee4:	0800553c 	.word	0x0800553c
 8003ee8:	08005540 	.word	0x08005540

08003eec <memcpy>:
 8003eec:	440a      	add	r2, r1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ef4:	d100      	bne.n	8003ef8 <memcpy+0xc>
 8003ef6:	4770      	bx	lr
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f02:	4291      	cmp	r1, r2
 8003f04:	d1f9      	bne.n	8003efa <memcpy+0xe>
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <siprintf>:
 8003f18:	b40e      	push	{r1, r2, r3}
 8003f1a:	b500      	push	{lr}
 8003f1c:	b09c      	sub	sp, #112	; 0x70
 8003f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f20:	9002      	str	r0, [sp, #8]
 8003f22:	9006      	str	r0, [sp, #24]
 8003f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f28:	4809      	ldr	r0, [pc, #36]	; (8003f50 <siprintf+0x38>)
 8003f2a:	9107      	str	r1, [sp, #28]
 8003f2c:	9104      	str	r1, [sp, #16]
 8003f2e:	4909      	ldr	r1, [pc, #36]	; (8003f54 <siprintf+0x3c>)
 8003f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f34:	9105      	str	r1, [sp, #20]
 8003f36:	6800      	ldr	r0, [r0, #0]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	a902      	add	r1, sp, #8
 8003f3c:	f000 f8ba 	bl	80040b4 <_svfiprintf_r>
 8003f40:	9b02      	ldr	r3, [sp, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	b01c      	add	sp, #112	; 0x70
 8003f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f4c:	b003      	add	sp, #12
 8003f4e:	4770      	bx	lr
 8003f50:	20000018 	.word	0x20000018
 8003f54:	ffff0208 	.word	0xffff0208

08003f58 <siscanf>:
 8003f58:	b40e      	push	{r1, r2, r3}
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	b09f      	sub	sp, #124	; 0x7c
 8003f5e:	ac21      	add	r4, sp, #132	; 0x84
 8003f60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003f64:	f854 2b04 	ldr.w	r2, [r4], #4
 8003f68:	9201      	str	r2, [sp, #4]
 8003f6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003f6e:	9004      	str	r0, [sp, #16]
 8003f70:	9008      	str	r0, [sp, #32]
 8003f72:	f7fc f957 	bl	8000224 <strlen>
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <siscanf+0x50>)
 8003f78:	9005      	str	r0, [sp, #20]
 8003f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8003f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8003f7e:	480b      	ldr	r0, [pc, #44]	; (8003fac <siscanf+0x54>)
 8003f80:	9a01      	ldr	r2, [sp, #4]
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	9403      	str	r4, [sp, #12]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9311      	str	r3, [sp, #68]	; 0x44
 8003f8a:	9316      	str	r3, [sp, #88]	; 0x58
 8003f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003f94:	a904      	add	r1, sp, #16
 8003f96:	4623      	mov	r3, r4
 8003f98:	f000 f9e6 	bl	8004368 <__ssvfiscanf_r>
 8003f9c:	b01f      	add	sp, #124	; 0x7c
 8003f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa2:	b003      	add	sp, #12
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	08003fb1 	.word	0x08003fb1
 8003fac:	20000018 	.word	0x20000018

08003fb0 <__seofread>:
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	4770      	bx	lr

08003fb4 <strchr>:
 8003fb4:	b2c9      	uxtb	r1, r1
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fbc:	b11a      	cbz	r2, 8003fc6 <strchr+0x12>
 8003fbe:	428a      	cmp	r2, r1
 8003fc0:	d1f9      	bne.n	8003fb6 <strchr+0x2>
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	4770      	bx	lr
 8003fc6:	2900      	cmp	r1, #0
 8003fc8:	bf18      	it	ne
 8003fca:	2300      	movne	r3, #0
 8003fcc:	e7f9      	b.n	8003fc2 <strchr+0xe>

08003fce <strstr>:
 8003fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd0:	780c      	ldrb	r4, [r1, #0]
 8003fd2:	b164      	cbz	r4, 8003fee <strstr+0x20>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	1c5e      	adds	r6, r3, #1
 8003fdc:	b90a      	cbnz	r2, 8003fe2 <strstr+0x14>
 8003fde:	4610      	mov	r0, r2
 8003fe0:	e005      	b.n	8003fee <strstr+0x20>
 8003fe2:	4294      	cmp	r4, r2
 8003fe4:	d108      	bne.n	8003ff8 <strstr+0x2a>
 8003fe6:	460d      	mov	r5, r1
 8003fe8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003fec:	b902      	cbnz	r2, 8003ff0 <strstr+0x22>
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003ff4:	4297      	cmp	r7, r2
 8003ff6:	d0f7      	beq.n	8003fe8 <strstr+0x1a>
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	e7ec      	b.n	8003fd6 <strstr+0x8>

08003ffc <__ssputs_r>:
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	688e      	ldr	r6, [r1, #8]
 8004002:	429e      	cmp	r6, r3
 8004004:	4682      	mov	sl, r0
 8004006:	460c      	mov	r4, r1
 8004008:	4690      	mov	r8, r2
 800400a:	461f      	mov	r7, r3
 800400c:	d838      	bhi.n	8004080 <__ssputs_r+0x84>
 800400e:	898a      	ldrh	r2, [r1, #12]
 8004010:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004014:	d032      	beq.n	800407c <__ssputs_r+0x80>
 8004016:	6825      	ldr	r5, [r4, #0]
 8004018:	6909      	ldr	r1, [r1, #16]
 800401a:	eba5 0901 	sub.w	r9, r5, r1
 800401e:	6965      	ldr	r5, [r4, #20]
 8004020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004028:	3301      	adds	r3, #1
 800402a:	444b      	add	r3, r9
 800402c:	106d      	asrs	r5, r5, #1
 800402e:	429d      	cmp	r5, r3
 8004030:	bf38      	it	cc
 8004032:	461d      	movcc	r5, r3
 8004034:	0553      	lsls	r3, r2, #21
 8004036:	d531      	bpl.n	800409c <__ssputs_r+0xa0>
 8004038:	4629      	mov	r1, r5
 800403a:	f000 ffd1 	bl	8004fe0 <_malloc_r>
 800403e:	4606      	mov	r6, r0
 8004040:	b950      	cbnz	r0, 8004058 <__ssputs_r+0x5c>
 8004042:	230c      	movs	r3, #12
 8004044:	f8ca 3000 	str.w	r3, [sl]
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004058:	6921      	ldr	r1, [r4, #16]
 800405a:	464a      	mov	r2, r9
 800405c:	f7ff ff46 	bl	8003eec <memcpy>
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406a:	81a3      	strh	r3, [r4, #12]
 800406c:	6126      	str	r6, [r4, #16]
 800406e:	6165      	str	r5, [r4, #20]
 8004070:	444e      	add	r6, r9
 8004072:	eba5 0509 	sub.w	r5, r5, r9
 8004076:	6026      	str	r6, [r4, #0]
 8004078:	60a5      	str	r5, [r4, #8]
 800407a:	463e      	mov	r6, r7
 800407c:	42be      	cmp	r6, r7
 800407e:	d900      	bls.n	8004082 <__ssputs_r+0x86>
 8004080:	463e      	mov	r6, r7
 8004082:	4632      	mov	r2, r6
 8004084:	6820      	ldr	r0, [r4, #0]
 8004086:	4641      	mov	r1, r8
 8004088:	f000 ff40 	bl	8004f0c <memmove>
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	1b9b      	subs	r3, r3, r6
 8004092:	4432      	add	r2, r6
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	6022      	str	r2, [r4, #0]
 8004098:	2000      	movs	r0, #0
 800409a:	e7db      	b.n	8004054 <__ssputs_r+0x58>
 800409c:	462a      	mov	r2, r5
 800409e:	f000 fff9 	bl	8005094 <_realloc_r>
 80040a2:	4606      	mov	r6, r0
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d1e1      	bne.n	800406c <__ssputs_r+0x70>
 80040a8:	6921      	ldr	r1, [r4, #16]
 80040aa:	4650      	mov	r0, sl
 80040ac:	f000 ff48 	bl	8004f40 <_free_r>
 80040b0:	e7c7      	b.n	8004042 <__ssputs_r+0x46>
	...

080040b4 <_svfiprintf_r>:
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	4698      	mov	r8, r3
 80040ba:	898b      	ldrh	r3, [r1, #12]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	b09d      	sub	sp, #116	; 0x74
 80040c0:	4607      	mov	r7, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	4614      	mov	r4, r2
 80040c6:	d50e      	bpl.n	80040e6 <_svfiprintf_r+0x32>
 80040c8:	690b      	ldr	r3, [r1, #16]
 80040ca:	b963      	cbnz	r3, 80040e6 <_svfiprintf_r+0x32>
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	f000 ff87 	bl	8004fe0 <_malloc_r>
 80040d2:	6028      	str	r0, [r5, #0]
 80040d4:	6128      	str	r0, [r5, #16]
 80040d6:	b920      	cbnz	r0, 80040e2 <_svfiprintf_r+0x2e>
 80040d8:	230c      	movs	r3, #12
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	e0d1      	b.n	8004286 <_svfiprintf_r+0x1d2>
 80040e2:	2340      	movs	r3, #64	; 0x40
 80040e4:	616b      	str	r3, [r5, #20]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ea:	2320      	movs	r3, #32
 80040ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f4:	2330      	movs	r3, #48	; 0x30
 80040f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042a0 <_svfiprintf_r+0x1ec>
 80040fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040fe:	f04f 0901 	mov.w	r9, #1
 8004102:	4623      	mov	r3, r4
 8004104:	469a      	mov	sl, r3
 8004106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800410a:	b10a      	cbz	r2, 8004110 <_svfiprintf_r+0x5c>
 800410c:	2a25      	cmp	r2, #37	; 0x25
 800410e:	d1f9      	bne.n	8004104 <_svfiprintf_r+0x50>
 8004110:	ebba 0b04 	subs.w	fp, sl, r4
 8004114:	d00b      	beq.n	800412e <_svfiprintf_r+0x7a>
 8004116:	465b      	mov	r3, fp
 8004118:	4622      	mov	r2, r4
 800411a:	4629      	mov	r1, r5
 800411c:	4638      	mov	r0, r7
 800411e:	f7ff ff6d 	bl	8003ffc <__ssputs_r>
 8004122:	3001      	adds	r0, #1
 8004124:	f000 80aa 	beq.w	800427c <_svfiprintf_r+0x1c8>
 8004128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800412a:	445a      	add	r2, fp
 800412c:	9209      	str	r2, [sp, #36]	; 0x24
 800412e:	f89a 3000 	ldrb.w	r3, [sl]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80a2 	beq.w	800427c <_svfiprintf_r+0x1c8>
 8004138:	2300      	movs	r3, #0
 800413a:	f04f 32ff 	mov.w	r2, #4294967295
 800413e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004142:	f10a 0a01 	add.w	sl, sl, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	9307      	str	r3, [sp, #28]
 800414a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800414e:	931a      	str	r3, [sp, #104]	; 0x68
 8004150:	4654      	mov	r4, sl
 8004152:	2205      	movs	r2, #5
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	4851      	ldr	r0, [pc, #324]	; (80042a0 <_svfiprintf_r+0x1ec>)
 800415a:	f7fc f871 	bl	8000240 <memchr>
 800415e:	9a04      	ldr	r2, [sp, #16]
 8004160:	b9d8      	cbnz	r0, 800419a <_svfiprintf_r+0xe6>
 8004162:	06d0      	lsls	r0, r2, #27
 8004164:	bf44      	itt	mi
 8004166:	2320      	movmi	r3, #32
 8004168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416c:	0711      	lsls	r1, r2, #28
 800416e:	bf44      	itt	mi
 8004170:	232b      	movmi	r3, #43	; 0x2b
 8004172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004176:	f89a 3000 	ldrb.w	r3, [sl]
 800417a:	2b2a      	cmp	r3, #42	; 0x2a
 800417c:	d015      	beq.n	80041aa <_svfiprintf_r+0xf6>
 800417e:	9a07      	ldr	r2, [sp, #28]
 8004180:	4654      	mov	r4, sl
 8004182:	2000      	movs	r0, #0
 8004184:	f04f 0c0a 	mov.w	ip, #10
 8004188:	4621      	mov	r1, r4
 800418a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418e:	3b30      	subs	r3, #48	; 0x30
 8004190:	2b09      	cmp	r3, #9
 8004192:	d94e      	bls.n	8004232 <_svfiprintf_r+0x17e>
 8004194:	b1b0      	cbz	r0, 80041c4 <_svfiprintf_r+0x110>
 8004196:	9207      	str	r2, [sp, #28]
 8004198:	e014      	b.n	80041c4 <_svfiprintf_r+0x110>
 800419a:	eba0 0308 	sub.w	r3, r0, r8
 800419e:	fa09 f303 	lsl.w	r3, r9, r3
 80041a2:	4313      	orrs	r3, r2
 80041a4:	9304      	str	r3, [sp, #16]
 80041a6:	46a2      	mov	sl, r4
 80041a8:	e7d2      	b.n	8004150 <_svfiprintf_r+0x9c>
 80041aa:	9b03      	ldr	r3, [sp, #12]
 80041ac:	1d19      	adds	r1, r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	9103      	str	r1, [sp, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfbb      	ittet	lt
 80041b6:	425b      	neglt	r3, r3
 80041b8:	f042 0202 	orrlt.w	r2, r2, #2
 80041bc:	9307      	strge	r3, [sp, #28]
 80041be:	9307      	strlt	r3, [sp, #28]
 80041c0:	bfb8      	it	lt
 80041c2:	9204      	strlt	r2, [sp, #16]
 80041c4:	7823      	ldrb	r3, [r4, #0]
 80041c6:	2b2e      	cmp	r3, #46	; 0x2e
 80041c8:	d10c      	bne.n	80041e4 <_svfiprintf_r+0x130>
 80041ca:	7863      	ldrb	r3, [r4, #1]
 80041cc:	2b2a      	cmp	r3, #42	; 0x2a
 80041ce:	d135      	bne.n	800423c <_svfiprintf_r+0x188>
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	1d1a      	adds	r2, r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	9203      	str	r2, [sp, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bfb8      	it	lt
 80041dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80041e0:	3402      	adds	r4, #2
 80041e2:	9305      	str	r3, [sp, #20]
 80041e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042b0 <_svfiprintf_r+0x1fc>
 80041e8:	7821      	ldrb	r1, [r4, #0]
 80041ea:	2203      	movs	r2, #3
 80041ec:	4650      	mov	r0, sl
 80041ee:	f7fc f827 	bl	8000240 <memchr>
 80041f2:	b140      	cbz	r0, 8004206 <_svfiprintf_r+0x152>
 80041f4:	2340      	movs	r3, #64	; 0x40
 80041f6:	eba0 000a 	sub.w	r0, r0, sl
 80041fa:	fa03 f000 	lsl.w	r0, r3, r0
 80041fe:	9b04      	ldr	r3, [sp, #16]
 8004200:	4303      	orrs	r3, r0
 8004202:	3401      	adds	r4, #1
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420a:	4826      	ldr	r0, [pc, #152]	; (80042a4 <_svfiprintf_r+0x1f0>)
 800420c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004210:	2206      	movs	r2, #6
 8004212:	f7fc f815 	bl	8000240 <memchr>
 8004216:	2800      	cmp	r0, #0
 8004218:	d038      	beq.n	800428c <_svfiprintf_r+0x1d8>
 800421a:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <_svfiprintf_r+0x1f4>)
 800421c:	bb1b      	cbnz	r3, 8004266 <_svfiprintf_r+0x1b2>
 800421e:	9b03      	ldr	r3, [sp, #12]
 8004220:	3307      	adds	r3, #7
 8004222:	f023 0307 	bic.w	r3, r3, #7
 8004226:	3308      	adds	r3, #8
 8004228:	9303      	str	r3, [sp, #12]
 800422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422c:	4433      	add	r3, r6
 800422e:	9309      	str	r3, [sp, #36]	; 0x24
 8004230:	e767      	b.n	8004102 <_svfiprintf_r+0x4e>
 8004232:	fb0c 3202 	mla	r2, ip, r2, r3
 8004236:	460c      	mov	r4, r1
 8004238:	2001      	movs	r0, #1
 800423a:	e7a5      	b.n	8004188 <_svfiprintf_r+0xd4>
 800423c:	2300      	movs	r3, #0
 800423e:	3401      	adds	r4, #1
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	4619      	mov	r1, r3
 8004244:	f04f 0c0a 	mov.w	ip, #10
 8004248:	4620      	mov	r0, r4
 800424a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424e:	3a30      	subs	r2, #48	; 0x30
 8004250:	2a09      	cmp	r2, #9
 8004252:	d903      	bls.n	800425c <_svfiprintf_r+0x1a8>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0c5      	beq.n	80041e4 <_svfiprintf_r+0x130>
 8004258:	9105      	str	r1, [sp, #20]
 800425a:	e7c3      	b.n	80041e4 <_svfiprintf_r+0x130>
 800425c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004260:	4604      	mov	r4, r0
 8004262:	2301      	movs	r3, #1
 8004264:	e7f0      	b.n	8004248 <_svfiprintf_r+0x194>
 8004266:	ab03      	add	r3, sp, #12
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	462a      	mov	r2, r5
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <_svfiprintf_r+0x1f8>)
 800426e:	a904      	add	r1, sp, #16
 8004270:	4638      	mov	r0, r7
 8004272:	f3af 8000 	nop.w
 8004276:	1c42      	adds	r2, r0, #1
 8004278:	4606      	mov	r6, r0
 800427a:	d1d6      	bne.n	800422a <_svfiprintf_r+0x176>
 800427c:	89ab      	ldrh	r3, [r5, #12]
 800427e:	065b      	lsls	r3, r3, #25
 8004280:	f53f af2c 	bmi.w	80040dc <_svfiprintf_r+0x28>
 8004284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004286:	b01d      	add	sp, #116	; 0x74
 8004288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428c:	ab03      	add	r3, sp, #12
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	462a      	mov	r2, r5
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <_svfiprintf_r+0x1f8>)
 8004294:	a904      	add	r1, sp, #16
 8004296:	4638      	mov	r0, r7
 8004298:	f000 fa4c 	bl	8004734 <_printf_i>
 800429c:	e7eb      	b.n	8004276 <_svfiprintf_r+0x1c2>
 800429e:	bf00      	nop
 80042a0:	08005384 	.word	0x08005384
 80042a4:	0800538e 	.word	0x0800538e
 80042a8:	00000000 	.word	0x00000000
 80042ac:	08003ffd 	.word	0x08003ffd
 80042b0:	0800538a 	.word	0x0800538a

080042b4 <_sungetc_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	1c4b      	adds	r3, r1, #1
 80042b8:	4614      	mov	r4, r2
 80042ba:	d103      	bne.n	80042c4 <_sungetc_r+0x10>
 80042bc:	f04f 35ff 	mov.w	r5, #4294967295
 80042c0:	4628      	mov	r0, r5
 80042c2:	bd38      	pop	{r3, r4, r5, pc}
 80042c4:	8993      	ldrh	r3, [r2, #12]
 80042c6:	f023 0320 	bic.w	r3, r3, #32
 80042ca:	8193      	strh	r3, [r2, #12]
 80042cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042ce:	6852      	ldr	r2, [r2, #4]
 80042d0:	b2cd      	uxtb	r5, r1
 80042d2:	b18b      	cbz	r3, 80042f8 <_sungetc_r+0x44>
 80042d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042d6:	4293      	cmp	r3, r2
 80042d8:	dd08      	ble.n	80042ec <_sungetc_r+0x38>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	6022      	str	r2, [r4, #0]
 80042e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	e7e9      	b.n	80042c0 <_sungetc_r+0xc>
 80042ec:	4621      	mov	r1, r4
 80042ee:	f000 fdd1 	bl	8004e94 <__submore>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d0f1      	beq.n	80042da <_sungetc_r+0x26>
 80042f6:	e7e1      	b.n	80042bc <_sungetc_r+0x8>
 80042f8:	6921      	ldr	r1, [r4, #16]
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	b151      	cbz	r1, 8004314 <_sungetc_r+0x60>
 80042fe:	4299      	cmp	r1, r3
 8004300:	d208      	bcs.n	8004314 <_sungetc_r+0x60>
 8004302:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004306:	42a9      	cmp	r1, r5
 8004308:	d104      	bne.n	8004314 <_sungetc_r+0x60>
 800430a:	3b01      	subs	r3, #1
 800430c:	3201      	adds	r2, #1
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	6062      	str	r2, [r4, #4]
 8004312:	e7d5      	b.n	80042c0 <_sungetc_r+0xc>
 8004314:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800431c:	6363      	str	r3, [r4, #52]	; 0x34
 800431e:	2303      	movs	r3, #3
 8004320:	63a3      	str	r3, [r4, #56]	; 0x38
 8004322:	4623      	mov	r3, r4
 8004324:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	2301      	movs	r3, #1
 800432c:	e7dc      	b.n	80042e8 <_sungetc_r+0x34>

0800432e <__ssrefill_r>:
 800432e:	b510      	push	{r4, lr}
 8004330:	460c      	mov	r4, r1
 8004332:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004334:	b169      	cbz	r1, 8004352 <__ssrefill_r+0x24>
 8004336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800433a:	4299      	cmp	r1, r3
 800433c:	d001      	beq.n	8004342 <__ssrefill_r+0x14>
 800433e:	f000 fdff 	bl	8004f40 <_free_r>
 8004342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	2000      	movs	r0, #0
 8004348:	6360      	str	r0, [r4, #52]	; 0x34
 800434a:	b113      	cbz	r3, 8004352 <__ssrefill_r+0x24>
 800434c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	bd10      	pop	{r4, pc}
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	2300      	movs	r3, #0
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	f043 0320 	orr.w	r3, r3, #32
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	f04f 30ff 	mov.w	r0, #4294967295
 8004366:	e7f3      	b.n	8004350 <__ssrefill_r+0x22>

08004368 <__ssvfiscanf_r>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	460c      	mov	r4, r1
 800436e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004372:	2100      	movs	r1, #0
 8004374:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004378:	49b2      	ldr	r1, [pc, #712]	; (8004644 <__ssvfiscanf_r+0x2dc>)
 800437a:	91a0      	str	r1, [sp, #640]	; 0x280
 800437c:	f10d 0804 	add.w	r8, sp, #4
 8004380:	49b1      	ldr	r1, [pc, #708]	; (8004648 <__ssvfiscanf_r+0x2e0>)
 8004382:	4fb2      	ldr	r7, [pc, #712]	; (800464c <__ssvfiscanf_r+0x2e4>)
 8004384:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8004650 <__ssvfiscanf_r+0x2e8>
 8004388:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800438c:	4606      	mov	r6, r0
 800438e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	f892 a000 	ldrb.w	sl, [r2]
 8004396:	f1ba 0f00 	cmp.w	sl, #0
 800439a:	f000 8151 	beq.w	8004640 <__ssvfiscanf_r+0x2d8>
 800439e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80043a2:	f013 0308 	ands.w	r3, r3, #8
 80043a6:	f102 0501 	add.w	r5, r2, #1
 80043aa:	d019      	beq.n	80043e0 <__ssvfiscanf_r+0x78>
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	dd0f      	ble.n	80043d2 <__ssvfiscanf_r+0x6a>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	5cba      	ldrb	r2, [r7, r2]
 80043b8:	0712      	lsls	r2, r2, #28
 80043ba:	d401      	bmi.n	80043c0 <__ssvfiscanf_r+0x58>
 80043bc:	462a      	mov	r2, r5
 80043be:	e7e8      	b.n	8004392 <__ssvfiscanf_r+0x2a>
 80043c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80043c2:	3201      	adds	r2, #1
 80043c4:	9245      	str	r2, [sp, #276]	; 0x114
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	3301      	adds	r3, #1
 80043ca:	3a01      	subs	r2, #1
 80043cc:	6062      	str	r2, [r4, #4]
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	e7ec      	b.n	80043ac <__ssvfiscanf_r+0x44>
 80043d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80043d4:	4621      	mov	r1, r4
 80043d6:	4630      	mov	r0, r6
 80043d8:	4798      	blx	r3
 80043da:	2800      	cmp	r0, #0
 80043dc:	d0e9      	beq.n	80043b2 <__ssvfiscanf_r+0x4a>
 80043de:	e7ed      	b.n	80043bc <__ssvfiscanf_r+0x54>
 80043e0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80043e4:	f040 8083 	bne.w	80044ee <__ssvfiscanf_r+0x186>
 80043e8:	9341      	str	r3, [sp, #260]	; 0x104
 80043ea:	9343      	str	r3, [sp, #268]	; 0x10c
 80043ec:	7853      	ldrb	r3, [r2, #1]
 80043ee:	2b2a      	cmp	r3, #42	; 0x2a
 80043f0:	bf02      	ittt	eq
 80043f2:	2310      	moveq	r3, #16
 80043f4:	1c95      	addeq	r5, r2, #2
 80043f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80043f8:	220a      	movs	r2, #10
 80043fa:	46ab      	mov	fp, r5
 80043fc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004400:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004404:	2b09      	cmp	r3, #9
 8004406:	d91d      	bls.n	8004444 <__ssvfiscanf_r+0xdc>
 8004408:	4891      	ldr	r0, [pc, #580]	; (8004650 <__ssvfiscanf_r+0x2e8>)
 800440a:	2203      	movs	r2, #3
 800440c:	f7fb ff18 	bl	8000240 <memchr>
 8004410:	b140      	cbz	r0, 8004424 <__ssvfiscanf_r+0xbc>
 8004412:	2301      	movs	r3, #1
 8004414:	eba0 0009 	sub.w	r0, r0, r9
 8004418:	fa03 f000 	lsl.w	r0, r3, r0
 800441c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800441e:	4318      	orrs	r0, r3
 8004420:	9041      	str	r0, [sp, #260]	; 0x104
 8004422:	465d      	mov	r5, fp
 8004424:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004428:	2b78      	cmp	r3, #120	; 0x78
 800442a:	d806      	bhi.n	800443a <__ssvfiscanf_r+0xd2>
 800442c:	2b57      	cmp	r3, #87	; 0x57
 800442e:	d810      	bhi.n	8004452 <__ssvfiscanf_r+0xea>
 8004430:	2b25      	cmp	r3, #37	; 0x25
 8004432:	d05c      	beq.n	80044ee <__ssvfiscanf_r+0x186>
 8004434:	d856      	bhi.n	80044e4 <__ssvfiscanf_r+0x17c>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d074      	beq.n	8004524 <__ssvfiscanf_r+0x1bc>
 800443a:	2303      	movs	r3, #3
 800443c:	9347      	str	r3, [sp, #284]	; 0x11c
 800443e:	230a      	movs	r3, #10
 8004440:	9342      	str	r3, [sp, #264]	; 0x108
 8004442:	e081      	b.n	8004548 <__ssvfiscanf_r+0x1e0>
 8004444:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004446:	fb02 1303 	mla	r3, r2, r3, r1
 800444a:	3b30      	subs	r3, #48	; 0x30
 800444c:	9343      	str	r3, [sp, #268]	; 0x10c
 800444e:	465d      	mov	r5, fp
 8004450:	e7d3      	b.n	80043fa <__ssvfiscanf_r+0x92>
 8004452:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004456:	2a20      	cmp	r2, #32
 8004458:	d8ef      	bhi.n	800443a <__ssvfiscanf_r+0xd2>
 800445a:	a101      	add	r1, pc, #4	; (adr r1, 8004460 <__ssvfiscanf_r+0xf8>)
 800445c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004460:	08004533 	.word	0x08004533
 8004464:	0800443b 	.word	0x0800443b
 8004468:	0800443b 	.word	0x0800443b
 800446c:	08004591 	.word	0x08004591
 8004470:	0800443b 	.word	0x0800443b
 8004474:	0800443b 	.word	0x0800443b
 8004478:	0800443b 	.word	0x0800443b
 800447c:	0800443b 	.word	0x0800443b
 8004480:	0800443b 	.word	0x0800443b
 8004484:	0800443b 	.word	0x0800443b
 8004488:	0800443b 	.word	0x0800443b
 800448c:	080045a7 	.word	0x080045a7
 8004490:	0800457d 	.word	0x0800457d
 8004494:	080044eb 	.word	0x080044eb
 8004498:	080044eb 	.word	0x080044eb
 800449c:	080044eb 	.word	0x080044eb
 80044a0:	0800443b 	.word	0x0800443b
 80044a4:	08004581 	.word	0x08004581
 80044a8:	0800443b 	.word	0x0800443b
 80044ac:	0800443b 	.word	0x0800443b
 80044b0:	0800443b 	.word	0x0800443b
 80044b4:	0800443b 	.word	0x0800443b
 80044b8:	080045b7 	.word	0x080045b7
 80044bc:	08004589 	.word	0x08004589
 80044c0:	0800452b 	.word	0x0800452b
 80044c4:	0800443b 	.word	0x0800443b
 80044c8:	0800443b 	.word	0x0800443b
 80044cc:	080045b3 	.word	0x080045b3
 80044d0:	0800443b 	.word	0x0800443b
 80044d4:	0800457d 	.word	0x0800457d
 80044d8:	0800443b 	.word	0x0800443b
 80044dc:	0800443b 	.word	0x0800443b
 80044e0:	08004533 	.word	0x08004533
 80044e4:	3b45      	subs	r3, #69	; 0x45
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d8a7      	bhi.n	800443a <__ssvfiscanf_r+0xd2>
 80044ea:	2305      	movs	r3, #5
 80044ec:	e02b      	b.n	8004546 <__ssvfiscanf_r+0x1de>
 80044ee:	6863      	ldr	r3, [r4, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	dd0d      	ble.n	8004510 <__ssvfiscanf_r+0x1a8>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	4552      	cmp	r2, sl
 80044fa:	f040 80a1 	bne.w	8004640 <__ssvfiscanf_r+0x2d8>
 80044fe:	3301      	adds	r3, #1
 8004500:	6862      	ldr	r2, [r4, #4]
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004506:	3a01      	subs	r2, #1
 8004508:	3301      	adds	r3, #1
 800450a:	6062      	str	r2, [r4, #4]
 800450c:	9345      	str	r3, [sp, #276]	; 0x114
 800450e:	e755      	b.n	80043bc <__ssvfiscanf_r+0x54>
 8004510:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004512:	4621      	mov	r1, r4
 8004514:	4630      	mov	r0, r6
 8004516:	4798      	blx	r3
 8004518:	2800      	cmp	r0, #0
 800451a:	d0eb      	beq.n	80044f4 <__ssvfiscanf_r+0x18c>
 800451c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800451e:	2800      	cmp	r0, #0
 8004520:	f040 8084 	bne.w	800462c <__ssvfiscanf_r+0x2c4>
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	e086      	b.n	8004638 <__ssvfiscanf_r+0x2d0>
 800452a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800452c:	f042 0220 	orr.w	r2, r2, #32
 8004530:	9241      	str	r2, [sp, #260]	; 0x104
 8004532:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	9241      	str	r2, [sp, #260]	; 0x104
 800453a:	2210      	movs	r2, #16
 800453c:	2b6f      	cmp	r3, #111	; 0x6f
 800453e:	9242      	str	r2, [sp, #264]	; 0x108
 8004540:	bf34      	ite	cc
 8004542:	2303      	movcc	r3, #3
 8004544:	2304      	movcs	r3, #4
 8004546:	9347      	str	r3, [sp, #284]	; 0x11c
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	dd41      	ble.n	80045d2 <__ssvfiscanf_r+0x26a>
 800454e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004550:	0659      	lsls	r1, r3, #25
 8004552:	d404      	bmi.n	800455e <__ssvfiscanf_r+0x1f6>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	5cba      	ldrb	r2, [r7, r2]
 800455a:	0712      	lsls	r2, r2, #28
 800455c:	d440      	bmi.n	80045e0 <__ssvfiscanf_r+0x278>
 800455e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004560:	2b02      	cmp	r3, #2
 8004562:	dc4f      	bgt.n	8004604 <__ssvfiscanf_r+0x29c>
 8004564:	466b      	mov	r3, sp
 8004566:	4622      	mov	r2, r4
 8004568:	a941      	add	r1, sp, #260	; 0x104
 800456a:	4630      	mov	r0, r6
 800456c:	f000 fa08 	bl	8004980 <_scanf_chars>
 8004570:	2801      	cmp	r0, #1
 8004572:	d065      	beq.n	8004640 <__ssvfiscanf_r+0x2d8>
 8004574:	2802      	cmp	r0, #2
 8004576:	f47f af21 	bne.w	80043bc <__ssvfiscanf_r+0x54>
 800457a:	e7cf      	b.n	800451c <__ssvfiscanf_r+0x1b4>
 800457c:	220a      	movs	r2, #10
 800457e:	e7dd      	b.n	800453c <__ssvfiscanf_r+0x1d4>
 8004580:	2300      	movs	r3, #0
 8004582:	9342      	str	r3, [sp, #264]	; 0x108
 8004584:	2303      	movs	r3, #3
 8004586:	e7de      	b.n	8004546 <__ssvfiscanf_r+0x1de>
 8004588:	2308      	movs	r3, #8
 800458a:	9342      	str	r3, [sp, #264]	; 0x108
 800458c:	2304      	movs	r3, #4
 800458e:	e7da      	b.n	8004546 <__ssvfiscanf_r+0x1de>
 8004590:	4629      	mov	r1, r5
 8004592:	4640      	mov	r0, r8
 8004594:	f000 fb40 	bl	8004c18 <__sccl>
 8004598:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800459a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459e:	9341      	str	r3, [sp, #260]	; 0x104
 80045a0:	4605      	mov	r5, r0
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7cf      	b.n	8004546 <__ssvfiscanf_r+0x1de>
 80045a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80045a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ac:	9341      	str	r3, [sp, #260]	; 0x104
 80045ae:	2300      	movs	r3, #0
 80045b0:	e7c9      	b.n	8004546 <__ssvfiscanf_r+0x1de>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e7c7      	b.n	8004546 <__ssvfiscanf_r+0x1de>
 80045b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80045b8:	06c3      	lsls	r3, r0, #27
 80045ba:	f53f aeff 	bmi.w	80043bc <__ssvfiscanf_r+0x54>
 80045be:	9b00      	ldr	r3, [sp, #0]
 80045c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045c2:	1d19      	adds	r1, r3, #4
 80045c4:	9100      	str	r1, [sp, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	07c0      	lsls	r0, r0, #31
 80045ca:	bf4c      	ite	mi
 80045cc:	801a      	strhmi	r2, [r3, #0]
 80045ce:	601a      	strpl	r2, [r3, #0]
 80045d0:	e6f4      	b.n	80043bc <__ssvfiscanf_r+0x54>
 80045d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80045d4:	4621      	mov	r1, r4
 80045d6:	4630      	mov	r0, r6
 80045d8:	4798      	blx	r3
 80045da:	2800      	cmp	r0, #0
 80045dc:	d0b7      	beq.n	800454e <__ssvfiscanf_r+0x1e6>
 80045de:	e79d      	b.n	800451c <__ssvfiscanf_r+0x1b4>
 80045e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80045e2:	3201      	adds	r2, #1
 80045e4:	9245      	str	r2, [sp, #276]	; 0x114
 80045e6:	6862      	ldr	r2, [r4, #4]
 80045e8:	3a01      	subs	r2, #1
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	6062      	str	r2, [r4, #4]
 80045ee:	dd02      	ble.n	80045f6 <__ssvfiscanf_r+0x28e>
 80045f0:	3301      	adds	r3, #1
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	e7ae      	b.n	8004554 <__ssvfiscanf_r+0x1ec>
 80045f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80045f8:	4621      	mov	r1, r4
 80045fa:	4630      	mov	r0, r6
 80045fc:	4798      	blx	r3
 80045fe:	2800      	cmp	r0, #0
 8004600:	d0a8      	beq.n	8004554 <__ssvfiscanf_r+0x1ec>
 8004602:	e78b      	b.n	800451c <__ssvfiscanf_r+0x1b4>
 8004604:	2b04      	cmp	r3, #4
 8004606:	dc06      	bgt.n	8004616 <__ssvfiscanf_r+0x2ae>
 8004608:	466b      	mov	r3, sp
 800460a:	4622      	mov	r2, r4
 800460c:	a941      	add	r1, sp, #260	; 0x104
 800460e:	4630      	mov	r0, r6
 8004610:	f000 fa0e 	bl	8004a30 <_scanf_i>
 8004614:	e7ac      	b.n	8004570 <__ssvfiscanf_r+0x208>
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <__ssvfiscanf_r+0x2ec>)
 8004618:	2b00      	cmp	r3, #0
 800461a:	f43f aecf 	beq.w	80043bc <__ssvfiscanf_r+0x54>
 800461e:	466b      	mov	r3, sp
 8004620:	4622      	mov	r2, r4
 8004622:	a941      	add	r1, sp, #260	; 0x104
 8004624:	4630      	mov	r0, r6
 8004626:	f3af 8000 	nop.w
 800462a:	e7a1      	b.n	8004570 <__ssvfiscanf_r+0x208>
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004632:	bf18      	it	ne
 8004634:	f04f 30ff 	movne.w	r0, #4294967295
 8004638:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004640:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004642:	e7f9      	b.n	8004638 <__ssvfiscanf_r+0x2d0>
 8004644:	080042b5 	.word	0x080042b5
 8004648:	0800432f 	.word	0x0800432f
 800464c:	080053d3 	.word	0x080053d3
 8004650:	0800538a 	.word	0x0800538a
 8004654:	00000000 	.word	0x00000000

08004658 <_printf_common>:
 8004658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800465c:	4616      	mov	r6, r2
 800465e:	4699      	mov	r9, r3
 8004660:	688a      	ldr	r2, [r1, #8]
 8004662:	690b      	ldr	r3, [r1, #16]
 8004664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004668:	4293      	cmp	r3, r2
 800466a:	bfb8      	it	lt
 800466c:	4613      	movlt	r3, r2
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004674:	4607      	mov	r7, r0
 8004676:	460c      	mov	r4, r1
 8004678:	b10a      	cbz	r2, 800467e <_printf_common+0x26>
 800467a:	3301      	adds	r3, #1
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	0699      	lsls	r1, r3, #26
 8004682:	bf42      	ittt	mi
 8004684:	6833      	ldrmi	r3, [r6, #0]
 8004686:	3302      	addmi	r3, #2
 8004688:	6033      	strmi	r3, [r6, #0]
 800468a:	6825      	ldr	r5, [r4, #0]
 800468c:	f015 0506 	ands.w	r5, r5, #6
 8004690:	d106      	bne.n	80046a0 <_printf_common+0x48>
 8004692:	f104 0a19 	add.w	sl, r4, #25
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	6832      	ldr	r2, [r6, #0]
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	42ab      	cmp	r3, r5
 800469e:	dc26      	bgt.n	80046ee <_printf_common+0x96>
 80046a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a4:	1e13      	subs	r3, r2, #0
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	bf18      	it	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	0692      	lsls	r2, r2, #26
 80046ae:	d42b      	bmi.n	8004708 <_printf_common+0xb0>
 80046b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b4:	4649      	mov	r1, r9
 80046b6:	4638      	mov	r0, r7
 80046b8:	47c0      	blx	r8
 80046ba:	3001      	adds	r0, #1
 80046bc:	d01e      	beq.n	80046fc <_printf_common+0xa4>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	68e5      	ldr	r5, [r4, #12]
 80046c2:	6832      	ldr	r2, [r6, #0]
 80046c4:	f003 0306 	and.w	r3, r3, #6
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	bf08      	it	eq
 80046cc:	1aad      	subeq	r5, r5, r2
 80046ce:	68a3      	ldr	r3, [r4, #8]
 80046d0:	6922      	ldr	r2, [r4, #16]
 80046d2:	bf0c      	ite	eq
 80046d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d8:	2500      	movne	r5, #0
 80046da:	4293      	cmp	r3, r2
 80046dc:	bfc4      	itt	gt
 80046de:	1a9b      	subgt	r3, r3, r2
 80046e0:	18ed      	addgt	r5, r5, r3
 80046e2:	2600      	movs	r6, #0
 80046e4:	341a      	adds	r4, #26
 80046e6:	42b5      	cmp	r5, r6
 80046e8:	d11a      	bne.n	8004720 <_printf_common+0xc8>
 80046ea:	2000      	movs	r0, #0
 80046ec:	e008      	b.n	8004700 <_printf_common+0xa8>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4652      	mov	r2, sl
 80046f2:	4649      	mov	r1, r9
 80046f4:	4638      	mov	r0, r7
 80046f6:	47c0      	blx	r8
 80046f8:	3001      	adds	r0, #1
 80046fa:	d103      	bne.n	8004704 <_printf_common+0xac>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004704:	3501      	adds	r5, #1
 8004706:	e7c6      	b.n	8004696 <_printf_common+0x3e>
 8004708:	18e1      	adds	r1, r4, r3
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	2030      	movs	r0, #48	; 0x30
 800470e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004712:	4422      	add	r2, r4
 8004714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800471c:	3302      	adds	r3, #2
 800471e:	e7c7      	b.n	80046b0 <_printf_common+0x58>
 8004720:	2301      	movs	r3, #1
 8004722:	4622      	mov	r2, r4
 8004724:	4649      	mov	r1, r9
 8004726:	4638      	mov	r0, r7
 8004728:	47c0      	blx	r8
 800472a:	3001      	adds	r0, #1
 800472c:	d0e6      	beq.n	80046fc <_printf_common+0xa4>
 800472e:	3601      	adds	r6, #1
 8004730:	e7d9      	b.n	80046e6 <_printf_common+0x8e>
	...

08004734 <_printf_i>:
 8004734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	460c      	mov	r4, r1
 800473a:	4691      	mov	r9, r2
 800473c:	7e27      	ldrb	r7, [r4, #24]
 800473e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004740:	2f78      	cmp	r7, #120	; 0x78
 8004742:	4680      	mov	r8, r0
 8004744:	469a      	mov	sl, r3
 8004746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474a:	d807      	bhi.n	800475c <_printf_i+0x28>
 800474c:	2f62      	cmp	r7, #98	; 0x62
 800474e:	d80a      	bhi.n	8004766 <_printf_i+0x32>
 8004750:	2f00      	cmp	r7, #0
 8004752:	f000 80d8 	beq.w	8004906 <_printf_i+0x1d2>
 8004756:	2f58      	cmp	r7, #88	; 0x58
 8004758:	f000 80a3 	beq.w	80048a2 <_printf_i+0x16e>
 800475c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004764:	e03a      	b.n	80047dc <_printf_i+0xa8>
 8004766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800476a:	2b15      	cmp	r3, #21
 800476c:	d8f6      	bhi.n	800475c <_printf_i+0x28>
 800476e:	a001      	add	r0, pc, #4	; (adr r0, 8004774 <_printf_i+0x40>)
 8004770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004774:	080047cd 	.word	0x080047cd
 8004778:	080047e1 	.word	0x080047e1
 800477c:	0800475d 	.word	0x0800475d
 8004780:	0800475d 	.word	0x0800475d
 8004784:	0800475d 	.word	0x0800475d
 8004788:	0800475d 	.word	0x0800475d
 800478c:	080047e1 	.word	0x080047e1
 8004790:	0800475d 	.word	0x0800475d
 8004794:	0800475d 	.word	0x0800475d
 8004798:	0800475d 	.word	0x0800475d
 800479c:	0800475d 	.word	0x0800475d
 80047a0:	080048ed 	.word	0x080048ed
 80047a4:	08004811 	.word	0x08004811
 80047a8:	080048cf 	.word	0x080048cf
 80047ac:	0800475d 	.word	0x0800475d
 80047b0:	0800475d 	.word	0x0800475d
 80047b4:	0800490f 	.word	0x0800490f
 80047b8:	0800475d 	.word	0x0800475d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800475d 	.word	0x0800475d
 80047c4:	0800475d 	.word	0x0800475d
 80047c8:	080048d7 	.word	0x080048d7
 80047cc:	680b      	ldr	r3, [r1, #0]
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	600a      	str	r2, [r1, #0]
 80047d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047dc:	2301      	movs	r3, #1
 80047de:	e0a3      	b.n	8004928 <_printf_i+0x1f4>
 80047e0:	6825      	ldr	r5, [r4, #0]
 80047e2:	6808      	ldr	r0, [r1, #0]
 80047e4:	062e      	lsls	r6, r5, #24
 80047e6:	f100 0304 	add.w	r3, r0, #4
 80047ea:	d50a      	bpl.n	8004802 <_printf_i+0xce>
 80047ec:	6805      	ldr	r5, [r0, #0]
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	da03      	bge.n	80047fc <_printf_i+0xc8>
 80047f4:	232d      	movs	r3, #45	; 0x2d
 80047f6:	426d      	negs	r5, r5
 80047f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fc:	485e      	ldr	r0, [pc, #376]	; (8004978 <_printf_i+0x244>)
 80047fe:	230a      	movs	r3, #10
 8004800:	e019      	b.n	8004836 <_printf_i+0x102>
 8004802:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004806:	6805      	ldr	r5, [r0, #0]
 8004808:	600b      	str	r3, [r1, #0]
 800480a:	bf18      	it	ne
 800480c:	b22d      	sxthne	r5, r5
 800480e:	e7ef      	b.n	80047f0 <_printf_i+0xbc>
 8004810:	680b      	ldr	r3, [r1, #0]
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	1d18      	adds	r0, r3, #4
 8004816:	6008      	str	r0, [r1, #0]
 8004818:	0628      	lsls	r0, r5, #24
 800481a:	d501      	bpl.n	8004820 <_printf_i+0xec>
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	e002      	b.n	8004826 <_printf_i+0xf2>
 8004820:	0669      	lsls	r1, r5, #25
 8004822:	d5fb      	bpl.n	800481c <_printf_i+0xe8>
 8004824:	881d      	ldrh	r5, [r3, #0]
 8004826:	4854      	ldr	r0, [pc, #336]	; (8004978 <_printf_i+0x244>)
 8004828:	2f6f      	cmp	r7, #111	; 0x6f
 800482a:	bf0c      	ite	eq
 800482c:	2308      	moveq	r3, #8
 800482e:	230a      	movne	r3, #10
 8004830:	2100      	movs	r1, #0
 8004832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004836:	6866      	ldr	r6, [r4, #4]
 8004838:	60a6      	str	r6, [r4, #8]
 800483a:	2e00      	cmp	r6, #0
 800483c:	bfa2      	ittt	ge
 800483e:	6821      	ldrge	r1, [r4, #0]
 8004840:	f021 0104 	bicge.w	r1, r1, #4
 8004844:	6021      	strge	r1, [r4, #0]
 8004846:	b90d      	cbnz	r5, 800484c <_printf_i+0x118>
 8004848:	2e00      	cmp	r6, #0
 800484a:	d04d      	beq.n	80048e8 <_printf_i+0x1b4>
 800484c:	4616      	mov	r6, r2
 800484e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004852:	fb03 5711 	mls	r7, r3, r1, r5
 8004856:	5dc7      	ldrb	r7, [r0, r7]
 8004858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800485c:	462f      	mov	r7, r5
 800485e:	42bb      	cmp	r3, r7
 8004860:	460d      	mov	r5, r1
 8004862:	d9f4      	bls.n	800484e <_printf_i+0x11a>
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10b      	bne.n	8004880 <_printf_i+0x14c>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	07df      	lsls	r7, r3, #31
 800486c:	d508      	bpl.n	8004880 <_printf_i+0x14c>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	6861      	ldr	r1, [r4, #4]
 8004872:	4299      	cmp	r1, r3
 8004874:	bfde      	ittt	le
 8004876:	2330      	movle	r3, #48	; 0x30
 8004878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800487c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004880:	1b92      	subs	r2, r2, r6
 8004882:	6122      	str	r2, [r4, #16]
 8004884:	f8cd a000 	str.w	sl, [sp]
 8004888:	464b      	mov	r3, r9
 800488a:	aa03      	add	r2, sp, #12
 800488c:	4621      	mov	r1, r4
 800488e:	4640      	mov	r0, r8
 8004890:	f7ff fee2 	bl	8004658 <_printf_common>
 8004894:	3001      	adds	r0, #1
 8004896:	d14c      	bne.n	8004932 <_printf_i+0x1fe>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b004      	add	sp, #16
 800489e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a2:	4835      	ldr	r0, [pc, #212]	; (8004978 <_printf_i+0x244>)
 80048a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	680e      	ldr	r6, [r1, #0]
 80048ac:	061f      	lsls	r7, r3, #24
 80048ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80048b2:	600e      	str	r6, [r1, #0]
 80048b4:	d514      	bpl.n	80048e0 <_printf_i+0x1ac>
 80048b6:	07d9      	lsls	r1, r3, #31
 80048b8:	bf44      	itt	mi
 80048ba:	f043 0320 	orrmi.w	r3, r3, #32
 80048be:	6023      	strmi	r3, [r4, #0]
 80048c0:	b91d      	cbnz	r5, 80048ca <_printf_i+0x196>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	f023 0320 	bic.w	r3, r3, #32
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	2310      	movs	r3, #16
 80048cc:	e7b0      	b.n	8004830 <_printf_i+0xfc>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f043 0320 	orr.w	r3, r3, #32
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	2378      	movs	r3, #120	; 0x78
 80048d8:	4828      	ldr	r0, [pc, #160]	; (800497c <_printf_i+0x248>)
 80048da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048de:	e7e3      	b.n	80048a8 <_printf_i+0x174>
 80048e0:	065e      	lsls	r6, r3, #25
 80048e2:	bf48      	it	mi
 80048e4:	b2ad      	uxthmi	r5, r5
 80048e6:	e7e6      	b.n	80048b6 <_printf_i+0x182>
 80048e8:	4616      	mov	r6, r2
 80048ea:	e7bb      	b.n	8004864 <_printf_i+0x130>
 80048ec:	680b      	ldr	r3, [r1, #0]
 80048ee:	6826      	ldr	r6, [r4, #0]
 80048f0:	6960      	ldr	r0, [r4, #20]
 80048f2:	1d1d      	adds	r5, r3, #4
 80048f4:	600d      	str	r5, [r1, #0]
 80048f6:	0635      	lsls	r5, r6, #24
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0x1cc>
 80048fc:	6018      	str	r0, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0x1d2>
 8004900:	0671      	lsls	r1, r6, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0x1c8>
 8004904:	8018      	strh	r0, [r3, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	4616      	mov	r6, r2
 800490c:	e7ba      	b.n	8004884 <_printf_i+0x150>
 800490e:	680b      	ldr	r3, [r1, #0]
 8004910:	1d1a      	adds	r2, r3, #4
 8004912:	600a      	str	r2, [r1, #0]
 8004914:	681e      	ldr	r6, [r3, #0]
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	2100      	movs	r1, #0
 800491a:	4630      	mov	r0, r6
 800491c:	f7fb fc90 	bl	8000240 <memchr>
 8004920:	b108      	cbz	r0, 8004926 <_printf_i+0x1f2>
 8004922:	1b80      	subs	r0, r0, r6
 8004924:	6060      	str	r0, [r4, #4]
 8004926:	6863      	ldr	r3, [r4, #4]
 8004928:	6123      	str	r3, [r4, #16]
 800492a:	2300      	movs	r3, #0
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004930:	e7a8      	b.n	8004884 <_printf_i+0x150>
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	4632      	mov	r2, r6
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	47d0      	blx	sl
 800493c:	3001      	adds	r0, #1
 800493e:	d0ab      	beq.n	8004898 <_printf_i+0x164>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	079b      	lsls	r3, r3, #30
 8004944:	d413      	bmi.n	800496e <_printf_i+0x23a>
 8004946:	68e0      	ldr	r0, [r4, #12]
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	4298      	cmp	r0, r3
 800494c:	bfb8      	it	lt
 800494e:	4618      	movlt	r0, r3
 8004950:	e7a4      	b.n	800489c <_printf_i+0x168>
 8004952:	2301      	movs	r3, #1
 8004954:	4632      	mov	r2, r6
 8004956:	4649      	mov	r1, r9
 8004958:	4640      	mov	r0, r8
 800495a:	47d0      	blx	sl
 800495c:	3001      	adds	r0, #1
 800495e:	d09b      	beq.n	8004898 <_printf_i+0x164>
 8004960:	3501      	adds	r5, #1
 8004962:	68e3      	ldr	r3, [r4, #12]
 8004964:	9903      	ldr	r1, [sp, #12]
 8004966:	1a5b      	subs	r3, r3, r1
 8004968:	42ab      	cmp	r3, r5
 800496a:	dcf2      	bgt.n	8004952 <_printf_i+0x21e>
 800496c:	e7eb      	b.n	8004946 <_printf_i+0x212>
 800496e:	2500      	movs	r5, #0
 8004970:	f104 0619 	add.w	r6, r4, #25
 8004974:	e7f5      	b.n	8004962 <_printf_i+0x22e>
 8004976:	bf00      	nop
 8004978:	08005395 	.word	0x08005395
 800497c:	080053a6 	.word	0x080053a6

08004980 <_scanf_chars>:
 8004980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004984:	4615      	mov	r5, r2
 8004986:	688a      	ldr	r2, [r1, #8]
 8004988:	4680      	mov	r8, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b932      	cbnz	r2, 800499c <_scanf_chars+0x1c>
 800498e:	698a      	ldr	r2, [r1, #24]
 8004990:	2a00      	cmp	r2, #0
 8004992:	bf0c      	ite	eq
 8004994:	2201      	moveq	r2, #1
 8004996:	f04f 32ff 	movne.w	r2, #4294967295
 800499a:	608a      	str	r2, [r1, #8]
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004a2c <_scanf_chars+0xac>
 80049a2:	06d1      	lsls	r1, r2, #27
 80049a4:	bf5f      	itttt	pl
 80049a6:	681a      	ldrpl	r2, [r3, #0]
 80049a8:	1d11      	addpl	r1, r2, #4
 80049aa:	6019      	strpl	r1, [r3, #0]
 80049ac:	6816      	ldrpl	r6, [r2, #0]
 80049ae:	2700      	movs	r7, #0
 80049b0:	69a0      	ldr	r0, [r4, #24]
 80049b2:	b188      	cbz	r0, 80049d8 <_scanf_chars+0x58>
 80049b4:	2801      	cmp	r0, #1
 80049b6:	d107      	bne.n	80049c8 <_scanf_chars+0x48>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	6963      	ldr	r3, [r4, #20]
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	b953      	cbnz	r3, 80049d8 <_scanf_chars+0x58>
 80049c2:	bb27      	cbnz	r7, 8004a0e <_scanf_chars+0x8e>
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	2802      	cmp	r0, #2
 80049ca:	d120      	bne.n	8004a0e <_scanf_chars+0x8e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	d41a      	bmi.n	8004a0e <_scanf_chars+0x8e>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	06da      	lsls	r2, r3, #27
 80049dc:	bf5e      	ittt	pl
 80049de:	682b      	ldrpl	r3, [r5, #0]
 80049e0:	781b      	ldrbpl	r3, [r3, #0]
 80049e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80049e6:	682a      	ldr	r2, [r5, #0]
 80049e8:	686b      	ldr	r3, [r5, #4]
 80049ea:	3201      	adds	r2, #1
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	68a2      	ldr	r2, [r4, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	3a01      	subs	r2, #1
 80049f4:	606b      	str	r3, [r5, #4]
 80049f6:	3701      	adds	r7, #1
 80049f8:	60a2      	str	r2, [r4, #8]
 80049fa:	b142      	cbz	r2, 8004a0e <_scanf_chars+0x8e>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dcd7      	bgt.n	80049b0 <_scanf_chars+0x30>
 8004a00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a04:	4629      	mov	r1, r5
 8004a06:	4640      	mov	r0, r8
 8004a08:	4798      	blx	r3
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d0d0      	beq.n	80049b0 <_scanf_chars+0x30>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f013 0310 	ands.w	r3, r3, #16
 8004a14:	d105      	bne.n	8004a22 <_scanf_chars+0xa2>
 8004a16:	68e2      	ldr	r2, [r4, #12]
 8004a18:	3201      	adds	r2, #1
 8004a1a:	60e2      	str	r2, [r4, #12]
 8004a1c:	69a2      	ldr	r2, [r4, #24]
 8004a1e:	b102      	cbz	r2, 8004a22 <_scanf_chars+0xa2>
 8004a20:	7033      	strb	r3, [r6, #0]
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	441f      	add	r7, r3
 8004a26:	6127      	str	r7, [r4, #16]
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e7cb      	b.n	80049c4 <_scanf_chars+0x44>
 8004a2c:	080053d3 	.word	0x080053d3

08004a30 <_scanf_i>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	4698      	mov	r8, r3
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <_scanf_i+0x1d8>)
 8004a38:	460c      	mov	r4, r1
 8004a3a:	4682      	mov	sl, r0
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a42:	b087      	sub	sp, #28
 8004a44:	ab03      	add	r3, sp, #12
 8004a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a4a:	4b70      	ldr	r3, [pc, #448]	; (8004c0c <_scanf_i+0x1dc>)
 8004a4c:	69a1      	ldr	r1, [r4, #24]
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <_scanf_i+0x1e0>)
 8004a50:	2903      	cmp	r1, #3
 8004a52:	bf18      	it	ne
 8004a54:	461a      	movne	r2, r3
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	9201      	str	r2, [sp, #4]
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a60:	bf88      	it	hi
 8004a62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a66:	4627      	mov	r7, r4
 8004a68:	bf82      	ittt	hi
 8004a6a:	eb03 0905 	addhi.w	r9, r3, r5
 8004a6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a72:	60a3      	strhi	r3, [r4, #8]
 8004a74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004a78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004a7c:	bf98      	it	ls
 8004a7e:	f04f 0900 	movls.w	r9, #0
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	463d      	mov	r5, r7
 8004a86:	f04f 0b00 	mov.w	fp, #0
 8004a8a:	6831      	ldr	r1, [r6, #0]
 8004a8c:	ab03      	add	r3, sp, #12
 8004a8e:	7809      	ldrb	r1, [r1, #0]
 8004a90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f7fb fbd3 	bl	8000240 <memchr>
 8004a9a:	b328      	cbz	r0, 8004ae8 <_scanf_i+0xb8>
 8004a9c:	f1bb 0f01 	cmp.w	fp, #1
 8004aa0:	d159      	bne.n	8004b56 <_scanf_i+0x126>
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	b92a      	cbnz	r2, 8004ab2 <_scanf_i+0x82>
 8004aa6:	6822      	ldr	r2, [r4, #0]
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	6022      	str	r2, [r4, #0]
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004ab8:	6022      	str	r2, [r4, #0]
 8004aba:	68a2      	ldr	r2, [r4, #8]
 8004abc:	1e51      	subs	r1, r2, #1
 8004abe:	60a1      	str	r1, [r4, #8]
 8004ac0:	b192      	cbz	r2, 8004ae8 <_scanf_i+0xb8>
 8004ac2:	6832      	ldr	r2, [r6, #0]
 8004ac4:	1c51      	adds	r1, r2, #1
 8004ac6:	6031      	str	r1, [r6, #0]
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	f805 2b01 	strb.w	r2, [r5], #1
 8004ace:	6872      	ldr	r2, [r6, #4]
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	6072      	str	r2, [r6, #4]
 8004ad6:	dc07      	bgt.n	8004ae8 <_scanf_i+0xb8>
 8004ad8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004adc:	4631      	mov	r1, r6
 8004ade:	4650      	mov	r0, sl
 8004ae0:	4790      	blx	r2
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	f040 8085 	bne.w	8004bf2 <_scanf_i+0x1c2>
 8004ae8:	f10b 0b01 	add.w	fp, fp, #1
 8004aec:	f1bb 0f03 	cmp.w	fp, #3
 8004af0:	d1cb      	bne.n	8004a8a <_scanf_i+0x5a>
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	b90b      	cbnz	r3, 8004afa <_scanf_i+0xca>
 8004af6:	230a      	movs	r3, #10
 8004af8:	6063      	str	r3, [r4, #4]
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	4945      	ldr	r1, [pc, #276]	; (8004c14 <_scanf_i+0x1e4>)
 8004afe:	6960      	ldr	r0, [r4, #20]
 8004b00:	1ac9      	subs	r1, r1, r3
 8004b02:	f000 f889 	bl	8004c18 <__sccl>
 8004b06:	f04f 0b00 	mov.w	fp, #0
 8004b0a:	68a3      	ldr	r3, [r4, #8]
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d03d      	beq.n	8004b8e <_scanf_i+0x15e>
 8004b12:	6831      	ldr	r1, [r6, #0]
 8004b14:	6960      	ldr	r0, [r4, #20]
 8004b16:	f891 c000 	ldrb.w	ip, [r1]
 8004b1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d035      	beq.n	8004b8e <_scanf_i+0x15e>
 8004b22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004b26:	d124      	bne.n	8004b72 <_scanf_i+0x142>
 8004b28:	0510      	lsls	r0, r2, #20
 8004b2a:	d522      	bpl.n	8004b72 <_scanf_i+0x142>
 8004b2c:	f10b 0b01 	add.w	fp, fp, #1
 8004b30:	f1b9 0f00 	cmp.w	r9, #0
 8004b34:	d003      	beq.n	8004b3e <_scanf_i+0x10e>
 8004b36:	3301      	adds	r3, #1
 8004b38:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	6873      	ldr	r3, [r6, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	6073      	str	r3, [r6, #4]
 8004b46:	dd1b      	ble.n	8004b80 <_scanf_i+0x150>
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	e7d9      	b.n	8004b0a <_scanf_i+0xda>
 8004b56:	f1bb 0f02 	cmp.w	fp, #2
 8004b5a:	d1ae      	bne.n	8004aba <_scanf_i+0x8a>
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004b62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004b66:	d1bf      	bne.n	8004ae8 <_scanf_i+0xb8>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	6063      	str	r3, [r4, #4]
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b70:	e7a2      	b.n	8004ab8 <_scanf_i+0x88>
 8004b72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004b76:	6022      	str	r2, [r4, #0]
 8004b78:	780b      	ldrb	r3, [r1, #0]
 8004b7a:	f805 3b01 	strb.w	r3, [r5], #1
 8004b7e:	e7de      	b.n	8004b3e <_scanf_i+0x10e>
 8004b80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b84:	4631      	mov	r1, r6
 8004b86:	4650      	mov	r0, sl
 8004b88:	4798      	blx	r3
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d0df      	beq.n	8004b4e <_scanf_i+0x11e>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	05d9      	lsls	r1, r3, #23
 8004b92:	d50d      	bpl.n	8004bb0 <_scanf_i+0x180>
 8004b94:	42bd      	cmp	r5, r7
 8004b96:	d909      	bls.n	8004bac <_scanf_i+0x17c>
 8004b98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	4798      	blx	r3
 8004ba6:	f105 39ff 	add.w	r9, r5, #4294967295
 8004baa:	464d      	mov	r5, r9
 8004bac:	42bd      	cmp	r5, r7
 8004bae:	d028      	beq.n	8004c02 <_scanf_i+0x1d2>
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	f012 0210 	ands.w	r2, r2, #16
 8004bb6:	d113      	bne.n	8004be0 <_scanf_i+0x1b0>
 8004bb8:	702a      	strb	r2, [r5, #0]
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	9e01      	ldr	r6, [sp, #4]
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	4650      	mov	r0, sl
 8004bc2:	47b0      	blx	r6
 8004bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc8:	6821      	ldr	r1, [r4, #0]
 8004bca:	1d1a      	adds	r2, r3, #4
 8004bcc:	f8c8 2000 	str.w	r2, [r8]
 8004bd0:	f011 0f20 	tst.w	r1, #32
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	d00f      	beq.n	8004bf8 <_scanf_i+0x1c8>
 8004bd8:	6018      	str	r0, [r3, #0]
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60e3      	str	r3, [r4, #12]
 8004be0:	1bed      	subs	r5, r5, r7
 8004be2:	44ab      	add	fp, r5
 8004be4:	6925      	ldr	r5, [r4, #16]
 8004be6:	445d      	add	r5, fp
 8004be8:	6125      	str	r5, [r4, #16]
 8004bea:	2000      	movs	r0, #0
 8004bec:	b007      	add	sp, #28
 8004bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf2:	f04f 0b00 	mov.w	fp, #0
 8004bf6:	e7ca      	b.n	8004b8e <_scanf_i+0x15e>
 8004bf8:	07ca      	lsls	r2, r1, #31
 8004bfa:	bf4c      	ite	mi
 8004bfc:	8018      	strhmi	r0, [r3, #0]
 8004bfe:	6018      	strpl	r0, [r3, #0]
 8004c00:	e7eb      	b.n	8004bda <_scanf_i+0x1aa>
 8004c02:	2001      	movs	r0, #1
 8004c04:	e7f2      	b.n	8004bec <_scanf_i+0x1bc>
 8004c06:	bf00      	nop
 8004c08:	08005360 	.word	0x08005360
 8004c0c:	08004e91 	.word	0x08004e91
 8004c10:	08004d95 	.word	0x08004d95
 8004c14:	080053d0 	.word	0x080053d0

08004c18 <__sccl>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	780b      	ldrb	r3, [r1, #0]
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	2b5e      	cmp	r3, #94	; 0x5e
 8004c20:	bf0b      	itete	eq
 8004c22:	784b      	ldrbeq	r3, [r1, #1]
 8004c24:	1c48      	addne	r0, r1, #1
 8004c26:	1c88      	addeq	r0, r1, #2
 8004c28:	2200      	movne	r2, #0
 8004c2a:	bf08      	it	eq
 8004c2c:	2201      	moveq	r2, #1
 8004c2e:	1e61      	subs	r1, r4, #1
 8004c30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004c34:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004c38:	42a9      	cmp	r1, r5
 8004c3a:	d1fb      	bne.n	8004c34 <__sccl+0x1c>
 8004c3c:	b90b      	cbnz	r3, 8004c42 <__sccl+0x2a>
 8004c3e:	3801      	subs	r0, #1
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	f082 0101 	eor.w	r1, r2, #1
 8004c46:	54e1      	strb	r1, [r4, r3]
 8004c48:	1c42      	adds	r2, r0, #1
 8004c4a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8004c4e:	2d2d      	cmp	r5, #45	; 0x2d
 8004c50:	f102 36ff 	add.w	r6, r2, #4294967295
 8004c54:	4610      	mov	r0, r2
 8004c56:	d006      	beq.n	8004c66 <__sccl+0x4e>
 8004c58:	2d5d      	cmp	r5, #93	; 0x5d
 8004c5a:	d0f1      	beq.n	8004c40 <__sccl+0x28>
 8004c5c:	b90d      	cbnz	r5, 8004c62 <__sccl+0x4a>
 8004c5e:	4630      	mov	r0, r6
 8004c60:	e7ee      	b.n	8004c40 <__sccl+0x28>
 8004c62:	462b      	mov	r3, r5
 8004c64:	e7ef      	b.n	8004c46 <__sccl+0x2e>
 8004c66:	7816      	ldrb	r6, [r2, #0]
 8004c68:	2e5d      	cmp	r6, #93	; 0x5d
 8004c6a:	d0fa      	beq.n	8004c62 <__sccl+0x4a>
 8004c6c:	42b3      	cmp	r3, r6
 8004c6e:	dcf8      	bgt.n	8004c62 <__sccl+0x4a>
 8004c70:	4618      	mov	r0, r3
 8004c72:	3001      	adds	r0, #1
 8004c74:	4286      	cmp	r6, r0
 8004c76:	5421      	strb	r1, [r4, r0]
 8004c78:	dcfb      	bgt.n	8004c72 <__sccl+0x5a>
 8004c7a:	43d8      	mvns	r0, r3
 8004c7c:	4430      	add	r0, r6
 8004c7e:	1c5d      	adds	r5, r3, #1
 8004c80:	42b3      	cmp	r3, r6
 8004c82:	bfa8      	it	ge
 8004c84:	2000      	movge	r0, #0
 8004c86:	182b      	adds	r3, r5, r0
 8004c88:	3202      	adds	r2, #2
 8004c8a:	e7de      	b.n	8004c4a <__sccl+0x32>

08004c8c <_strtol_l.isra.0>:
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c92:	d001      	beq.n	8004c98 <_strtol_l.isra.0+0xc>
 8004c94:	2b24      	cmp	r3, #36	; 0x24
 8004c96:	d906      	bls.n	8004ca6 <_strtol_l.isra.0+0x1a>
 8004c98:	f7ff f8fe 	bl	8003e98 <__errno>
 8004c9c:	2316      	movs	r3, #22
 8004c9e:	6003      	str	r3, [r0, #0]
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca6:	4f3a      	ldr	r7, [pc, #232]	; (8004d90 <_strtol_l.isra.0+0x104>)
 8004ca8:	468e      	mov	lr, r1
 8004caa:	4676      	mov	r6, lr
 8004cac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004cb0:	5de5      	ldrb	r5, [r4, r7]
 8004cb2:	f015 0508 	ands.w	r5, r5, #8
 8004cb6:	d1f8      	bne.n	8004caa <_strtol_l.isra.0+0x1e>
 8004cb8:	2c2d      	cmp	r4, #45	; 0x2d
 8004cba:	d134      	bne.n	8004d26 <_strtol_l.isra.0+0x9a>
 8004cbc:	f89e 4000 	ldrb.w	r4, [lr]
 8004cc0:	f04f 0801 	mov.w	r8, #1
 8004cc4:	f106 0e02 	add.w	lr, r6, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05c      	beq.n	8004d86 <_strtol_l.isra.0+0xfa>
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d10c      	bne.n	8004cea <_strtol_l.isra.0+0x5e>
 8004cd0:	2c30      	cmp	r4, #48	; 0x30
 8004cd2:	d10a      	bne.n	8004cea <_strtol_l.isra.0+0x5e>
 8004cd4:	f89e 4000 	ldrb.w	r4, [lr]
 8004cd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004cdc:	2c58      	cmp	r4, #88	; 0x58
 8004cde:	d14d      	bne.n	8004d7c <_strtol_l.isra.0+0xf0>
 8004ce0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f10e 0e02 	add.w	lr, lr, #2
 8004cea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004cee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	fbbc f9f3 	udiv	r9, ip, r3
 8004cf8:	4635      	mov	r5, r6
 8004cfa:	fb03 ca19 	mls	sl, r3, r9, ip
 8004cfe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004d02:	2f09      	cmp	r7, #9
 8004d04:	d818      	bhi.n	8004d38 <_strtol_l.isra.0+0xac>
 8004d06:	463c      	mov	r4, r7
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	dd24      	ble.n	8004d56 <_strtol_l.isra.0+0xca>
 8004d0c:	2e00      	cmp	r6, #0
 8004d0e:	db1f      	blt.n	8004d50 <_strtol_l.isra.0+0xc4>
 8004d10:	45a9      	cmp	r9, r5
 8004d12:	d31d      	bcc.n	8004d50 <_strtol_l.isra.0+0xc4>
 8004d14:	d101      	bne.n	8004d1a <_strtol_l.isra.0+0x8e>
 8004d16:	45a2      	cmp	sl, r4
 8004d18:	db1a      	blt.n	8004d50 <_strtol_l.isra.0+0xc4>
 8004d1a:	fb05 4503 	mla	r5, r5, r3, r4
 8004d1e:	2601      	movs	r6, #1
 8004d20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004d24:	e7eb      	b.n	8004cfe <_strtol_l.isra.0+0x72>
 8004d26:	2c2b      	cmp	r4, #43	; 0x2b
 8004d28:	bf08      	it	eq
 8004d2a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004d2e:	46a8      	mov	r8, r5
 8004d30:	bf08      	it	eq
 8004d32:	f106 0e02 	addeq.w	lr, r6, #2
 8004d36:	e7c7      	b.n	8004cc8 <_strtol_l.isra.0+0x3c>
 8004d38:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004d3c:	2f19      	cmp	r7, #25
 8004d3e:	d801      	bhi.n	8004d44 <_strtol_l.isra.0+0xb8>
 8004d40:	3c37      	subs	r4, #55	; 0x37
 8004d42:	e7e1      	b.n	8004d08 <_strtol_l.isra.0+0x7c>
 8004d44:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004d48:	2f19      	cmp	r7, #25
 8004d4a:	d804      	bhi.n	8004d56 <_strtol_l.isra.0+0xca>
 8004d4c:	3c57      	subs	r4, #87	; 0x57
 8004d4e:	e7db      	b.n	8004d08 <_strtol_l.isra.0+0x7c>
 8004d50:	f04f 36ff 	mov.w	r6, #4294967295
 8004d54:	e7e4      	b.n	8004d20 <_strtol_l.isra.0+0x94>
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	da05      	bge.n	8004d66 <_strtol_l.isra.0+0xda>
 8004d5a:	2322      	movs	r3, #34	; 0x22
 8004d5c:	6003      	str	r3, [r0, #0]
 8004d5e:	4665      	mov	r5, ip
 8004d60:	b942      	cbnz	r2, 8004d74 <_strtol_l.isra.0+0xe8>
 8004d62:	4628      	mov	r0, r5
 8004d64:	e79d      	b.n	8004ca2 <_strtol_l.isra.0+0x16>
 8004d66:	f1b8 0f00 	cmp.w	r8, #0
 8004d6a:	d000      	beq.n	8004d6e <_strtol_l.isra.0+0xe2>
 8004d6c:	426d      	negs	r5, r5
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d0f7      	beq.n	8004d62 <_strtol_l.isra.0+0xd6>
 8004d72:	b10e      	cbz	r6, 8004d78 <_strtol_l.isra.0+0xec>
 8004d74:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	e7f2      	b.n	8004d62 <_strtol_l.isra.0+0xd6>
 8004d7c:	2430      	movs	r4, #48	; 0x30
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1b3      	bne.n	8004cea <_strtol_l.isra.0+0x5e>
 8004d82:	2308      	movs	r3, #8
 8004d84:	e7b1      	b.n	8004cea <_strtol_l.isra.0+0x5e>
 8004d86:	2c30      	cmp	r4, #48	; 0x30
 8004d88:	d0a4      	beq.n	8004cd4 <_strtol_l.isra.0+0x48>
 8004d8a:	230a      	movs	r3, #10
 8004d8c:	e7ad      	b.n	8004cea <_strtol_l.isra.0+0x5e>
 8004d8e:	bf00      	nop
 8004d90:	080053d3 	.word	0x080053d3

08004d94 <_strtol_r>:
 8004d94:	f7ff bf7a 	b.w	8004c8c <_strtol_l.isra.0>

08004d98 <_strtoul_l.isra.0>:
 8004d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d9c:	4e3b      	ldr	r6, [pc, #236]	; (8004e8c <_strtoul_l.isra.0+0xf4>)
 8004d9e:	4686      	mov	lr, r0
 8004da0:	468c      	mov	ip, r1
 8004da2:	4660      	mov	r0, ip
 8004da4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004da8:	5da5      	ldrb	r5, [r4, r6]
 8004daa:	f015 0508 	ands.w	r5, r5, #8
 8004dae:	d1f8      	bne.n	8004da2 <_strtoul_l.isra.0+0xa>
 8004db0:	2c2d      	cmp	r4, #45	; 0x2d
 8004db2:	d134      	bne.n	8004e1e <_strtoul_l.isra.0+0x86>
 8004db4:	f89c 4000 	ldrb.w	r4, [ip]
 8004db8:	f04f 0801 	mov.w	r8, #1
 8004dbc:	f100 0c02 	add.w	ip, r0, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05e      	beq.n	8004e82 <_strtoul_l.isra.0+0xea>
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d10c      	bne.n	8004de2 <_strtoul_l.isra.0+0x4a>
 8004dc8:	2c30      	cmp	r4, #48	; 0x30
 8004dca:	d10a      	bne.n	8004de2 <_strtoul_l.isra.0+0x4a>
 8004dcc:	f89c 0000 	ldrb.w	r0, [ip]
 8004dd0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004dd4:	2858      	cmp	r0, #88	; 0x58
 8004dd6:	d14f      	bne.n	8004e78 <_strtoul_l.isra.0+0xe0>
 8004dd8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f10c 0c02 	add.w	ip, ip, #2
 8004de2:	f04f 37ff 	mov.w	r7, #4294967295
 8004de6:	2500      	movs	r5, #0
 8004de8:	fbb7 f7f3 	udiv	r7, r7, r3
 8004dec:	fb03 f907 	mul.w	r9, r3, r7
 8004df0:	ea6f 0909 	mvn.w	r9, r9
 8004df4:	4628      	mov	r0, r5
 8004df6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004dfa:	2e09      	cmp	r6, #9
 8004dfc:	d818      	bhi.n	8004e30 <_strtoul_l.isra.0+0x98>
 8004dfe:	4634      	mov	r4, r6
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	dd24      	ble.n	8004e4e <_strtoul_l.isra.0+0xb6>
 8004e04:	2d00      	cmp	r5, #0
 8004e06:	db1f      	blt.n	8004e48 <_strtoul_l.isra.0+0xb0>
 8004e08:	4287      	cmp	r7, r0
 8004e0a:	d31d      	bcc.n	8004e48 <_strtoul_l.isra.0+0xb0>
 8004e0c:	d101      	bne.n	8004e12 <_strtoul_l.isra.0+0x7a>
 8004e0e:	45a1      	cmp	r9, r4
 8004e10:	db1a      	blt.n	8004e48 <_strtoul_l.isra.0+0xb0>
 8004e12:	fb00 4003 	mla	r0, r0, r3, r4
 8004e16:	2501      	movs	r5, #1
 8004e18:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004e1c:	e7eb      	b.n	8004df6 <_strtoul_l.isra.0+0x5e>
 8004e1e:	2c2b      	cmp	r4, #43	; 0x2b
 8004e20:	bf08      	it	eq
 8004e22:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004e26:	46a8      	mov	r8, r5
 8004e28:	bf08      	it	eq
 8004e2a:	f100 0c02 	addeq.w	ip, r0, #2
 8004e2e:	e7c7      	b.n	8004dc0 <_strtoul_l.isra.0+0x28>
 8004e30:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004e34:	2e19      	cmp	r6, #25
 8004e36:	d801      	bhi.n	8004e3c <_strtoul_l.isra.0+0xa4>
 8004e38:	3c37      	subs	r4, #55	; 0x37
 8004e3a:	e7e1      	b.n	8004e00 <_strtoul_l.isra.0+0x68>
 8004e3c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004e40:	2e19      	cmp	r6, #25
 8004e42:	d804      	bhi.n	8004e4e <_strtoul_l.isra.0+0xb6>
 8004e44:	3c57      	subs	r4, #87	; 0x57
 8004e46:	e7db      	b.n	8004e00 <_strtoul_l.isra.0+0x68>
 8004e48:	f04f 35ff 	mov.w	r5, #4294967295
 8004e4c:	e7e4      	b.n	8004e18 <_strtoul_l.isra.0+0x80>
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	da07      	bge.n	8004e62 <_strtoul_l.isra.0+0xca>
 8004e52:	2322      	movs	r3, #34	; 0x22
 8004e54:	f8ce 3000 	str.w	r3, [lr]
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	b942      	cbnz	r2, 8004e70 <_strtoul_l.isra.0+0xd8>
 8004e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e62:	f1b8 0f00 	cmp.w	r8, #0
 8004e66:	d000      	beq.n	8004e6a <_strtoul_l.isra.0+0xd2>
 8004e68:	4240      	negs	r0, r0
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	d0f7      	beq.n	8004e5e <_strtoul_l.isra.0+0xc6>
 8004e6e:	b10d      	cbz	r5, 8004e74 <_strtoul_l.isra.0+0xdc>
 8004e70:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	e7f2      	b.n	8004e5e <_strtoul_l.isra.0+0xc6>
 8004e78:	2430      	movs	r4, #48	; 0x30
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1b1      	bne.n	8004de2 <_strtoul_l.isra.0+0x4a>
 8004e7e:	2308      	movs	r3, #8
 8004e80:	e7af      	b.n	8004de2 <_strtoul_l.isra.0+0x4a>
 8004e82:	2c30      	cmp	r4, #48	; 0x30
 8004e84:	d0a2      	beq.n	8004dcc <_strtoul_l.isra.0+0x34>
 8004e86:	230a      	movs	r3, #10
 8004e88:	e7ab      	b.n	8004de2 <_strtoul_l.isra.0+0x4a>
 8004e8a:	bf00      	nop
 8004e8c:	080053d3 	.word	0x080053d3

08004e90 <_strtoul_r>:
 8004e90:	f7ff bf82 	b.w	8004d98 <_strtoul_l.isra.0>

08004e94 <__submore>:
 8004e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e98:	460c      	mov	r4, r1
 8004e9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d11d      	bne.n	8004ee0 <__submore+0x4c>
 8004ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea8:	f000 f89a 	bl	8004fe0 <_malloc_r>
 8004eac:	b918      	cbnz	r0, 8004eb6 <__submore+0x22>
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eba:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ebc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ec2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004ec6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004eca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004ece:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004ed2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004ed6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004eda:	6020      	str	r0, [r4, #0]
 8004edc:	2000      	movs	r0, #0
 8004ede:	e7e8      	b.n	8004eb2 <__submore+0x1e>
 8004ee0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004ee2:	0077      	lsls	r7, r6, #1
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	f000 f8d5 	bl	8005094 <_realloc_r>
 8004eea:	4605      	mov	r5, r0
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0de      	beq.n	8004eae <__submore+0x1a>
 8004ef0:	eb00 0806 	add.w	r8, r0, r6
 8004ef4:	4601      	mov	r1, r0
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	4640      	mov	r0, r8
 8004efa:	f7fe fff7 	bl	8003eec <memcpy>
 8004efe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004f02:	f8c4 8000 	str.w	r8, [r4]
 8004f06:	e7e9      	b.n	8004edc <__submore+0x48>

08004f08 <__retarget_lock_acquire_recursive>:
 8004f08:	4770      	bx	lr

08004f0a <__retarget_lock_release_recursive>:
 8004f0a:	4770      	bx	lr

08004f0c <memmove>:
 8004f0c:	4288      	cmp	r0, r1
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	eb01 0402 	add.w	r4, r1, r2
 8004f14:	d902      	bls.n	8004f1c <memmove+0x10>
 8004f16:	4284      	cmp	r4, r0
 8004f18:	4623      	mov	r3, r4
 8004f1a:	d807      	bhi.n	8004f2c <memmove+0x20>
 8004f1c:	1e43      	subs	r3, r0, #1
 8004f1e:	42a1      	cmp	r1, r4
 8004f20:	d008      	beq.n	8004f34 <memmove+0x28>
 8004f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f2a:	e7f8      	b.n	8004f1e <memmove+0x12>
 8004f2c:	4402      	add	r2, r0
 8004f2e:	4601      	mov	r1, r0
 8004f30:	428a      	cmp	r2, r1
 8004f32:	d100      	bne.n	8004f36 <memmove+0x2a>
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f3e:	e7f7      	b.n	8004f30 <memmove+0x24>

08004f40 <_free_r>:
 8004f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f42:	2900      	cmp	r1, #0
 8004f44:	d048      	beq.n	8004fd8 <_free_r+0x98>
 8004f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4a:	9001      	str	r0, [sp, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f52:	bfb8      	it	lt
 8004f54:	18e4      	addlt	r4, r4, r3
 8004f56:	f000 f8d3 	bl	8005100 <__malloc_lock>
 8004f5a:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <_free_r+0x9c>)
 8004f5c:	9801      	ldr	r0, [sp, #4]
 8004f5e:	6813      	ldr	r3, [r2, #0]
 8004f60:	4615      	mov	r5, r2
 8004f62:	b933      	cbnz	r3, 8004f72 <_free_r+0x32>
 8004f64:	6063      	str	r3, [r4, #4]
 8004f66:	6014      	str	r4, [r2, #0]
 8004f68:	b003      	add	sp, #12
 8004f6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f6e:	f000 b8cd 	b.w	800510c <__malloc_unlock>
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	d90b      	bls.n	8004f8e <_free_r+0x4e>
 8004f76:	6821      	ldr	r1, [r4, #0]
 8004f78:	1862      	adds	r2, r4, r1
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bf04      	itt	eq
 8004f7e:	681a      	ldreq	r2, [r3, #0]
 8004f80:	685b      	ldreq	r3, [r3, #4]
 8004f82:	6063      	str	r3, [r4, #4]
 8004f84:	bf04      	itt	eq
 8004f86:	1852      	addeq	r2, r2, r1
 8004f88:	6022      	streq	r2, [r4, #0]
 8004f8a:	602c      	str	r4, [r5, #0]
 8004f8c:	e7ec      	b.n	8004f68 <_free_r+0x28>
 8004f8e:	461a      	mov	r2, r3
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b10b      	cbz	r3, 8004f98 <_free_r+0x58>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d9fa      	bls.n	8004f8e <_free_r+0x4e>
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	1855      	adds	r5, r2, r1
 8004f9c:	42a5      	cmp	r5, r4
 8004f9e:	d10b      	bne.n	8004fb8 <_free_r+0x78>
 8004fa0:	6824      	ldr	r4, [r4, #0]
 8004fa2:	4421      	add	r1, r4
 8004fa4:	1854      	adds	r4, r2, r1
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	d1dd      	bne.n	8004f68 <_free_r+0x28>
 8004fac:	681c      	ldr	r4, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	6053      	str	r3, [r2, #4]
 8004fb2:	4421      	add	r1, r4
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	e7d7      	b.n	8004f68 <_free_r+0x28>
 8004fb8:	d902      	bls.n	8004fc0 <_free_r+0x80>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	6003      	str	r3, [r0, #0]
 8004fbe:	e7d3      	b.n	8004f68 <_free_r+0x28>
 8004fc0:	6825      	ldr	r5, [r4, #0]
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	bf04      	itt	eq
 8004fc8:	6819      	ldreq	r1, [r3, #0]
 8004fca:	685b      	ldreq	r3, [r3, #4]
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	bf04      	itt	eq
 8004fd0:	1949      	addeq	r1, r1, r5
 8004fd2:	6021      	streq	r1, [r4, #0]
 8004fd4:	6054      	str	r4, [r2, #4]
 8004fd6:	e7c7      	b.n	8004f68 <_free_r+0x28>
 8004fd8:	b003      	add	sp, #12
 8004fda:	bd30      	pop	{r4, r5, pc}
 8004fdc:	200000a0 	.word	0x200000a0

08004fe0 <_malloc_r>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	1ccd      	adds	r5, r1, #3
 8004fe4:	f025 0503 	bic.w	r5, r5, #3
 8004fe8:	3508      	adds	r5, #8
 8004fea:	2d0c      	cmp	r5, #12
 8004fec:	bf38      	it	cc
 8004fee:	250c      	movcc	r5, #12
 8004ff0:	2d00      	cmp	r5, #0
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	db01      	blt.n	8004ffa <_malloc_r+0x1a>
 8004ff6:	42a9      	cmp	r1, r5
 8004ff8:	d903      	bls.n	8005002 <_malloc_r+0x22>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	2000      	movs	r0, #0
 8005000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005002:	f000 f87d 	bl	8005100 <__malloc_lock>
 8005006:	4921      	ldr	r1, [pc, #132]	; (800508c <_malloc_r+0xac>)
 8005008:	680a      	ldr	r2, [r1, #0]
 800500a:	4614      	mov	r4, r2
 800500c:	b99c      	cbnz	r4, 8005036 <_malloc_r+0x56>
 800500e:	4f20      	ldr	r7, [pc, #128]	; (8005090 <_malloc_r+0xb0>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b923      	cbnz	r3, 800501e <_malloc_r+0x3e>
 8005014:	4621      	mov	r1, r4
 8005016:	4630      	mov	r0, r6
 8005018:	f000 f862 	bl	80050e0 <_sbrk_r>
 800501c:	6038      	str	r0, [r7, #0]
 800501e:	4629      	mov	r1, r5
 8005020:	4630      	mov	r0, r6
 8005022:	f000 f85d 	bl	80050e0 <_sbrk_r>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	d123      	bne.n	8005072 <_malloc_r+0x92>
 800502a:	230c      	movs	r3, #12
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f86c 	bl	800510c <__malloc_unlock>
 8005034:	e7e3      	b.n	8004ffe <_malloc_r+0x1e>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	1b5b      	subs	r3, r3, r5
 800503a:	d417      	bmi.n	800506c <_malloc_r+0x8c>
 800503c:	2b0b      	cmp	r3, #11
 800503e:	d903      	bls.n	8005048 <_malloc_r+0x68>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	441c      	add	r4, r3
 8005044:	6025      	str	r5, [r4, #0]
 8005046:	e004      	b.n	8005052 <_malloc_r+0x72>
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	42a2      	cmp	r2, r4
 800504c:	bf0c      	ite	eq
 800504e:	600b      	streq	r3, [r1, #0]
 8005050:	6053      	strne	r3, [r2, #4]
 8005052:	4630      	mov	r0, r6
 8005054:	f000 f85a 	bl	800510c <__malloc_unlock>
 8005058:	f104 000b 	add.w	r0, r4, #11
 800505c:	1d23      	adds	r3, r4, #4
 800505e:	f020 0007 	bic.w	r0, r0, #7
 8005062:	1ac2      	subs	r2, r0, r3
 8005064:	d0cc      	beq.n	8005000 <_malloc_r+0x20>
 8005066:	1a1b      	subs	r3, r3, r0
 8005068:	50a3      	str	r3, [r4, r2]
 800506a:	e7c9      	b.n	8005000 <_malloc_r+0x20>
 800506c:	4622      	mov	r2, r4
 800506e:	6864      	ldr	r4, [r4, #4]
 8005070:	e7cc      	b.n	800500c <_malloc_r+0x2c>
 8005072:	1cc4      	adds	r4, r0, #3
 8005074:	f024 0403 	bic.w	r4, r4, #3
 8005078:	42a0      	cmp	r0, r4
 800507a:	d0e3      	beq.n	8005044 <_malloc_r+0x64>
 800507c:	1a21      	subs	r1, r4, r0
 800507e:	4630      	mov	r0, r6
 8005080:	f000 f82e 	bl	80050e0 <_sbrk_r>
 8005084:	3001      	adds	r0, #1
 8005086:	d1dd      	bne.n	8005044 <_malloc_r+0x64>
 8005088:	e7cf      	b.n	800502a <_malloc_r+0x4a>
 800508a:	bf00      	nop
 800508c:	200000a0 	.word	0x200000a0
 8005090:	200000a4 	.word	0x200000a4

08005094 <_realloc_r>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	4607      	mov	r7, r0
 8005098:	4614      	mov	r4, r2
 800509a:	460e      	mov	r6, r1
 800509c:	b921      	cbnz	r1, 80050a8 <_realloc_r+0x14>
 800509e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050a2:	4611      	mov	r1, r2
 80050a4:	f7ff bf9c 	b.w	8004fe0 <_malloc_r>
 80050a8:	b922      	cbnz	r2, 80050b4 <_realloc_r+0x20>
 80050aa:	f7ff ff49 	bl	8004f40 <_free_r>
 80050ae:	4625      	mov	r5, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b4:	f000 f830 	bl	8005118 <_malloc_usable_size_r>
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d20f      	bcs.n	80050dc <_realloc_r+0x48>
 80050bc:	4621      	mov	r1, r4
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff ff8e 	bl	8004fe0 <_malloc_r>
 80050c4:	4605      	mov	r5, r0
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d0f2      	beq.n	80050b0 <_realloc_r+0x1c>
 80050ca:	4631      	mov	r1, r6
 80050cc:	4622      	mov	r2, r4
 80050ce:	f7fe ff0d 	bl	8003eec <memcpy>
 80050d2:	4631      	mov	r1, r6
 80050d4:	4638      	mov	r0, r7
 80050d6:	f7ff ff33 	bl	8004f40 <_free_r>
 80050da:	e7e9      	b.n	80050b0 <_realloc_r+0x1c>
 80050dc:	4635      	mov	r5, r6
 80050de:	e7e7      	b.n	80050b0 <_realloc_r+0x1c>

080050e0 <_sbrk_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d06      	ldr	r5, [pc, #24]	; (80050fc <_sbrk_r+0x1c>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fb fd52 	bl	8000b94 <_sbrk>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_sbrk_r+0x1a>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_sbrk_r+0x1a>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000660 	.word	0x20000660

08005100 <__malloc_lock>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__malloc_lock+0x8>)
 8005102:	f7ff bf01 	b.w	8004f08 <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	20000668 	.word	0x20000668

0800510c <__malloc_unlock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_unlock+0x8>)
 800510e:	f7ff befc 	b.w	8004f0a <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	20000668 	.word	0x20000668

08005118 <_malloc_usable_size_r>:
 8005118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800511c:	1f18      	subs	r0, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfbc      	itt	lt
 8005122:	580b      	ldrlt	r3, [r1, r0]
 8005124:	18c0      	addlt	r0, r0, r3
 8005126:	4770      	bx	lr

08005128 <_init>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr

08005134 <_fini>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr
