
esp_mqtt_withf446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004158  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004578  08004578  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004580  08004580  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  2000007c  08004604  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08004604  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d305  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f85  00000000  00000000  0002d3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021857  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6d6  00000000  00000000  00051b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8fe8  00000000  00000000  0005d22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126215  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  00126268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004310 	.word	0x08004310

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08004310 	.word	0x08004310

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <set_pa8_high>:
extern void mqtthandler(const char * topic,const char * payload);
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void set_pa8_high(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4802      	ldr	r0, [pc, #8]	; (80005ec <set_pa8_high+0x14>)
 80005e4:	f001 fb02 	bl	8001bec <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0a4      	sub	sp, #144	; 0x90
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ff2b 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8a1 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f965 	bl	80008cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000602:	f000 f90f 	bl	8000824 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f937 	bl	8000878 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_buffer,100);
 800060a:	2264      	movs	r2, #100	; 0x64
 800060c:	4940      	ldr	r1, [pc, #256]	; (8000710 <main+0x120>)
 800060e:	4841      	ldr	r0, [pc, #260]	; (8000714 <main+0x124>)
 8000610:	f002 fa41 	bl	8002a96 <HAL_UART_Receive_IT>
 set_pa8_high();
 8000614:	f7ff ffe0 	bl	80005d8 <set_pa8_high>
Wifi_connect(WIFI_SSID, WIFI_PSWD);
 8000618:	493f      	ldr	r1, [pc, #252]	; (8000718 <main+0x128>)
 800061a:	4840      	ldr	r0, [pc, #256]	; (800071c <main+0x12c>)
 800061c:	f000 fc18 	bl	8000e50 <Wifi_connect>
HAL_Delay(5000);
 8000620:	f241 3088 	movw	r0, #5000	; 0x1388
 8000624:	f000 ff86 	bl	8001534 <HAL_Delay>
uint16_t keepalive=60;
 8000628:	233c      	movs	r3, #60	; 0x3c
 800062a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
connect_broker("5.196.95.208", "1883", "MQTT", "Semih35", keepalive, 0x02);
 800062e:	2302      	movs	r3, #2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4b39      	ldr	r3, [pc, #228]	; (8000720 <main+0x130>)
 800063a:	4a3a      	ldr	r2, [pc, #232]	; (8000724 <main+0x134>)
 800063c:	493a      	ldr	r1, [pc, #232]	; (8000728 <main+0x138>)
 800063e:	483b      	ldr	r0, [pc, #236]	; (800072c <main+0x13c>)
 8000640:	f000 fc3e 	bl	8000ec0 <connect_broker>
HAL_Delay(500);
 8000644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000648:	f000 ff74 	bl	8001534 <HAL_Delay>
setmqttcallback(mqtthandler);
 800064c:	4838      	ldr	r0, [pc, #224]	; (8000730 <main+0x140>)
 800064e:	f000 fde9 	bl	8001224 <setmqttcallback>
HAL_Delay(2000);
 8000652:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000656:	f000 ff6d 	bl	8001534 <HAL_Delay>
uint32_t publistime=HAL_GetTick();
 800065a:	f000 ff5f 	bl	800151c <HAL_GetTick>
 800065e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
uint32_t connectionsendpackettime=HAL_GetTick();
 8000662:	f000 ff5b 	bl	800151c <HAL_GetTick>
 8000666:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80


char transfer_data[123];
mqtt_publish("espdeneme", "semihdemirli");
 800066a:	4932      	ldr	r1, [pc, #200]	; (8000734 <main+0x144>)
 800066c:	4832      	ldr	r0, [pc, #200]	; (8000738 <main+0x148>)
 800066e:	f000 fd03 	bl	8001078 <mqtt_publish>
subscribe_handler();
 8000672:	f000 fb23 	bl	8000cbc <subscribe_handler>

 send_string();
 8000676:	f000 feb7 	bl	80013e8 <send_string>
 uint8_t sub=1;
 800067a:	2301      	movs	r3, #1
 800067c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
if((HAL_GetTick()-publistime)>240000){
 8000680:	f000 ff4c 	bl	800151c <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a2b      	ldr	r2, [pc, #172]	; (800073c <main+0x14c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d907      	bls.n	80006a2 <main+0xb2>
	mqtt_publish("espdeneme", "semihdemirli");
 8000692:	4928      	ldr	r1, [pc, #160]	; (8000734 <main+0x144>)
 8000694:	4828      	ldr	r0, [pc, #160]	; (8000738 <main+0x148>)
 8000696:	f000 fcef 	bl	8001078 <mqtt_publish>
	publistime=HAL_GetTick();
 800069a:	f000 ff3f 	bl	800151c <HAL_GetTick>
 800069e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84


}
if((HAL_GetTick()-connectionsendpackettime)>45000){
 80006a2:	f000 ff3b 	bl	800151c <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d91c      	bls.n	80006f0 <main+0x100>
	if(mqtt_is_connected()==MQTT_IS_NOT_CONNECTED){
 80006b6:	f000 fe2f 	bl	8001318 <mqtt_is_connected>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d117      	bne.n	80006f0 <main+0x100>
		connect_broker("5.196.95.208", "1883", "MQTT", "Semih35", keepalive, 0x02);
 80006c0:	2302      	movs	r3, #2
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <main+0x130>)
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <main+0x134>)
 80006ce:	4916      	ldr	r1, [pc, #88]	; (8000728 <main+0x138>)
 80006d0:	4816      	ldr	r0, [pc, #88]	; (800072c <main+0x13c>)
 80006d2:	f000 fbf5 	bl	8000ec0 <connect_broker>
		HAL_Delay(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 ff2c 	bl	8001534 <HAL_Delay>
		connectionsendpackettime=HAL_GetTick();
 80006dc:	f000 ff1e 	bl	800151c <HAL_GetTick>
 80006e0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_Delay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 ff25 	bl	8001534 <HAL_Delay>
		sub=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	}
}
if(!sub){
 80006f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d104      	bne.n	8000702 <main+0x112>
	subscribe_handler();
 80006f8:	f000 fae0 	bl	8000cbc <subscribe_handler>
	sub=1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
}
read_message();
 8000702:	f000 fafd 	bl	8000d00 <read_message>
//mqtt_loop();
	  HAL_Delay(500);
 8000706:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070a:	f000 ff13 	bl	8001534 <HAL_Delay>
if((HAL_GetTick()-publistime)>240000){
 800070e:	e7b7      	b.n	8000680 <main+0x90>
 8000710:	200001f0 	.word	0x200001f0
 8000714:	20000320 	.word	0x20000320
 8000718:	08004328 	.word	0x08004328
 800071c:	08004334 	.word	0x08004334
 8000720:	08004348 	.word	0x08004348
 8000724:	08004350 	.word	0x08004350
 8000728:	08004358 	.word	0x08004358
 800072c:	08004360 	.word	0x08004360
 8000730:	08000c01 	.word	0x08000c01
 8000734:	08004370 	.word	0x08004370
 8000738:	08004380 	.word	0x08004380
 800073c:	0003a980 	.word	0x0003a980

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2234      	movs	r2, #52	; 0x34
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 f992 	bl	8003a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b2c      	ldr	r3, [pc, #176]	; (800081c <SystemClock_Config+0xdc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a2b      	ldr	r2, [pc, #172]	; (800081c <SystemClock_Config+0xdc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <SystemClock_Config+0xdc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a25      	ldr	r2, [pc, #148]	; (8000820 <SystemClock_Config+0xe0>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <SystemClock_Config+0xe0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007b4:	23b4      	movs	r3, #180	; 0xb4
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fd45 	bl	8002258 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d4:	f000 f8be 	bl	8000954 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d8:	f001 fa22 	bl	8001c20 <HAL_PWREx_EnableOverDrive>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007e2:	f000 f8b7 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2105      	movs	r1, #5
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fa5b 	bl	8001cc0 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000810:	f000 f8a0 	bl	8000954 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART1_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x4c>)
 800085c:	f001 ff9a 	bl	8002794 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f875 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000320 	.word	0x20000320
 8000874:	40011000 	.word	0x40011000

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f001 ff70 	bl	8002794 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f84b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000494 	.word	0x20000494
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0x80>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_GPIO_Init+0x80>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_GPIO_Init+0x80>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x80>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0x80>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x80>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x84>)
 8000922:	f001 f963 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x84>)
 8000940:	f000 ffc0 	bl	80018c4 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <HAL_UART_MspInit+0xf8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d135      	bne.n	8000a3e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <HAL_UART_MspInit+0xfc>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a34      	ldr	r2, [pc, #208]	; (8000aac <HAL_UART_MspInit+0xfc>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <HAL_UART_MspInit+0xfc>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <HAL_UART_MspInit+0xfc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <HAL_UART_MspInit+0xfc>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4822      	ldr	r0, [pc, #136]	; (8000ab0 <HAL_UART_MspInit+0x100>)
 8000a28:	f000 ff4c 	bl	80018c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2025      	movs	r0, #37	; 0x25
 8000a32:	f000 fe7e 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a36:	2025      	movs	r0, #37	; 0x25
 8000a38:	f000 fe97 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3c:	e030      	b.n	8000aa0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <HAL_UART_MspInit+0x104>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d12b      	bne.n	8000aa0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a16      	ldr	r2, [pc, #88]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6313      	str	r3, [r2, #48]	; 0x30
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_UART_MspInit+0xfc>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a80:	230c      	movs	r3, #12
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_UART_MspInit+0x100>)
 8000a9c:	f000 ff12 	bl	80018c4 <HAL_GPIO_Init>
}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 fcf6 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	  HAL_UART_Receive(&huart1, (uint8_t *)&rx_data, 1, 10);
 8000b10:	230a      	movs	r3, #10
 8000b12:	2201      	movs	r2, #1
 8000b14:	4910      	ldr	r1, [pc, #64]	; (8000b58 <USART1_IRQHandler+0x4c>)
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <USART1_IRQHandler+0x50>)
 8000b18:	f001 ff1b 	bl	8002952 <HAL_UART_Receive>


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b1c:	480f      	ldr	r0, [pc, #60]	; (8000b5c <USART1_IRQHandler+0x50>)
 8000b1e:	f002 f89d 	bl	8002c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	  Uart_data[rx_count++]=rx_data;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <USART1_IRQHandler+0x54>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	b2d1      	uxtb	r1, r2
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <USART1_IRQHandler+0x54>)
 8000b2c:	7011      	strb	r1, [r2, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <USART1_IRQHandler+0x4c>)
 8000b32:	7819      	ldrb	r1, [r3, #0]
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <USART1_IRQHandler+0x58>)
 8000b36:	5499      	strb	r1, [r3, r2]
	  if(strstr(Uart_data,return_data)!=NULL){
 8000b38:	490b      	ldr	r1, [pc, #44]	; (8000b68 <USART1_IRQHandler+0x5c>)
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <USART1_IRQHandler+0x58>)
 8000b3c:	f002 ffc4 	bl	8003ac8 <strstr>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <USART1_IRQHandler+0x46>
		  rx_count=0;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <USART1_IRQHandler+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
		  rx_flag=1;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <USART1_IRQHandler+0x60>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
	  }



  /* USER CODE END USART1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200004d9 	.word	0x200004d9
 8000b5c:	20000320 	.word	0x20000320
 8000b60:	200004da 	.word	0x200004da
 8000b64:	20000364 	.word	0x20000364
 8000b68:	200000a4 	.word	0x200000a4
 8000b6c:	200004d8 	.word	0x200004d8

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f002 ff40 	bl	8003a24 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000098 	.word	0x20000098
 8000bd8:	20000598 	.word	0x20000598

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <mqtthandler>:
uint8_t level=0x04;
uint8_t connect = 0x10;
uint8_t publishCon = 0x30;
uint8_t subscribeCon = 0x82;
char tx_infodata[150];
void mqtthandler(const char * topic,const char * payload){
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	if((!strcmp(topic,"SEMİH54"))&&(!strcmp(payload,"ON"))){
 8000c0a:	4922      	ldr	r1, [pc, #136]	; (8000c94 <mqtthandler+0x94>)
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff faff 	bl	8000210 <strcmp>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d118      	bne.n	8000c4a <mqtthandler+0x4a>
 8000c18:	491f      	ldr	r1, [pc, #124]	; (8000c98 <mqtthandler+0x98>)
 8000c1a:	6838      	ldr	r0, [r7, #0]
 8000c1c:	f7ff faf8 	bl	8000210 <strcmp>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d111      	bne.n	8000c4a <mqtthandler+0x4a>
		mqtt_publish("ledinfoiot1", "SEMledacildi");
 8000c26:	491d      	ldr	r1, [pc, #116]	; (8000c9c <mqtthandler+0x9c>)
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <mqtthandler+0xa0>)
 8000c2a:	f000 fa25 	bl	8001078 <mqtt_publish>

		HAL_UART_Transmit(&huart2, (uint8_t)*tx_infodata, sprintf(tx_infodata,"led1acildi\r\n") ,100);
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <mqtthandler+0xa4>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461c      	mov	r4, r3
 8000c34:	491c      	ldr	r1, [pc, #112]	; (8000ca8 <mqtthandler+0xa8>)
 8000c36:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <mqtthandler+0xa4>)
 8000c38:	f002 ff26 	bl	8003a88 <siprintf>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	4621      	mov	r1, r4
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <mqtthandler+0xac>)
 8000c46:	f001 fdf2 	bl	800282e <HAL_UART_Transmit>
	}
	if((!strcmp(topic,"IOT"))&&(!strcmp(payload,"ON"))){
 8000c4a:	4919      	ldr	r1, [pc, #100]	; (8000cb0 <mqtthandler+0xb0>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fadf 	bl	8000210 <strcmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d118      	bne.n	8000c8a <mqtthandler+0x8a>
 8000c58:	490f      	ldr	r1, [pc, #60]	; (8000c98 <mqtthandler+0x98>)
 8000c5a:	6838      	ldr	r0, [r7, #0]
 8000c5c:	f7ff fad8 	bl	8000210 <strcmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d111      	bne.n	8000c8a <mqtthandler+0x8a>
			HAL_UART_Transmit(&huart2, (uint8_t)*tx_infodata, sprintf(tx_infodata,"led1acildi\r\n") ,100);
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <mqtthandler+0xa4>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461c      	mov	r4, r3
 8000c6c:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <mqtthandler+0xa8>)
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <mqtthandler+0xa4>)
 8000c70:	f002 ff0a 	bl	8003a88 <siprintf>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	2364      	movs	r3, #100	; 0x64
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <mqtthandler+0xac>)
 8000c7e:	f001 fdd6 	bl	800282e <HAL_UART_Transmit>

			mqtt_publish("ledinfo", "led1acildi");
 8000c82:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <mqtthandler+0xb4>)
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <mqtthandler+0xb8>)
 8000c86:	f000 f9f7 	bl	8001078 <mqtt_publish>


		}

}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	0800438c 	.word	0x0800438c
 8000c98:	08004398 	.word	0x08004398
 8000c9c:	0800439c 	.word	0x0800439c
 8000ca0:	080043ac 	.word	0x080043ac
 8000ca4:	200004ec 	.word	0x200004ec
 8000ca8:	080043b8 	.word	0x080043b8
 8000cac:	20000494 	.word	0x20000494
 8000cb0:	080043c8 	.word	0x080043c8
 8000cb4:	080043cc 	.word	0x080043cc
 8000cb8:	080043d8 	.word	0x080043d8

08000cbc <subscribe_handler>:
 void subscribe_handler(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	mqtt_subscribe("SEMİH54", 0x00);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <subscribe_handler+0x38>)
 8000cc4:	f000 fa3e 	bl	8001144 <mqtt_subscribe>
	HAL_Delay(2000);
 8000cc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ccc:	f000 fc32 	bl	8001534 <HAL_Delay>
	mqtt_subscribe("IOT", 0x00);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <subscribe_handler+0x3c>)
 8000cd4:	f000 fa36 	bl	8001144 <mqtt_subscribe>
	HAL_Delay(2000);
 8000cd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cdc:	f000 fc2a 	bl	8001534 <HAL_Delay>
	mqtt_subscribe("iot2", 0x00);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <subscribe_handler+0x40>)
 8000ce4:	f000 fa2e 	bl	8001144 <mqtt_subscribe>
	HAL_Delay(2000);
 8000ce8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cec:	f000 fc22 	bl	8001534 <HAL_Delay>


}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	0800438c 	.word	0x0800438c
 8000cf8:	080043c8 	.word	0x080043c8
 8000cfc:	080043e0 	.word	0x080043e0

08000d00 <read_message>:
void read_message(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0c6      	sub	sp, #280	; 0x118
 8000d04:	af00      	add	r7, sp, #0
	int remain_length=0,message_length=0,topic_length=0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		char message[100];
		char topic[150];
		HAL_UART_AbortReceive_IT(&huart1);
 8000d18:	484a      	ldr	r0, [pc, #296]	; (8000e44 <read_message+0x144>)
 8000d1a:	f001 feed 	bl	8002af8 <HAL_UART_AbortReceive_IT>
		for(int i=0;i<sizeof(rx_buffer);i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000d24:	e06e      	b.n	8000e04 <read_message+0x104>
		{
			 if(rx_buffer[i] == 0x30)
 8000d26:	4a48      	ldr	r2, [pc, #288]	; (8000e48 <read_message+0x148>)
 8000d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b30      	cmp	r3, #48	; 0x30
 8000d32:	d162      	bne.n	8000dfa <read_message+0xfa>
			 {
					remain_length = rx_buffer[i+1];
 8000d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a43      	ldr	r2, [pc, #268]	; (8000e48 <read_message+0x148>)
 8000d3c:	5cd3      	ldrb	r3, [r2, r3]
 8000d3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					topic_length  = rx_buffer[i+2]+rx_buffer[i+3];
 8000d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d46:	3302      	adds	r3, #2
 8000d48:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <read_message+0x148>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d52:	3303      	adds	r3, #3
 8000d54:	4a3c      	ldr	r2, [pc, #240]	; (8000e48 <read_message+0x148>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	440b      	add	r3, r1
 8000d5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					message_length = remain_length -(topic_length + 2);
 8000d5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000d62:	3302      	adds	r3, #2
 8000d64:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					for(int k=0;k<topic_length;k++){
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000d74:	e012      	b.n	8000d9c <read_message+0x9c>
									topic[k]=rx_buffer[i+4+k];
 8000d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d7a:	1d1a      	adds	r2, r3, #4
 8000d7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d80:	4413      	add	r3, r2
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <read_message+0x148>)
 8000d84:	5cd1      	ldrb	r1, [r2, r3]
 8000d86:	1d3a      	adds	r2, r7, #4
 8000d88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d8c:	4413      	add	r3, r2
 8000d8e:	460a      	mov	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
					for(int k=0;k<topic_length;k++){
 8000d92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d96:	3301      	adds	r3, #1
 8000d98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000d9c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000da0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbe6      	blt.n	8000d76 <read_message+0x76>
								}
					for(int j=0;j<message_length;j++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000dae:	e016      	b.n	8000dde <read_message+0xde>
					{
						message[j] = rx_buffer[i+4+topic_length+j];
 8000db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000db4:	1d1a      	adds	r2, r3, #4
 8000db6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000dba:	441a      	add	r2, r3
 8000dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <read_message+0x148>)
 8000dc4:	5cd1      	ldrb	r1, [r2, r3]
 8000dc6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dce:	4413      	add	r3, r2
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	701a      	strb	r2, [r3, #0]
					for(int j=0;j<message_length;j++)
 8000dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dd8:	3301      	adds	r3, #1
 8000dda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000dde:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbe2      	blt.n	8000db0 <read_message+0xb0>
					}
					mymqttcallback(topic,message);
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <read_message+0x14c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000df2:	1d3a      	adds	r2, r7, #4
 8000df4:	4610      	mov	r0, r2
 8000df6:	4798      	blx	r3
					break;
 8000df8:	e008      	b.n	8000e0c <read_message+0x10c>
		for(int i=0;i<sizeof(rx_buffer);i++)
 8000dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e08:	2b95      	cmp	r3, #149	; 0x95
 8000e0a:	d98c      	bls.n	8000d26 <read_message+0x26>
			 }
		}
		memset(rx_buffer,0,sizeof(rx_buffer)); 											// clear buffer
 8000e0c:	2296      	movs	r2, #150	; 0x96
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <read_message+0x148>)
 8000e12:	f002 fe31 	bl	8003a78 <memset>
		memset(message,0,sizeof(message));
 8000e16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1a:	2264      	movs	r2, #100	; 0x64
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fe2a 	bl	8003a78 <memset>
		memset(topic,0,sizeof(topic));
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2296      	movs	r2, #150	; 0x96
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fe24 	bl	8003a78 <memset>
		HAL_UART_Receive_IT(&huart1,(uint8_t *)rx_buffer,100);
 8000e30:	2264      	movs	r2, #100	; 0x64
 8000e32:	4905      	ldr	r1, [pc, #20]	; (8000e48 <read_message+0x148>)
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <read_message+0x144>)
 8000e36:	f001 fe2e 	bl	8002a96 <HAL_UART_Receive_IT>
	}
 8000e3a:	bf00      	nop
 8000e3c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000320 	.word	0x20000320
 8000e48:	200001f0 	.word	0x200001f0
 8000e4c:	200004dc 	.word	0x200004dc

08000e50 <Wifi_connect>:



void Wifi_connect(char *SSID ,char *Password)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),1000);
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	220d      	movs	r2, #13
 8000e60:	4912      	ldr	r1, [pc, #72]	; (8000eac <Wifi_connect+0x5c>)
 8000e62:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <Wifi_connect+0x60>)
 8000e64:	f001 fce3 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e6c:	f000 fb62 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1,(uint8_t *)"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"),1000);
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	220a      	movs	r2, #10
 8000e76:	490f      	ldr	r1, [pc, #60]	; (8000eb4 <Wifi_connect+0x64>)
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <Wifi_connect+0x60>)
 8000e7a:	f001 fcd8 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e82:	f000 fb57 	bl	8001534 <HAL_Delay>
//	HAL_UART_Transmit(&huart1,(uint8_t *)"AT+RST\r\n",strlen("AT+RST\r\n"),100);
//	HAL_Delay(5000);
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Password),1000);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	490b      	ldr	r1, [pc, #44]	; (8000eb8 <Wifi_connect+0x68>)
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <Wifi_connect+0x6c>)
 8000e8e:	f002 fdfb 	bl	8003a88 <siprintf>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <Wifi_connect+0x6c>)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <Wifi_connect+0x60>)
 8000e9e:	f001 fcc6 	bl	800282e <HAL_UART_Transmit>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	080043e8 	.word	0x080043e8
 8000eb0:	20000320 	.word	0x20000320
 8000eb4:	080043f8 	.word	0x080043f8
 8000eb8:	08004404 	.word	0x08004404
 8000ebc:	20000288 	.word	0x20000288

08000ec0 <connect_broker>:
void connect_broker(char *ip,char *port,char *protocoltype,char * client_id,uint16_t keepalive,uint8_t flag){
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b091      	sub	sp, #68	; 0x44
 8000ec4:	af0a      	add	r7, sp, #40	; 0x28
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)"AT+CIPCLOSE\r\n", strlen("AT+CIPCLOSE\r\n"), 1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	220d      	movs	r2, #13
 8000ed4:	495c      	ldr	r1, [pc, #368]	; (8001048 <connect_broker+0x188>)
 8000ed6:	485d      	ldr	r0, [pc, #372]	; (800104c <connect_broker+0x18c>)
 8000ed8:	f001 fca9 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000edc:	2064      	movs	r0, #100	; 0x64
 8000ede:	f000 fb29 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPMUX=0\r\n", strlen("AT+CIPMUX=0\r\n"), 1000);
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	220d      	movs	r2, #13
 8000ee8:	4959      	ldr	r1, [pc, #356]	; (8001050 <connect_broker+0x190>)
 8000eea:	4858      	ldr	r0, [pc, #352]	; (800104c <connect_broker+0x18c>)
 8000eec:	f001 fc9f 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000ef0:	2064      	movs	r0, #100	; 0x64
 8000ef2:	f000 fb1f 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIFSR\r\n", strlen("AT+CIFSR\r\n"), 1000);
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	220a      	movs	r2, #10
 8000efc:	4955      	ldr	r1, [pc, #340]	; (8001054 <connect_broker+0x194>)
 8000efe:	4853      	ldr	r0, [pc, #332]	; (800104c <connect_broker+0x18c>)
 8000f00:	f001 fc95 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f000 fb15 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",ip,port),5000);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4952      	ldr	r1, [pc, #328]	; (8001058 <connect_broker+0x198>)
 8000f10:	4852      	ldr	r0, [pc, #328]	; (800105c <connect_broker+0x19c>)
 8000f12:	f002 fdb9 	bl	8003a88 <siprintf>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f1e:	494f      	ldr	r1, [pc, #316]	; (800105c <connect_broker+0x19c>)
 8000f20:	484a      	ldr	r0, [pc, #296]	; (800104c <connect_broker+0x18c>)
 8000f22:	f001 fc84 	bl	800282e <HAL_UART_Transmit>

	HAL_Delay(2000);
 8000f26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f2a:	f000 fb03 	bl	8001534 <HAL_Delay>
	ProtocolNameLength=strlen(protocoltype);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff f978 	bl	8000224 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <connect_broker+0x1a0>)
 8000f3a:	801a      	strh	r2, [r3, #0]
	ClientIDLength=strlen(client_id);
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff f971 	bl	8000224 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <connect_broker+0x1a4>)
 8000f48:	801a      	strh	r2, [r3, #0]
	uint8_t remainlength;
	remainlength=2+ProtocolNameLength+6+ClientIDLength;
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <connect_broker+0x1a0>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b44      	ldr	r3, [pc, #272]	; (8001064 <connect_broker+0x1a4>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	75fb      	strb	r3, [r7, #23]
	uint16_t total_length=sprintf(tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)remainlength,(char)(ProtocolNameLength<<8),(char)ProtocolNameLength,protocoltype,(char)level,(char)flag,(char)(keepalive<<8),(char)keepalive,(char)(ClientIDLength<<8),(char)ClientIDLength,client_id);
 8000f5e:	4b42      	ldr	r3, [pc, #264]	; (8001068 <connect_broker+0x1a8>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	469c      	mov	ip, r3
 8000f64:	7df9      	ldrb	r1, [r7, #23]
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <connect_broker+0x1a0>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <connect_broker+0x1ac>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461c      	mov	r4, r3
 8000f74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f78:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	4615      	mov	r5, r2
 8000f7e:	4a39      	ldr	r2, [pc, #228]	; (8001064 <connect_broker+0x1a4>)
 8000f80:	8812      	ldrh	r2, [r2, #0]
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	4616      	mov	r6, r2
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	9209      	str	r2, [sp, #36]	; 0x24
 8000f8a:	9608      	str	r6, [sp, #32]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9207      	str	r2, [sp, #28]
 8000f90:	9506      	str	r5, [sp, #24]
 8000f92:	2200      	movs	r2, #0
 8000f94:	9205      	str	r2, [sp, #20]
 8000f96:	9304      	str	r3, [sp, #16]
 8000f98:	9403      	str	r4, [sp, #12]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	9001      	str	r0, [sp, #4]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	4931      	ldr	r1, [pc, #196]	; (8001070 <connect_broker+0x1b0>)
 8000faa:	482c      	ldr	r0, [pc, #176]	; (800105c <connect_broker+0x19c>)
 8000fac:	f002 fd6c 	bl	8003a88 <siprintf>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",total_length), 1000);
 8000fb4:	8abb      	ldrh	r3, [r7, #20]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	492e      	ldr	r1, [pc, #184]	; (8001074 <connect_broker+0x1b4>)
 8000fba:	4828      	ldr	r0, [pc, #160]	; (800105c <connect_broker+0x19c>)
 8000fbc:	f002 fd64 	bl	8003a88 <siprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc8:	4924      	ldr	r1, [pc, #144]	; (800105c <connect_broker+0x19c>)
 8000fca:	4820      	ldr	r0, [pc, #128]	; (800104c <connect_broker+0x18c>)
 8000fcc:	f001 fc2f 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000fd0:	2064      	movs	r0, #100	; 0x64
 8000fd2:	f000 faaf 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocoltype,(char)level,(char)flag,(char)(keepalive << 8),(char)keepalive,(char)(ClientIDLength << 8),(char)ClientIDLength,client_id),5000);
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <connect_broker+0x1a8>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	469c      	mov	ip, r3
 8000fdc:	7df9      	ldrb	r1, [r7, #23]
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <connect_broker+0x1a0>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <connect_broker+0x1ac>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461c      	mov	r4, r3
 8000fec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ff0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <connect_broker+0x1a4>)
 8000ff8:	8812      	ldrh	r2, [r2, #0]
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	4616      	mov	r6, r2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	9209      	str	r2, [sp, #36]	; 0x24
 8001002:	9608      	str	r6, [sp, #32]
 8001004:	2200      	movs	r2, #0
 8001006:	9207      	str	r2, [sp, #28]
 8001008:	9506      	str	r5, [sp, #24]
 800100a:	2200      	movs	r2, #0
 800100c:	9205      	str	r2, [sp, #20]
 800100e:	9304      	str	r3, [sp, #16]
 8001010:	9403      	str	r4, [sp, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	9001      	str	r0, [sp, #4]
 8001018:	2300      	movs	r3, #0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	460b      	mov	r3, r1
 800101e:	4662      	mov	r2, ip
 8001020:	4913      	ldr	r1, [pc, #76]	; (8001070 <connect_broker+0x1b0>)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <connect_broker+0x19c>)
 8001024:	f002 fd30 	bl	8003a88 <siprintf>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001030:	490a      	ldr	r1, [pc, #40]	; (800105c <connect_broker+0x19c>)
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <connect_broker+0x18c>)
 8001034:	f001 fbfb 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f000 fa7b 	bl	8001534 <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001046:	bf00      	nop
 8001048:	0800441c 	.word	0x0800441c
 800104c:	20000320 	.word	0x20000320
 8001050:	0800442c 	.word	0x0800442c
 8001054:	0800443c 	.word	0x0800443c
 8001058:	08004448 	.word	0x08004448
 800105c:	20000288 	.word	0x20000288
 8001060:	200004e0 	.word	0x200004e0
 8001064:	200004e8 	.word	0x200004e8
 8001068:	2000000d 	.word	0x2000000d
 800106c:	2000000c 	.word	0x2000000c
 8001070:	08004464 	.word	0x08004464
 8001074:	08004480 	.word	0x08004480

08001078 <mqtt_publish>:
		}
	}
}

void mqtt_publish(const char *topic, const char *message)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af04      	add	r7, sp, #16
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]

	uint16_t topiclength = strlen(topic);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff f8ce 	bl	8000224 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	81fb      	strh	r3, [r7, #14]
	uint8_t remainlength = 2+topiclength+strlen(message);
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	b2dc      	uxtb	r4, r3
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f7ff f8c7 	bl	8000224 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4423      	add	r3, r4
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3302      	adds	r3, #2
 80010a0:	737b      	strb	r3, [r7, #13]
	int length = sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message);
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <mqtt_publish+0xb8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	7b7a      	ldrb	r2, [r7, #13]
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	9101      	str	r1, [sp, #4]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	4613      	mov	r3, r2
 80010c0:	4602      	mov	r2, r0
 80010c2:	491c      	ldr	r1, [pc, #112]	; (8001134 <mqtt_publish+0xbc>)
 80010c4:	481c      	ldr	r0, [pc, #112]	; (8001138 <mqtt_publish+0xc0>)
 80010c6:	f002 fcdf 	bl	8003a88 <siprintf>
 80010ca:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),100);
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	491b      	ldr	r1, [pc, #108]	; (800113c <mqtt_publish+0xc4>)
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <mqtt_publish+0xc0>)
 80010d2:	f002 fcd9 	bl	8003a88 <siprintf>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	4916      	ldr	r1, [pc, #88]	; (8001138 <mqtt_publish+0xc0>)
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <mqtt_publish+0xc8>)
 80010e0:	f001 fba5 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f000 fa25 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message),5000);
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <mqtt_publish+0xb8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	7b7a      	ldrb	r2, [r7, #13]
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	9303      	str	r3, [sp, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	9101      	str	r1, [sp, #4]
 8001102:	2300      	movs	r3, #0
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	4602      	mov	r2, r0
 800110a:	490a      	ldr	r1, [pc, #40]	; (8001134 <mqtt_publish+0xbc>)
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <mqtt_publish+0xc0>)
 800110e:	f002 fcbb 	bl	8003a88 <siprintf>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f241 3388 	movw	r3, #5000	; 0x1388
 800111a:	4907      	ldr	r1, [pc, #28]	; (8001138 <mqtt_publish+0xc0>)
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <mqtt_publish+0xc8>)
 800111e:	f001 fb86 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f000 fa06 	bl	8001534 <HAL_Delay>

}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	2000000e 	.word	0x2000000e
 8001134:	08004490 	.word	0x08004490
 8001138:	20000288 	.word	0x20000288
 800113c:	08004480 	.word	0x08004480
 8001140:	20000320 	.word	0x20000320

08001144 <mqtt_subscribe>:
void mqtt_subscribe(const char *topic,uint8_t Qos){
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af06      	add	r7, sp, #24
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	uint16_t TopicLength = strlen(topic);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f867 	bl	8000224 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	81fb      	strh	r3, [r7, #14]
		uint8_t RemainLength = 2+2+TopicLength+1; // packetIDlength(2) + topiclengthdata(2)+topiclength+Qos
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	3305      	adds	r3, #5
 8001160:	737b      	strb	r3, [r7, #13]
		uint16_t length = sprintf(tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos);
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <mqtt_subscribe+0xc8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461c      	mov	r4, r3
 8001168:	7b7a      	ldrb	r2, [r7, #13]
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <mqtt_subscribe+0xcc>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	9305      	str	r3, [sp, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	9304      	str	r3, [sp, #16]
 8001180:	9003      	str	r0, [sp, #12]
 8001182:	2300      	movs	r3, #0
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	9101      	str	r1, [sp, #4]
 8001188:	2300      	movs	r3, #0
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	4622      	mov	r2, r4
 8001190:	4920      	ldr	r1, [pc, #128]	; (8001214 <mqtt_subscribe+0xd0>)
 8001192:	4821      	ldr	r0, [pc, #132]	; (8001218 <mqtt_subscribe+0xd4>)
 8001194:	f002 fc78 	bl	8003a88 <siprintf>
 8001198:	4603      	mov	r3, r0
 800119a:	817b      	strh	r3, [r7, #10]
		HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	461a      	mov	r2, r3
 80011a0:	491e      	ldr	r1, [pc, #120]	; (800121c <mqtt_subscribe+0xd8>)
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <mqtt_subscribe+0xd4>)
 80011a4:	f002 fc70 	bl	8003a88 <siprintf>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b0:	4919      	ldr	r1, [pc, #100]	; (8001218 <mqtt_subscribe+0xd4>)
 80011b2:	481b      	ldr	r0, [pc, #108]	; (8001220 <mqtt_subscribe+0xdc>)
 80011b4:	f001 fb3b 	bl	800282e <HAL_UART_Transmit>
		HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f000 f9bb 	bl	8001534 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos),5000);
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <mqtt_subscribe+0xc8>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461c      	mov	r4, r3
 80011c4:	7b7a      	ldrb	r2, [r7, #13]
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <mqtt_subscribe+0xcc>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	9305      	str	r3, [sp, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	9304      	str	r3, [sp, #16]
 80011dc:	9003      	str	r0, [sp, #12]
 80011de:	2300      	movs	r3, #0
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	9101      	str	r1, [sp, #4]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	4622      	mov	r2, r4
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <mqtt_subscribe+0xd0>)
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <mqtt_subscribe+0xd4>)
 80011f0:	f002 fc4a 	bl	8003a88 <siprintf>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80011fc:	4906      	ldr	r1, [pc, #24]	; (8001218 <mqtt_subscribe+0xd4>)
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <mqtt_subscribe+0xdc>)
 8001200:	f001 fb15 	bl	800282e <HAL_UART_Transmit>
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	2000000f 	.word	0x2000000f
 8001210:	2000000a 	.word	0x2000000a
 8001214:	080044a0 	.word	0x080044a0
 8001218:	20000288 	.word	0x20000288
 800121c:	08004480 	.word	0x08004480
 8001220:	20000320 	.word	0x20000320

08001224 <setmqttcallback>:
void setmqttcallback(void (*mqttcallback)(const char *topic,const char* payload)){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	mymqttcallback=mqttcallback;
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <setmqttcallback+0x1c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200004dc 	.word	0x200004dc

08001244 <send_command_info>:
static void send_command(const char *cmd) {
	HAL_UART_Transmit(&huart1, (uint8_t*) cmd, strlen(cmd), 5000);
}
 void send_command_info(const char *cmd) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) cmd, strlen(cmd), 100);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7fe ffe9 	bl	8000224 <strlen>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <send_command_info+0x24>)
 800125c:	f001 fae7 	bl	800282e <HAL_UART_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000494 	.word	0x20000494

0800126c <flush_response>:

static void flush_response() {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	uint8_t garbage[1];
	while (HAL_UART_Receive(&huart1, garbage, 1, 10) == HAL_OK);
 8001272:	bf00      	nop
 8001274:	1d39      	adds	r1, r7, #4
 8001276:	230a      	movs	r3, #10
 8001278:	2201      	movs	r2, #1
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <flush_response+0x24>)
 800127c:	f001 fb69 	bl	8002952 <HAL_UART_Receive>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f6      	beq.n	8001274 <flush_response+0x8>
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000320 	.word	0x20000320

08001294 <receive_response>:
static uint8_t receive_response(char *resp, uint8_t num_of_bytes, uint32_t timeout_ms) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	460b      	mov	r3, r1
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	72fb      	strb	r3, [r7, #11]
	uint32_t start = HAL_GetTick();
 80012a2:	f000 f93b 	bl	800151c <HAL_GetTick>
 80012a6:	6178      	str	r0, [r7, #20]
	uint8_t resp_buf;
	while (num_of_bytes) {
 80012a8:	e027      	b.n	80012fa <receive_response+0x66>
		resp_buf = '\0';
 80012aa:	2300      	movs	r3, #0
 80012ac:	74fb      	strb	r3, [r7, #19]
		if(HAL_UART_Receive(&huart1, &resp_buf, 1, 250)==HAL_OK){
 80012ae:	f107 0113 	add.w	r1, r7, #19
 80012b2:	23fa      	movs	r3, #250	; 0xfa
 80012b4:	2201      	movs	r2, #1
 80012b6:	4815      	ldr	r0, [pc, #84]	; (800130c <receive_response+0x78>)
 80012b8:	f001 fb4b 	bl	8002952 <HAL_UART_Receive>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10e      	bne.n	80012e0 <receive_response+0x4c>
			if (resp_buf != '\0') {
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d018      	beq.n	80012fa <receive_response+0x66>
					send_command_info("paket byte alindi\r\n");
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <receive_response+0x7c>)
 80012ca:	f7ff ffbb 	bl	8001244 <send_command_info>

					*resp++ = resp_buf;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	7cfa      	ldrb	r2, [r7, #19]
 80012d6:	701a      	strb	r2, [r3, #0]
					num_of_bytes--;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	3b01      	subs	r3, #1
 80012dc:	72fb      	strb	r3, [r7, #11]
 80012de:	e00c      	b.n	80012fa <receive_response+0x66>

					}
		}

		else if (HAL_GetTick() - start > timeout_ms) {
 80012e0:	f000 f91c 	bl	800151c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d201      	bcs.n	80012f4 <receive_response+0x60>
						return 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e006      	b.n	8001302 <receive_response+0x6e>
						break;
					}
		else{
			send_command_info("paket byte alinamadi\r\n");
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <receive_response+0x80>)
 80012f6:	f7ff ffa5 	bl	8001244 <send_command_info>
	while (num_of_bytes) {
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1d4      	bne.n	80012aa <receive_response+0x16>
		}


	}
	return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000320 	.word	0x20000320
 8001310:	080044b4 	.word	0x080044b4
 8001314:	080044c8 	.word	0x080044c8

08001318 <mqtt_is_connected>:

 mqtt_connection_e mqtt_is_connected() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	 uint8_t length_data=sprintf(tx_buffer,"%c%c",(char)pingreqpacket[0],(char)pingreqpacket[1]);
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <mqtt_is_connected+0xb0>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <mqtt_is_connected+0xb0>)
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	4928      	ldr	r1, [pc, #160]	; (80013cc <mqtt_is_connected+0xb4>)
 800132a:	4829      	ldr	r0, [pc, #164]	; (80013d0 <mqtt_is_connected+0xb8>)
 800132c:	f002 fbac 	bl	8003a88 <siprintf>
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
	char resp[2] ={};
 8001334:	2300      	movs	r3, #0
 8001336:	80bb      	strh	r3, [r7, #4]
	flush_response();
 8001338:	f7ff ff98 	bl	800126c <flush_response>
	HAL_UART_Transmit(&huart1,(uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length_data), 1000);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	461a      	mov	r2, r3
 8001340:	4924      	ldr	r1, [pc, #144]	; (80013d4 <mqtt_is_connected+0xbc>)
 8001342:	4823      	ldr	r0, [pc, #140]	; (80013d0 <mqtt_is_connected+0xb8>)
 8001344:	f002 fba0 	bl	8003a88 <siprintf>
 8001348:	4603      	mov	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	491f      	ldr	r1, [pc, #124]	; (80013d0 <mqtt_is_connected+0xb8>)
 8001352:	4821      	ldr	r0, [pc, #132]	; (80013d8 <mqtt_is_connected+0xc0>)
 8001354:	f001 fa6b 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f000 f8eb 	bl	8001534 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_buffer, sprintf(tx_buffer,"%c%c",(char)pingreqpacket[0],(char)pingreqpacket[1]), 5000);
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <mqtt_is_connected+0xb0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <mqtt_is_connected+0xb0>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	4918      	ldr	r1, [pc, #96]	; (80013cc <mqtt_is_connected+0xb4>)
 800136a:	4819      	ldr	r0, [pc, #100]	; (80013d0 <mqtt_is_connected+0xb8>)
 800136c:	f002 fb8c 	bl	8003a88 <siprintf>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f241 3388 	movw	r3, #5000	; 0x1388
 8001378:	4915      	ldr	r1, [pc, #84]	; (80013d0 <mqtt_is_connected+0xb8>)
 800137a:	4817      	ldr	r0, [pc, #92]	; (80013d8 <mqtt_is_connected+0xc0>)
 800137c:	f001 fa57 	bl	800282e <HAL_UART_Transmit>
	HAL_Delay(100);
 8001380:	2064      	movs	r0, #100	; 0x64
 8001382:	f000 f8d7 	bl	8001534 <HAL_Delay>

	if(receive_response(resp, length_data, 10000)){
 8001386:	79f9      	ldrb	r1, [r7, #7]
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	f242 7210 	movw	r2, #10000	; 0x2710
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff80 	bl	8001294 <receive_response>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00c      	beq.n	80013b4 <mqtt_is_connected+0x9c>
		if (strstr(resp, pingresppacket)) {
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <mqtt_is_connected+0xc4>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fb92 	bl	8003ac8 <strstr>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <mqtt_is_connected+0xa6>
				send_command_info("PAKETE CEVAP ALİNDİ\r\n");
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <mqtt_is_connected+0xc8>)
 80013ac:	f7ff ff4a 	bl	8001244 <send_command_info>
				return MQTT_CONNECTED;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e004      	b.n	80013be <mqtt_is_connected+0xa6>
			}
	}
	else{
		send_command_info("pakete cevap alinamamistir\r\n");
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <mqtt_is_connected+0xcc>)
 80013b6:	f7ff ff45 	bl	8001244 <send_command_info>
		return MQTT_IS_NOT_CONNECTED;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e7ff      	b.n	80013be <mqtt_is_connected+0xa6>

	}

}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000004 	.word	0x20000004
 80013cc:	080044e0 	.word	0x080044e0
 80013d0:	20000288 	.word	0x20000288
 80013d4:	08004480 	.word	0x08004480
 80013d8:	20000320 	.word	0x20000320
 80013dc:	20000008 	.word	0x20000008
 80013e0:	080044e8 	.word	0x080044e8
 80013e4:	08004500 	.word	0x08004500

080013e8 <send_string>:
 void send_string(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	 send_command_info("asdasd\r\n");
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <send_string+0x10>)
 80013ee:	f7ff ff29 	bl	8001244 <send_command_info>

 }
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08004520 	.word	0x08004520

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001426:	f7ff fbd9 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 fb01 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f8df 	bl	80005f0 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001440:	08004588 	.word	0x08004588
  ldr r2, =_sbss
 8001444:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001448:	20000598 	.word	0x20000598

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f94f 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fa6c 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f967 	bl	8001786 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f92f 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000014 	.word	0x20000014
 80014f0:	20000010 	.word	0x20000010

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000014 	.word	0x20000014
 8001518:	20000584 	.word	0x20000584

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000584 	.word	0x20000584

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000014 	.word	0x20000014

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff29 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff3e 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff31 	bl	80015e0 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff feb6 	bl	800151c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d008      	beq.n	80017d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e052      	b.n	8001876 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0216 	bic.w	r2, r2, #22
 80017de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d103      	bne.n	8001800 <HAL_DMA_Abort+0x62>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0208 	bic.w	r2, r2, #8
 800180e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001820:	e013      	b.n	800184a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001822:	f7ff fe7b 	bl	800151c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b05      	cmp	r3, #5
 800182e:	d90c      	bls.n	800184a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e015      	b.n	8001876 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e4      	bne.n	8001822 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	223f      	movs	r2, #63	; 0x3f
 800185e:	409a      	lsls	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d004      	beq.n	800189c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e00c      	b.n	80018b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2205      	movs	r2, #5
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e165      	b.n	8001bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8154 	bne.w	8001ba6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80ae 	beq.w	8001ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	; (8001bc4 <HAL_GPIO_Init+0x300>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x21a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x216>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_GPIO_Init+0x310>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x212>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x314>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_GPIO_Init+0x318>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x20a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x31c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x206>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a49      	ldr	r2, [pc, #292]	; (8001be4 <HAL_GPIO_Init+0x320>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x202>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x21c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x304>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b22:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba0:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f ae96 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40021400 	.word	0x40021400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fc66 	bl	800151c <HAL_GetTick>
 8001c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c52:	e009      	b.n	8001c68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c54:	f7ff fc62 	bl	800151c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c62:	d901      	bls.n	8001c68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e01f      	b.n	8001ca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d1ee      	bne.n	8001c54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7c:	f7ff fc4e 	bl	800151c <HAL_GetTick>
 8001c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c82:	e009      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c84:	f7ff fc4a 	bl	800151c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c92:	d901      	bls.n	8001c98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e007      	b.n	8001ca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	420e0040 	.word	0x420e0040
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	420e0044 	.word	0x420e0044

08001cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0cc      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d90c      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0b8      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d14:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	494d      	ldr	r1, [pc, #308]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d044      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d119      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e067      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4934      	ldr	r1, [pc, #208]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7ff fbb4 	bl	800151c <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff fbb0 	bl	800151c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e04f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 020c 	and.w	r2, r3, #12
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1eb      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de0:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d20c      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e032      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	490e      	ldr	r1, [pc, #56]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e46:	f000 f855 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490a      	ldr	r1, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fb14 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	0800452c 	.word	0x0800452c
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000010 	.word	0x20000010

08001e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	0800453c 	.word	0x0800453c

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	f7ff ffdc 	bl	8001e8c <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0b5b      	lsrs	r3, r3, #13
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	0800453c 	.word	0x0800453c

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef8:	b088      	sub	sp, #32
 8001efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f10:	4bce      	ldr	r3, [pc, #824]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	f200 818d 	bhi.w	8002238 <HAL_RCC_GetSysClockFreq+0x344>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f59 	.word	0x08001f59
 8001f28:	08002239 	.word	0x08002239
 8001f2c:	08002239 	.word	0x08002239
 8001f30:	08002239 	.word	0x08002239
 8001f34:	08001f5f 	.word	0x08001f5f
 8001f38:	08002239 	.word	0x08002239
 8001f3c:	08002239 	.word	0x08002239
 8001f40:	08002239 	.word	0x08002239
 8001f44:	08001f65 	.word	0x08001f65
 8001f48:	08002239 	.word	0x08002239
 8001f4c:	08002239 	.word	0x08002239
 8001f50:	08002239 	.word	0x08002239
 8001f54:	080020d9 	.word	0x080020d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4bbd      	ldr	r3, [pc, #756]	; (8002250 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f5a:	61bb      	str	r3, [r7, #24]
       break;
 8001f5c:	e16f      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4bbd      	ldr	r3, [pc, #756]	; (8002254 <HAL_RCC_GetSysClockFreq+0x360>)
 8001f60:	61bb      	str	r3, [r7, #24]
      break;
 8001f62:	e16c      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f64:	4bb9      	ldr	r3, [pc, #740]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6e:	4bb7      	ldr	r3, [pc, #732]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d053      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4bb4      	ldr	r3, [pc, #720]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	461a      	mov	r2, r3
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	ea02 0400 	and.w	r4, r2, r0
 8001f92:	603c      	str	r4, [r7, #0]
 8001f94:	400b      	ands	r3, r1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	014b      	lsls	r3, r1, #5
 8001faa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fae:	0142      	lsls	r2, r0, #5
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	1ac0      	subs	r0, r0, r3
 8001fb8:	462b      	mov	r3, r5
 8001fba:	eb61 0103 	sbc.w	r1, r1, r3
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	018b      	lsls	r3, r1, #6
 8001fc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fcc:	0182      	lsls	r2, r0, #6
 8001fce:	1a12      	subs	r2, r2, r0
 8001fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	00d9      	lsls	r1, r3, #3
 8001fde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fe2:	00d0      	lsls	r0, r2, #3
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4621      	mov	r1, r4
 8001fea:	1852      	adds	r2, r2, r1
 8001fec:	4629      	mov	r1, r5
 8001fee:	eb43 0101 	adc.w	r1, r3, r1
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f04f 0000 	mov.w	r0, #0
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	0259      	lsls	r1, r3, #9
 8001ffe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002002:	0250      	lsls	r0, r2, #9
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	461a      	mov	r2, r3
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	f7fe f964 	bl	80002e0 <__aeabi_uldivmod>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4613      	mov	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	e04c      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002022:	4b8a      	ldr	r3, [pc, #552]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	461a      	mov	r2, r3
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	ea02 0a00 	and.w	sl, r2, r0
 800203a:	ea03 0b01 	and.w	fp, r3, r1
 800203e:	4650      	mov	r0, sl
 8002040:	4659      	mov	r1, fp
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	014b      	lsls	r3, r1, #5
 800204c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002050:	0142      	lsls	r2, r0, #5
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	ebb0 000a 	subs.w	r0, r0, sl
 800205a:	eb61 010b 	sbc.w	r1, r1, fp
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	018b      	lsls	r3, r1, #6
 8002068:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800206c:	0182      	lsls	r2, r0, #6
 800206e:	1a12      	subs	r2, r2, r0
 8002070:	eb63 0301 	sbc.w	r3, r3, r1
 8002074:	f04f 0000 	mov.w	r0, #0
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	00d9      	lsls	r1, r3, #3
 800207e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002082:	00d0      	lsls	r0, r2, #3
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	eb12 020a 	adds.w	r2, r2, sl
 800208c:	eb43 030b 	adc.w	r3, r3, fp
 8002090:	f04f 0000 	mov.w	r0, #0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	0299      	lsls	r1, r3, #10
 800209a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800209e:	0290      	lsls	r0, r2, #10
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	f7fe f916 	bl	80002e0 <__aeabi_uldivmod>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4613      	mov	r3, r2
 80020ba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020bc:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	61bb      	str	r3, [r7, #24]
      break;
 80020d6:	e0b2      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d8:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04d      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	461a      	mov	r2, r3
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	ea02 0800 	and.w	r8, r2, r0
 8002106:	ea03 0901 	and.w	r9, r3, r1
 800210a:	4640      	mov	r0, r8
 800210c:	4649      	mov	r1, r9
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	014b      	lsls	r3, r1, #5
 8002118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800211c:	0142      	lsls	r2, r0, #5
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	ebb0 0008 	subs.w	r0, r0, r8
 8002126:	eb61 0109 	sbc.w	r1, r1, r9
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	018b      	lsls	r3, r1, #6
 8002134:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002138:	0182      	lsls	r2, r0, #6
 800213a:	1a12      	subs	r2, r2, r0
 800213c:	eb63 0301 	sbc.w	r3, r3, r1
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	00d9      	lsls	r1, r3, #3
 800214a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800214e:	00d0      	lsls	r0, r2, #3
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	eb12 0208 	adds.w	r2, r2, r8
 8002158:	eb43 0309 	adc.w	r3, r3, r9
 800215c:	f04f 0000 	mov.w	r0, #0
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	0259      	lsls	r1, r3, #9
 8002166:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800216a:	0250      	lsls	r0, r2, #9
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	461a      	mov	r2, r3
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	f7fe f8b0 	bl	80002e0 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	e04a      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	461a      	mov	r2, r3
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	f240 10ff 	movw	r0, #511	; 0x1ff
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	ea02 0400 	and.w	r4, r2, r0
 80021a2:	ea03 0501 	and.w	r5, r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	014b      	lsls	r3, r1, #5
 80021b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021b8:	0142      	lsls	r2, r0, #5
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	1b00      	subs	r0, r0, r4
 80021c0:	eb61 0105 	sbc.w	r1, r1, r5
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	018b      	lsls	r3, r1, #6
 80021ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021d2:	0182      	lsls	r2, r0, #6
 80021d4:	1a12      	subs	r2, r2, r0
 80021d6:	eb63 0301 	sbc.w	r3, r3, r1
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021e8:	00d0      	lsls	r0, r2, #3
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	1912      	adds	r2, r2, r4
 80021f0:	eb45 0303 	adc.w	r3, r5, r3
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	0299      	lsls	r1, r3, #10
 80021fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002202:	0290      	lsls	r0, r2, #10
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	461a      	mov	r2, r3
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	f7fe f864 	bl	80002e0 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4613      	mov	r3, r2
 800221e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_GetSysClockFreq+0x358>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0f1b      	lsrs	r3, r3, #28
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	61bb      	str	r3, [r7, #24]
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetSysClockFreq+0x35c>)
 800223a:	61bb      	str	r3, [r7, #24]
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	69bb      	ldr	r3, [r7, #24]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	00f42400 	.word	0x00f42400
 8002254:	007a1200 	.word	0x007a1200

08002258 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e28d      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8083 	beq.w	800237e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002278:	4b94      	ldr	r3, [pc, #592]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	d019      	beq.n	80022b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002284:	4b91      	ldr	r3, [pc, #580]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800228c:	2b08      	cmp	r3, #8
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002290:	4b8e      	ldr	r3, [pc, #568]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229c:	d00c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d112      	bne.n	80022d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b6:	d10b      	bne.n	80022d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d05b      	beq.n	800237c <HAL_RCC_OscConfig+0x124>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d157      	bne.n	800237c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e25a      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x90>
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7b      	ldr	r2, [pc, #492]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xcc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0xb4>
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a75      	ldr	r2, [pc, #468]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a72      	ldr	r2, [pc, #456]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xcc>
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6b      	ldr	r2, [pc, #428]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff f8f6 	bl	800151c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff f8f2 	bl	800151c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e21f      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xdc>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff f8e2 	bl	800151c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff f8de 	bl	800151c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e20b      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x104>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d06f      	beq.n	800246a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800238a:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002396:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d11c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x186>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1d3      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4937      	ldr	r1, [pc, #220]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	e03a      	b.n	800246a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <HAL_RCC_OscConfig+0x278>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7ff f88b 	bl	800151c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240a:	f7ff f887 	bl	800151c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e1b4      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4925      	ldr	r1, [pc, #148]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_OscConfig+0x278>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f86a 	bl	800151c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244c:	f7ff f866 	bl	800151c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e193      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d036      	beq.n	80024e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_RCC_OscConfig+0x27c>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff f84a 	bl	800151c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff f846 	bl	800151c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e173      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80024a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x234>
 80024aa:	e01b      	b.n	80024e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7ff f833 	bl	800151c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	e00e      	b.n	80024d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ba:	f7ff f82f 	bl	800151c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d907      	bls.n	80024d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e15c      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
 80024cc:	40023800 	.word	0x40023800
 80024d0:	42470000 	.word	0x42470000
 80024d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	4b8a      	ldr	r3, [pc, #552]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80024da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ea      	bne.n	80024ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8097 	beq.w	8002620 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f6:	4b83      	ldr	r3, [pc, #524]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a7e      	ldr	r2, [pc, #504]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b79      	ldr	r3, [pc, #484]	; (8002708 <HAL_RCC_OscConfig+0x4b0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x4b0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x4b0>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7fe ffef 	bl	800151c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe ffeb 	bl	800151c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e118      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x4b0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x31e>
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a65      	ldr	r2, [pc, #404]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
 8002574:	e01c      	b.n	80025b0 <HAL_RCC_OscConfig+0x358>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b05      	cmp	r3, #5
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x340>
 800257e:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a60      	ldr	r2, [pc, #384]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	4a5d      	ldr	r2, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6713      	str	r3, [r2, #112]	; 0x70
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0x358>
 8002598:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a59      	ldr	r2, [pc, #356]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	f023 0304 	bic.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d015      	beq.n	80025e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe ffb0 	bl	800151c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe ffac 	bl	800151c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0d7      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0ee      	beq.n	80025c0 <HAL_RCC_OscConfig+0x368>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe ff9a 	bl	800151c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7fe ff96 	bl	800151c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0c1      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002602:	4b40      	ldr	r3, [pc, #256]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ee      	bne.n	80025ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80ad 	beq.w	8002784 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	d060      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d145      	bne.n	80026ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_RCC_OscConfig+0x4b4>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe ff6a 	bl	800151c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe ff66 	bl	800151c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e093      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	3b01      	subs	r3, #1
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	071b      	lsls	r3, r3, #28
 8002696:	491b      	ldr	r1, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4b4>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe ff3b 	bl	800151c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe ff37 	bl	800151c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e064      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x452>
 80026c8:	e05c      	b.n	8002784 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x4b4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe ff24 	bl	800151c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe ff20 	bl	800151c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e04d      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x4ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x480>
 80026f6:	e045      	b.n	8002784 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e040      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
 800270c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002710:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <HAL_RCC_OscConfig+0x538>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d030      	beq.n	8002780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d129      	bne.n	8002780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d122      	bne.n	8002780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002740:	4013      	ands	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002748:	4293      	cmp	r3, r2
 800274a:	d119      	bne.n	8002780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d10f      	bne.n	8002780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e03f      	b.n	8002826 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe f8f8 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2224      	movs	r2, #36	; 0x24
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 ff5b 	bl	8003694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800280c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b08a      	sub	sp, #40	; 0x28
 8002832:	af02      	add	r7, sp, #8
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	d17c      	bne.n	8002948 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_UART_Transmit+0x2c>
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e075      	b.n	800294a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_UART_Transmit+0x3e>
 8002868:	2302      	movs	r3, #2
 800286a:	e06e      	b.n	800294a <HAL_UART_Transmit+0x11c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2221      	movs	r2, #33	; 0x21
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002882:	f7fe fe4b 	bl	800151c <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d108      	bne.n	80028b0 <HAL_UART_Transmit+0x82>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d104      	bne.n	80028b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	e003      	b.n	80028b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028c0:	e02a      	b.n	8002918 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fc87 	bl	80031e0 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e036      	b.n	800294a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10b      	bne.n	80028fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	3302      	adds	r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	e007      	b.n	800290a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	3301      	adds	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1cf      	bne.n	80028c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fc57 	bl	80031e0 <UART_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b08a      	sub	sp, #40	; 0x28
 8002956:	af02      	add	r7, sp, #8
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b20      	cmp	r3, #32
 8002970:	f040 808c 	bne.w	8002a8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_UART_Receive+0x2e>
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e084      	b.n	8002a8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_UART_Receive+0x40>
 800298e:	2302      	movs	r3, #2
 8002990:	e07d      	b.n	8002a8e <HAL_UART_Receive+0x13c>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2222      	movs	r2, #34	; 0x22
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ae:	f7fe fdb5 	bl	800151c <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d108      	bne.n	80029dc <HAL_UART_Receive+0x8a>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e003      	b.n	80029e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029ec:	e043      	b.n	8002a76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2120      	movs	r1, #32
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fbf1 	bl	80031e0 <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e042      	b.n	8002a8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	3302      	adds	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e01f      	b.n	8002a68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d007      	beq.n	8002a42 <HAL_UART_Receive+0xf0>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <HAL_UART_Receive+0xfe>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e008      	b.n	8002a62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1b6      	bne.n	80029ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d11d      	bne.n	8002aec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_UART_Receive_IT+0x26>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e016      	b.n	8002aee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Receive_IT+0x38>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e00f      	b.n	8002aee <HAL_UART_Receive_IT+0x58>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fbea 	bl	80032bc <UART_Start_Receive_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	e000      	b.n	8002aee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b09a      	sub	sp, #104	; 0x68
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b16:	667b      	str	r3, [r7, #100]	; 0x64
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b20:	657a      	str	r2, [r7, #84]	; 0x54
 8002b22:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b54:	643a      	str	r2, [r7, #64]	; 0x40
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d119      	bne.n	8002ba4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f023 0310 	bic.w	r3, r3, #16
 8002b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e5      	bne.n	8002b70 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d13f      	bne.n	8002c32 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd2:	61ba      	str	r2, [r7, #24]
 8002bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	613b      	str	r3, [r7, #16]
   return(result);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d013      	beq.n	8002c16 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_UART_AbortReceive_IT+0x160>)
 8002bf4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fe3f 	bl	800187e <HAL_DMA_Abort_IT>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d022      	beq.n	8002c4c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c10:	4610      	mov	r0, r2
 8002c12:	4798      	blx	r3
 8002c14:	e01a      	b.n	8002c4c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fac2 	bl	80031b4 <HAL_UART_AbortReceiveCpltCallback>
 8002c30:	e00c      	b.n	8002c4c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fab4 	bl	80031b4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3768      	adds	r7, #104	; 0x68
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	0800341f 	.word	0x0800341f

08002c5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b0ba      	sub	sp, #232	; 0xe8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x66>
 8002cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fc2f 	bl	800351e <UART_Receive_IT>
      return;
 8002cc0:	e256      	b.n	8003170 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80de 	beq.w	8002e88 <HAL_UART_IRQHandler+0x22c>
 8002ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d106      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80d1 	beq.w	8002e88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_UART_IRQHandler+0xae>
 8002cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_UART_IRQHandler+0xd2>
 8002d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_UART_IRQHandler+0xf6>
 8002d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d011      	beq.n	8002d82 <HAL_UART_IRQHandler+0x126>
 8002d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0208 	orr.w	r2, r3, #8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 81ed 	beq.w	8003166 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_UART_IRQHandler+0x14e>
 8002d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fbba 	bl	800351e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x17a>
 8002dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d04f      	beq.n	8002e76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 faaa 	bl	8003330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d141      	bne.n	8002e6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3314      	adds	r3, #20
 8002df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3314      	adds	r3, #20
 8002e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1d9      	bne.n	8002dea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d013      	beq.n	8002e66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4a7d      	ldr	r2, [pc, #500]	; (8003038 <HAL_UART_IRQHandler+0x3dc>)
 8002e44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fd17 	bl	800187e <HAL_DMA_Abort_IT>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e60:	4610      	mov	r0, r2
 8002e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	e00e      	b.n	8002e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f99a 	bl	80031a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00a      	b.n	8002e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f996 	bl	80031a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e006      	b.n	8002e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f992 	bl	80031a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e82:	e170      	b.n	8003166 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	bf00      	nop
    return;
 8002e86:	e16e      	b.n	8003166 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 814a 	bne.w	8003126 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8143 	beq.w	8003126 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 813c 	beq.w	8003126 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	f040 80b4 	bne.w	800303c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8140 	beq.w	800316a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 8139 	bcs.w	800316a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002efe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0a:	f000 8088 	beq.w	800301e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330c      	adds	r3, #12
 8002f36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1d9      	bne.n	8002f0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3314      	adds	r3, #20
 8002f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e1      	bne.n	8002f5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e3      	bne.n	8002f96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fee:	f023 0310 	bic.w	r3, r3, #16
 8002ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003000:	65ba      	str	r2, [r7, #88]	; 0x58
 8003002:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e3      	bne.n	8002fdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe fbc0 	bl	800179e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003026:	b29b      	uxth	r3, r3
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	b29b      	uxth	r3, r3
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8ca 	bl	80031c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003034:	e099      	b.n	800316a <HAL_UART_IRQHandler+0x50e>
 8003036:	bf00      	nop
 8003038:	080033f7 	.word	0x080033f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003044:	b29b      	uxth	r3, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 808b 	beq.w	800316e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8086 	beq.w	800316e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003086:	647a      	str	r2, [r7, #68]	; 0x44
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800308c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e3      	bne.n	8003062 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3314      	adds	r3, #20
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	623b      	str	r3, [r7, #32]
   return(result);
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030be:	633a      	str	r2, [r7, #48]	; 0x30
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e3      	bne.n	800309a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0310 	bic.w	r3, r3, #16
 80030f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003104:	61fa      	str	r2, [r7, #28]
 8003106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	617b      	str	r3, [r7, #20]
   return(result);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e3      	bne.n	80030e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f852 	bl	80031c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003124:	e023      	b.n	800316e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_UART_IRQHandler+0x4ea>
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f985 	bl	800344e <UART_Transmit_IT>
    return;
 8003144:	e014      	b.n	8003170 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <HAL_UART_IRQHandler+0x514>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9c5 	bl	80034ee <UART_EndTransmit_IT>
    return;
 8003164:	e004      	b.n	8003170 <HAL_UART_IRQHandler+0x514>
    return;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <HAL_UART_IRQHandler+0x514>
      return;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <HAL_UART_IRQHandler+0x514>
      return;
 800316e:	bf00      	nop
  }
}
 8003170:	37e8      	adds	r7, #232	; 0xe8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop

08003178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b090      	sub	sp, #64	; 0x40
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f0:	e050      	b.n	8003294 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d04c      	beq.n	8003294 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <UART_WaitOnFlagUntilTimeout+0x30>
 8003200:	f7fe f98c 	bl	800151c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800320c:	429a      	cmp	r2, r3
 800320e:	d241      	bcs.n	8003294 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003230:	637a      	str	r2, [r7, #52]	; 0x34
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e5      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	613b      	str	r3, [r7, #16]
   return(result);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003264:	623a      	str	r2, [r7, #32]
 8003266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	69f9      	ldr	r1, [r7, #28]
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	61bb      	str	r3, [r7, #24]
   return(result);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e00f      	b.n	80032b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d09f      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3740      	adds	r7, #64	; 0x40
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2222      	movs	r2, #34	; 0x22
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0220 	orr.w	r2, r2, #32
 8003320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b095      	sub	sp, #84	; 0x54
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003358:	643a      	str	r2, [r7, #64]	; 0x40
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800335e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	61fb      	str	r3, [r7, #28]
   return(result);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	64bb      	str	r3, [r7, #72]	; 0x48
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800338c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e5      	bne.n	800336c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d119      	bne.n	80033dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	647b      	str	r3, [r7, #68]	; 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c8:	61ba      	str	r2, [r7, #24]
 80033ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6979      	ldr	r1, [r7, #20]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	613b      	str	r3, [r7, #16]
   return(result);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033ea:	bf00      	nop
 80033ec:	3754      	adds	r7, #84	; 0x54
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fec5 	bl	80031a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff feb7 	bl	80031b4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b21      	cmp	r3, #33	; 0x21
 8003460:	d13e      	bne.n	80034e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	d114      	bne.n	8003496 <UART_Transmit_IT+0x48>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d110      	bne.n	8003496 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	621a      	str	r2, [r3, #32]
 8003494:	e008      	b.n	80034a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	1c59      	adds	r1, r3, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6211      	str	r1, [r2, #32]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4619      	mov	r1, r3
 80034b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fe32 	bl	8003178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b08c      	sub	sp, #48	; 0x30
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b22      	cmp	r3, #34	; 0x22
 8003530:	f040 80ab 	bne.w	800368a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d117      	bne.n	800356e <UART_Receive_IT+0x50>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355c:	b29a      	uxth	r2, r3
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e026      	b.n	80035bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003580:	d007      	beq.n	8003592 <UART_Receive_IT+0x74>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <UART_Receive_IT+0x82>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e008      	b.n	80035b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4619      	mov	r1, r3
 80035ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d15a      	bne.n	8003686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0220 	bic.w	r2, r2, #32
 80035de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b01      	cmp	r3, #1
 800360e:	d135      	bne.n	800367c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	613b      	str	r3, [r7, #16]
   return(result);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f023 0310 	bic.w	r3, r3, #16
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	623a      	str	r2, [r7, #32]
 8003638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	69f9      	ldr	r1, [r7, #28]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	61bb      	str	r3, [r7, #24]
   return(result);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d10a      	bne.n	800366e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fda7 	bl	80031c8 <HAL_UARTEx_RxEventCallback>
 800367a:	e002      	b.n	8003682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fd85 	bl	800318c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e002      	b.n	800368c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003698:	b09f      	sub	sp, #124	; 0x7c
 800369a:	af00      	add	r7, sp, #0
 800369c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036aa:	68d9      	ldr	r1, [r3, #12]
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	ea40 0301 	orr.w	r3, r0, r1
 80036b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	431a      	orrs	r2, r3
 80036c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036d8:	f021 010c 	bic.w	r1, r1, #12
 80036dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036e2:	430b      	orrs	r3, r1
 80036e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	ea40 0301 	orr.w	r3, r0, r1
 80036fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4bc5      	ldr	r3, [pc, #788]	; (8003a18 <UART_SetConfig+0x384>)
 8003704:	429a      	cmp	r2, r3
 8003706:	d004      	beq.n	8003712 <UART_SetConfig+0x7e>
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4bc3      	ldr	r3, [pc, #780]	; (8003a1c <UART_SetConfig+0x388>)
 800370e:	429a      	cmp	r2, r3
 8003710:	d103      	bne.n	800371a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003712:	f7fe fbdb 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 8003716:	6778      	str	r0, [r7, #116]	; 0x74
 8003718:	e002      	b.n	8003720 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800371a:	f7fe fbc3 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 800371e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	f040 80b6 	bne.w	8003898 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800372c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372e:	461c      	mov	r4, r3
 8003730:	f04f 0500 	mov.w	r5, #0
 8003734:	4622      	mov	r2, r4
 8003736:	462b      	mov	r3, r5
 8003738:	1891      	adds	r1, r2, r2
 800373a:	6439      	str	r1, [r7, #64]	; 0x40
 800373c:	415b      	adcs	r3, r3
 800373e:	647b      	str	r3, [r7, #68]	; 0x44
 8003740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003744:	1912      	adds	r2, r2, r4
 8003746:	eb45 0303 	adc.w	r3, r5, r3
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	00d9      	lsls	r1, r3, #3
 8003754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003758:	00d0      	lsls	r0, r2, #3
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	1911      	adds	r1, r2, r4
 8003760:	6639      	str	r1, [r7, #96]	; 0x60
 8003762:	416b      	adcs	r3, r5
 8003764:	667b      	str	r3, [r7, #100]	; 0x64
 8003766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	1891      	adds	r1, r2, r2
 8003772:	63b9      	str	r1, [r7, #56]	; 0x38
 8003774:	415b      	adcs	r3, r3
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800377c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003780:	f7fc fdae 	bl	80002e0 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4ba5      	ldr	r3, [pc, #660]	; (8003a20 <UART_SetConfig+0x38c>)
 800378a:	fba3 2302 	umull	r2, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	011e      	lsls	r6, r3, #4
 8003792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003794:	461c      	mov	r4, r3
 8003796:	f04f 0500 	mov.w	r5, #0
 800379a:	4622      	mov	r2, r4
 800379c:	462b      	mov	r3, r5
 800379e:	1891      	adds	r1, r2, r2
 80037a0:	6339      	str	r1, [r7, #48]	; 0x30
 80037a2:	415b      	adcs	r3, r3
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
 80037a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037aa:	1912      	adds	r2, r2, r4
 80037ac:	eb45 0303 	adc.w	r3, r5, r3
 80037b0:	f04f 0000 	mov.w	r0, #0
 80037b4:	f04f 0100 	mov.w	r1, #0
 80037b8:	00d9      	lsls	r1, r3, #3
 80037ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037be:	00d0      	lsls	r0, r2, #3
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	1911      	adds	r1, r2, r4
 80037c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80037c8:	416b      	adcs	r3, r5
 80037ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	461a      	mov	r2, r3
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80037da:	415b      	adcs	r3, r3
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037e6:	f7fc fd7b 	bl	80002e0 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4b8c      	ldr	r3, [pc, #560]	; (8003a20 <UART_SetConfig+0x38c>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2164      	movs	r1, #100	; 0x64
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	3332      	adds	r3, #50	; 0x32
 8003802:	4a87      	ldr	r2, [pc, #540]	; (8003a20 <UART_SetConfig+0x38c>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003810:	441e      	add	r6, r3
 8003812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003814:	4618      	mov	r0, r3
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	1894      	adds	r4, r2, r2
 8003820:	623c      	str	r4, [r7, #32]
 8003822:	415b      	adcs	r3, r3
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
 8003826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800382a:	1812      	adds	r2, r2, r0
 800382c:	eb41 0303 	adc.w	r3, r1, r3
 8003830:	f04f 0400 	mov.w	r4, #0
 8003834:	f04f 0500 	mov.w	r5, #0
 8003838:	00dd      	lsls	r5, r3, #3
 800383a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800383e:	00d4      	lsls	r4, r2, #3
 8003840:	4622      	mov	r2, r4
 8003842:	462b      	mov	r3, r5
 8003844:	1814      	adds	r4, r2, r0
 8003846:	653c      	str	r4, [r7, #80]	; 0x50
 8003848:	414b      	adcs	r3, r1
 800384a:	657b      	str	r3, [r7, #84]	; 0x54
 800384c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	461a      	mov	r2, r3
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	1891      	adds	r1, r2, r2
 8003858:	61b9      	str	r1, [r7, #24]
 800385a:	415b      	adcs	r3, r3
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003862:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003866:	f7fc fd3b 	bl	80002e0 <__aeabi_uldivmod>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4b6c      	ldr	r3, [pc, #432]	; (8003a20 <UART_SetConfig+0x38c>)
 8003870:	fba3 1302 	umull	r1, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	2164      	movs	r1, #100	; 0x64
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	3332      	adds	r3, #50	; 0x32
 8003882:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <UART_SetConfig+0x38c>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	f003 0207 	and.w	r2, r3, #7
 800388e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4432      	add	r2, r6
 8003894:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003896:	e0b9      	b.n	8003a0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800389a:	461c      	mov	r4, r3
 800389c:	f04f 0500 	mov.w	r5, #0
 80038a0:	4622      	mov	r2, r4
 80038a2:	462b      	mov	r3, r5
 80038a4:	1891      	adds	r1, r2, r2
 80038a6:	6139      	str	r1, [r7, #16]
 80038a8:	415b      	adcs	r3, r3
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038b0:	1912      	adds	r2, r2, r4
 80038b2:	eb45 0303 	adc.w	r3, r5, r3
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	00d9      	lsls	r1, r3, #3
 80038c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038c4:	00d0      	lsls	r0, r2, #3
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	eb12 0804 	adds.w	r8, r2, r4
 80038ce:	eb43 0905 	adc.w	r9, r3, r5
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	008b      	lsls	r3, r1, #2
 80038e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038ea:	0082      	lsls	r2, r0, #2
 80038ec:	4640      	mov	r0, r8
 80038ee:	4649      	mov	r1, r9
 80038f0:	f7fc fcf6 	bl	80002e0 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <UART_SetConfig+0x38c>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	011e      	lsls	r6, r3, #4
 8003902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003904:	4618      	mov	r0, r3
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	1894      	adds	r4, r2, r2
 8003910:	60bc      	str	r4, [r7, #8]
 8003912:	415b      	adcs	r3, r3
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800391a:	1812      	adds	r2, r2, r0
 800391c:	eb41 0303 	adc.w	r3, r1, r3
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	f04f 0500 	mov.w	r5, #0
 8003928:	00dd      	lsls	r5, r3, #3
 800392a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800392e:	00d4      	lsls	r4, r2, #3
 8003930:	4622      	mov	r2, r4
 8003932:	462b      	mov	r3, r5
 8003934:	1814      	adds	r4, r2, r0
 8003936:	64bc      	str	r4, [r7, #72]	; 0x48
 8003938:	414b      	adcs	r3, r1
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4618      	mov	r0, r3
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003954:	0082      	lsls	r2, r0, #2
 8003956:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800395a:	f7fc fcc1 	bl	80002e0 <__aeabi_uldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <UART_SetConfig+0x38c>)
 8003964:	fba3 1302 	umull	r1, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	2164      	movs	r1, #100	; 0x64
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	3332      	adds	r3, #50	; 0x32
 8003976:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <UART_SetConfig+0x38c>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003982:	441e      	add	r6, r3
 8003984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003986:	4618      	mov	r0, r3
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	1894      	adds	r4, r2, r2
 8003992:	603c      	str	r4, [r7, #0]
 8003994:	415b      	adcs	r3, r3
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800399c:	1812      	adds	r2, r2, r0
 800399e:	eb41 0303 	adc.w	r3, r1, r3
 80039a2:	f04f 0400 	mov.w	r4, #0
 80039a6:	f04f 0500 	mov.w	r5, #0
 80039aa:	00dd      	lsls	r5, r3, #3
 80039ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039b0:	00d4      	lsls	r4, r2, #3
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	eb12 0a00 	adds.w	sl, r2, r0
 80039ba:	eb43 0b01 	adc.w	fp, r3, r1
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	008b      	lsls	r3, r1, #2
 80039d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039d6:	0082      	lsls	r2, r0, #2
 80039d8:	4650      	mov	r0, sl
 80039da:	4659      	mov	r1, fp
 80039dc:	f7fc fc80 	bl	80002e0 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <UART_SetConfig+0x38c>)
 80039e6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2164      	movs	r1, #100	; 0x64
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	3332      	adds	r3, #50	; 0x32
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <UART_SetConfig+0x38c>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4432      	add	r2, r6
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	377c      	adds	r7, #124	; 0x7c
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a16:	bf00      	nop
 8003a18:	40011000 	.word	0x40011000
 8003a1c:	40011400 	.word	0x40011400
 8003a20:	51eb851f 	.word	0x51eb851f

08003a24 <__errno>:
 8003a24:	4b01      	ldr	r3, [pc, #4]	; (8003a2c <__errno+0x8>)
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000018 	.word	0x20000018

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4d0d      	ldr	r5, [pc, #52]	; (8003a68 <__libc_init_array+0x38>)
 8003a34:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	4d0b      	ldr	r5, [pc, #44]	; (8003a70 <__libc_init_array+0x40>)
 8003a42:	4c0c      	ldr	r4, [pc, #48]	; (8003a74 <__libc_init_array+0x44>)
 8003a44:	f000 fc64 	bl	8004310 <_init>
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	2600      	movs	r6, #0
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08004580 	.word	0x08004580
 8003a6c:	08004580 	.word	0x08004580
 8003a70:	08004580 	.word	0x08004580
 8003a74:	08004584 	.word	0x08004584

08003a78 <memset>:
 8003a78:	4402      	add	r2, r0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <memset+0xa>
 8003a80:	4770      	bx	lr
 8003a82:	f803 1b01 	strb.w	r1, [r3], #1
 8003a86:	e7f9      	b.n	8003a7c <memset+0x4>

08003a88 <siprintf>:
 8003a88:	b40e      	push	{r1, r2, r3}
 8003a8a:	b500      	push	{lr}
 8003a8c:	b09c      	sub	sp, #112	; 0x70
 8003a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a90:	9002      	str	r0, [sp, #8]
 8003a92:	9006      	str	r0, [sp, #24]
 8003a94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a98:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <siprintf+0x38>)
 8003a9a:	9107      	str	r1, [sp, #28]
 8003a9c:	9104      	str	r1, [sp, #16]
 8003a9e:	4909      	ldr	r1, [pc, #36]	; (8003ac4 <siprintf+0x3c>)
 8003aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aa4:	9105      	str	r1, [sp, #20]
 8003aa6:	6800      	ldr	r0, [r0, #0]
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	a902      	add	r1, sp, #8
 8003aac:	f000 f87e 	bl	8003bac <_svfiprintf_r>
 8003ab0:	9b02      	ldr	r3, [sp, #8]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	b01c      	add	sp, #112	; 0x70
 8003ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003abc:	b003      	add	sp, #12
 8003abe:	4770      	bx	lr
 8003ac0:	20000018 	.word	0x20000018
 8003ac4:	ffff0208 	.word	0xffff0208

08003ac8 <strstr>:
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aca:	780c      	ldrb	r4, [r1, #0]
 8003acc:	b164      	cbz	r4, 8003ae8 <strstr+0x20>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	1c5e      	adds	r6, r3, #1
 8003ad6:	b90a      	cbnz	r2, 8003adc <strstr+0x14>
 8003ad8:	4610      	mov	r0, r2
 8003ada:	e005      	b.n	8003ae8 <strstr+0x20>
 8003adc:	4294      	cmp	r4, r2
 8003ade:	d108      	bne.n	8003af2 <strstr+0x2a>
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003ae6:	b902      	cbnz	r2, 8003aea <strstr+0x22>
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aea:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003aee:	4297      	cmp	r7, r2
 8003af0:	d0f7      	beq.n	8003ae2 <strstr+0x1a>
 8003af2:	4633      	mov	r3, r6
 8003af4:	e7ec      	b.n	8003ad0 <strstr+0x8>

08003af6 <__ssputs_r>:
 8003af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afa:	688e      	ldr	r6, [r1, #8]
 8003afc:	429e      	cmp	r6, r3
 8003afe:	4682      	mov	sl, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	4690      	mov	r8, r2
 8003b04:	461f      	mov	r7, r3
 8003b06:	d838      	bhi.n	8003b7a <__ssputs_r+0x84>
 8003b08:	898a      	ldrh	r2, [r1, #12]
 8003b0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b0e:	d032      	beq.n	8003b76 <__ssputs_r+0x80>
 8003b10:	6825      	ldr	r5, [r4, #0]
 8003b12:	6909      	ldr	r1, [r1, #16]
 8003b14:	eba5 0901 	sub.w	r9, r5, r1
 8003b18:	6965      	ldr	r5, [r4, #20]
 8003b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b22:	3301      	adds	r3, #1
 8003b24:	444b      	add	r3, r9
 8003b26:	106d      	asrs	r5, r5, #1
 8003b28:	429d      	cmp	r5, r3
 8003b2a:	bf38      	it	cc
 8003b2c:	461d      	movcc	r5, r3
 8003b2e:	0553      	lsls	r3, r2, #21
 8003b30:	d531      	bpl.n	8003b96 <__ssputs_r+0xa0>
 8003b32:	4629      	mov	r1, r5
 8003b34:	f000 fb46 	bl	80041c4 <_malloc_r>
 8003b38:	4606      	mov	r6, r0
 8003b3a:	b950      	cbnz	r0, 8003b52 <__ssputs_r+0x5c>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	f8ca 3000 	str.w	r3, [sl]
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b52:	6921      	ldr	r1, [r4, #16]
 8003b54:	464a      	mov	r2, r9
 8003b56:	f000 fabd 	bl	80040d4 <memcpy>
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	6126      	str	r6, [r4, #16]
 8003b68:	6165      	str	r5, [r4, #20]
 8003b6a:	444e      	add	r6, r9
 8003b6c:	eba5 0509 	sub.w	r5, r5, r9
 8003b70:	6026      	str	r6, [r4, #0]
 8003b72:	60a5      	str	r5, [r4, #8]
 8003b74:	463e      	mov	r6, r7
 8003b76:	42be      	cmp	r6, r7
 8003b78:	d900      	bls.n	8003b7c <__ssputs_r+0x86>
 8003b7a:	463e      	mov	r6, r7
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	4641      	mov	r1, r8
 8003b82:	f000 fab5 	bl	80040f0 <memmove>
 8003b86:	68a3      	ldr	r3, [r4, #8]
 8003b88:	6822      	ldr	r2, [r4, #0]
 8003b8a:	1b9b      	subs	r3, r3, r6
 8003b8c:	4432      	add	r2, r6
 8003b8e:	60a3      	str	r3, [r4, #8]
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	2000      	movs	r0, #0
 8003b94:	e7db      	b.n	8003b4e <__ssputs_r+0x58>
 8003b96:	462a      	mov	r2, r5
 8003b98:	f000 fb6e 	bl	8004278 <_realloc_r>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d1e1      	bne.n	8003b66 <__ssputs_r+0x70>
 8003ba2:	6921      	ldr	r1, [r4, #16]
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	f000 fabd 	bl	8004124 <_free_r>
 8003baa:	e7c7      	b.n	8003b3c <__ssputs_r+0x46>

08003bac <_svfiprintf_r>:
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	4698      	mov	r8, r3
 8003bb2:	898b      	ldrh	r3, [r1, #12]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	b09d      	sub	sp, #116	; 0x74
 8003bb8:	4607      	mov	r7, r0
 8003bba:	460d      	mov	r5, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	d50e      	bpl.n	8003bde <_svfiprintf_r+0x32>
 8003bc0:	690b      	ldr	r3, [r1, #16]
 8003bc2:	b963      	cbnz	r3, 8003bde <_svfiprintf_r+0x32>
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	f000 fafd 	bl	80041c4 <_malloc_r>
 8003bca:	6028      	str	r0, [r5, #0]
 8003bcc:	6128      	str	r0, [r5, #16]
 8003bce:	b920      	cbnz	r0, 8003bda <_svfiprintf_r+0x2e>
 8003bd0:	230c      	movs	r3, #12
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	e0d1      	b.n	8003d7e <_svfiprintf_r+0x1d2>
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	616b      	str	r3, [r5, #20]
 8003bde:	2300      	movs	r3, #0
 8003be0:	9309      	str	r3, [sp, #36]	; 0x24
 8003be2:	2320      	movs	r3, #32
 8003be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bec:	2330      	movs	r3, #48	; 0x30
 8003bee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d98 <_svfiprintf_r+0x1ec>
 8003bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bf6:	f04f 0901 	mov.w	r9, #1
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	469a      	mov	sl, r3
 8003bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c02:	b10a      	cbz	r2, 8003c08 <_svfiprintf_r+0x5c>
 8003c04:	2a25      	cmp	r2, #37	; 0x25
 8003c06:	d1f9      	bne.n	8003bfc <_svfiprintf_r+0x50>
 8003c08:	ebba 0b04 	subs.w	fp, sl, r4
 8003c0c:	d00b      	beq.n	8003c26 <_svfiprintf_r+0x7a>
 8003c0e:	465b      	mov	r3, fp
 8003c10:	4622      	mov	r2, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	4638      	mov	r0, r7
 8003c16:	f7ff ff6e 	bl	8003af6 <__ssputs_r>
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f000 80aa 	beq.w	8003d74 <_svfiprintf_r+0x1c8>
 8003c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c22:	445a      	add	r2, fp
 8003c24:	9209      	str	r2, [sp, #36]	; 0x24
 8003c26:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80a2 	beq.w	8003d74 <_svfiprintf_r+0x1c8>
 8003c30:	2300      	movs	r3, #0
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c3a:	f10a 0a01 	add.w	sl, sl, #1
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	9307      	str	r3, [sp, #28]
 8003c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c46:	931a      	str	r3, [sp, #104]	; 0x68
 8003c48:	4654      	mov	r4, sl
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c50:	4851      	ldr	r0, [pc, #324]	; (8003d98 <_svfiprintf_r+0x1ec>)
 8003c52:	f7fc faf5 	bl	8000240 <memchr>
 8003c56:	9a04      	ldr	r2, [sp, #16]
 8003c58:	b9d8      	cbnz	r0, 8003c92 <_svfiprintf_r+0xe6>
 8003c5a:	06d0      	lsls	r0, r2, #27
 8003c5c:	bf44      	itt	mi
 8003c5e:	2320      	movmi	r3, #32
 8003c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c64:	0711      	lsls	r1, r2, #28
 8003c66:	bf44      	itt	mi
 8003c68:	232b      	movmi	r3, #43	; 0x2b
 8003c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c72:	2b2a      	cmp	r3, #42	; 0x2a
 8003c74:	d015      	beq.n	8003ca2 <_svfiprintf_r+0xf6>
 8003c76:	9a07      	ldr	r2, [sp, #28]
 8003c78:	4654      	mov	r4, sl
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f04f 0c0a 	mov.w	ip, #10
 8003c80:	4621      	mov	r1, r4
 8003c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c86:	3b30      	subs	r3, #48	; 0x30
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d94e      	bls.n	8003d2a <_svfiprintf_r+0x17e>
 8003c8c:	b1b0      	cbz	r0, 8003cbc <_svfiprintf_r+0x110>
 8003c8e:	9207      	str	r2, [sp, #28]
 8003c90:	e014      	b.n	8003cbc <_svfiprintf_r+0x110>
 8003c92:	eba0 0308 	sub.w	r3, r0, r8
 8003c96:	fa09 f303 	lsl.w	r3, r9, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	46a2      	mov	sl, r4
 8003ca0:	e7d2      	b.n	8003c48 <_svfiprintf_r+0x9c>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	1d19      	adds	r1, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	9103      	str	r1, [sp, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfbb      	ittet	lt
 8003cae:	425b      	neglt	r3, r3
 8003cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cb4:	9307      	strge	r3, [sp, #28]
 8003cb6:	9307      	strlt	r3, [sp, #28]
 8003cb8:	bfb8      	it	lt
 8003cba:	9204      	strlt	r2, [sp, #16]
 8003cbc:	7823      	ldrb	r3, [r4, #0]
 8003cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8003cc0:	d10c      	bne.n	8003cdc <_svfiprintf_r+0x130>
 8003cc2:	7863      	ldrb	r3, [r4, #1]
 8003cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc6:	d135      	bne.n	8003d34 <_svfiprintf_r+0x188>
 8003cc8:	9b03      	ldr	r3, [sp, #12]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9203      	str	r2, [sp, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bfb8      	it	lt
 8003cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cd8:	3402      	adds	r4, #2
 8003cda:	9305      	str	r3, [sp, #20]
 8003cdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003da8 <_svfiprintf_r+0x1fc>
 8003ce0:	7821      	ldrb	r1, [r4, #0]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	f7fc faab 	bl	8000240 <memchr>
 8003cea:	b140      	cbz	r0, 8003cfe <_svfiprintf_r+0x152>
 8003cec:	2340      	movs	r3, #64	; 0x40
 8003cee:	eba0 000a 	sub.w	r0, r0, sl
 8003cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cf6:	9b04      	ldr	r3, [sp, #16]
 8003cf8:	4303      	orrs	r3, r0
 8003cfa:	3401      	adds	r4, #1
 8003cfc:	9304      	str	r3, [sp, #16]
 8003cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d02:	4826      	ldr	r0, [pc, #152]	; (8003d9c <_svfiprintf_r+0x1f0>)
 8003d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d08:	2206      	movs	r2, #6
 8003d0a:	f7fc fa99 	bl	8000240 <memchr>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d038      	beq.n	8003d84 <_svfiprintf_r+0x1d8>
 8003d12:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <_svfiprintf_r+0x1f4>)
 8003d14:	bb1b      	cbnz	r3, 8003d5e <_svfiprintf_r+0x1b2>
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	3307      	adds	r3, #7
 8003d1a:	f023 0307 	bic.w	r3, r3, #7
 8003d1e:	3308      	adds	r3, #8
 8003d20:	9303      	str	r3, [sp, #12]
 8003d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d24:	4433      	add	r3, r6
 8003d26:	9309      	str	r3, [sp, #36]	; 0x24
 8003d28:	e767      	b.n	8003bfa <_svfiprintf_r+0x4e>
 8003d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d2e:	460c      	mov	r4, r1
 8003d30:	2001      	movs	r0, #1
 8003d32:	e7a5      	b.n	8003c80 <_svfiprintf_r+0xd4>
 8003d34:	2300      	movs	r3, #0
 8003d36:	3401      	adds	r4, #1
 8003d38:	9305      	str	r3, [sp, #20]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 0c0a 	mov.w	ip, #10
 8003d40:	4620      	mov	r0, r4
 8003d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d46:	3a30      	subs	r2, #48	; 0x30
 8003d48:	2a09      	cmp	r2, #9
 8003d4a:	d903      	bls.n	8003d54 <_svfiprintf_r+0x1a8>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0c5      	beq.n	8003cdc <_svfiprintf_r+0x130>
 8003d50:	9105      	str	r1, [sp, #20]
 8003d52:	e7c3      	b.n	8003cdc <_svfiprintf_r+0x130>
 8003d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d58:	4604      	mov	r4, r0
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e7f0      	b.n	8003d40 <_svfiprintf_r+0x194>
 8003d5e:	ab03      	add	r3, sp, #12
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	462a      	mov	r2, r5
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <_svfiprintf_r+0x1f8>)
 8003d66:	a904      	add	r1, sp, #16
 8003d68:	4638      	mov	r0, r7
 8003d6a:	f3af 8000 	nop.w
 8003d6e:	1c42      	adds	r2, r0, #1
 8003d70:	4606      	mov	r6, r0
 8003d72:	d1d6      	bne.n	8003d22 <_svfiprintf_r+0x176>
 8003d74:	89ab      	ldrh	r3, [r5, #12]
 8003d76:	065b      	lsls	r3, r3, #25
 8003d78:	f53f af2c 	bmi.w	8003bd4 <_svfiprintf_r+0x28>
 8003d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d7e:	b01d      	add	sp, #116	; 0x74
 8003d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d84:	ab03      	add	r3, sp, #12
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <_svfiprintf_r+0x1f8>)
 8003d8c:	a904      	add	r1, sp, #16
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f000 f87a 	bl	8003e88 <_printf_i>
 8003d94:	e7eb      	b.n	8003d6e <_svfiprintf_r+0x1c2>
 8003d96:	bf00      	nop
 8003d98:	08004544 	.word	0x08004544
 8003d9c:	0800454e 	.word	0x0800454e
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003af7 	.word	0x08003af7
 8003da8:	0800454a 	.word	0x0800454a

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4699      	mov	r9, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bfb8      	it	lt
 8003dc0:	4613      	movlt	r3, r2
 8003dc2:	6033      	str	r3, [r6, #0]
 8003dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc8:	4607      	mov	r7, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc26      	bgt.n	8003e42 <_printf_common+0x96>
 8003df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df8:	1e13      	subs	r3, r2, #0
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d42b      	bmi.n	8003e5c <_printf_common+0xb0>
 8003e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d01e      	beq.n	8003e50 <_printf_common+0xa4>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	68e5      	ldr	r5, [r4, #12]
 8003e16:	6832      	ldr	r2, [r6, #0]
 8003e18:	f003 0306 	and.w	r3, r3, #6
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	bf08      	it	eq
 8003e20:	1aad      	subeq	r5, r5, r2
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	bf0c      	ite	eq
 8003e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e2c:	2500      	movne	r5, #0
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bfc4      	itt	gt
 8003e32:	1a9b      	subgt	r3, r3, r2
 8003e34:	18ed      	addgt	r5, r5, r3
 8003e36:	2600      	movs	r6, #0
 8003e38:	341a      	adds	r4, #26
 8003e3a:	42b5      	cmp	r5, r6
 8003e3c:	d11a      	bne.n	8003e74 <_printf_common+0xc8>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e008      	b.n	8003e54 <_printf_common+0xa8>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4652      	mov	r2, sl
 8003e46:	4649      	mov	r1, r9
 8003e48:	4638      	mov	r0, r7
 8003e4a:	47c0      	blx	r8
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d103      	bne.n	8003e58 <_printf_common+0xac>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	3501      	adds	r5, #1
 8003e5a:	e7c6      	b.n	8003dea <_printf_common+0x3e>
 8003e5c:	18e1      	adds	r1, r4, r3
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	2030      	movs	r0, #48	; 0x30
 8003e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e66:	4422      	add	r2, r4
 8003e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e70:	3302      	adds	r3, #2
 8003e72:	e7c7      	b.n	8003e04 <_printf_common+0x58>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4622      	mov	r2, r4
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	47c0      	blx	r8
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d0e6      	beq.n	8003e50 <_printf_common+0xa4>
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7d9      	b.n	8003e3a <_printf_common+0x8e>
	...

08003e88 <_printf_i>:
 8003e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	4691      	mov	r9, r2
 8003e90:	7e27      	ldrb	r7, [r4, #24]
 8003e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e94:	2f78      	cmp	r7, #120	; 0x78
 8003e96:	4680      	mov	r8, r0
 8003e98:	469a      	mov	sl, r3
 8003e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e9e:	d807      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ea0:	2f62      	cmp	r7, #98	; 0x62
 8003ea2:	d80a      	bhi.n	8003eba <_printf_i+0x32>
 8003ea4:	2f00      	cmp	r7, #0
 8003ea6:	f000 80d8 	beq.w	800405a <_printf_i+0x1d2>
 8003eaa:	2f58      	cmp	r7, #88	; 0x58
 8003eac:	f000 80a3 	beq.w	8003ff6 <_printf_i+0x16e>
 8003eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb8:	e03a      	b.n	8003f30 <_printf_i+0xa8>
 8003eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ebe:	2b15      	cmp	r3, #21
 8003ec0:	d8f6      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ec2:	a001      	add	r0, pc, #4	; (adr r0, 8003ec8 <_printf_i+0x40>)
 8003ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f35 	.word	0x08003f35
 8003ed0:	08003eb1 	.word	0x08003eb1
 8003ed4:	08003eb1 	.word	0x08003eb1
 8003ed8:	08003eb1 	.word	0x08003eb1
 8003edc:	08003eb1 	.word	0x08003eb1
 8003ee0:	08003f35 	.word	0x08003f35
 8003ee4:	08003eb1 	.word	0x08003eb1
 8003ee8:	08003eb1 	.word	0x08003eb1
 8003eec:	08003eb1 	.word	0x08003eb1
 8003ef0:	08003eb1 	.word	0x08003eb1
 8003ef4:	08004041 	.word	0x08004041
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08004023 	.word	0x08004023
 8003f00:	08003eb1 	.word	0x08003eb1
 8003f04:	08003eb1 	.word	0x08003eb1
 8003f08:	08004063 	.word	0x08004063
 8003f0c:	08003eb1 	.word	0x08003eb1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003eb1 	.word	0x08003eb1
 8003f18:	08003eb1 	.word	0x08003eb1
 8003f1c:	0800402b 	.word	0x0800402b
 8003f20:	680b      	ldr	r3, [r1, #0]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	600a      	str	r2, [r1, #0]
 8003f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a3      	b.n	800407c <_printf_i+0x1f4>
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	6808      	ldr	r0, [r1, #0]
 8003f38:	062e      	lsls	r6, r5, #24
 8003f3a:	f100 0304 	add.w	r3, r0, #4
 8003f3e:	d50a      	bpl.n	8003f56 <_printf_i+0xce>
 8003f40:	6805      	ldr	r5, [r0, #0]
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	2d00      	cmp	r5, #0
 8003f46:	da03      	bge.n	8003f50 <_printf_i+0xc8>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	426d      	negs	r5, r5
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f50:	485e      	ldr	r0, [pc, #376]	; (80040cc <_printf_i+0x244>)
 8003f52:	230a      	movs	r3, #10
 8003f54:	e019      	b.n	8003f8a <_printf_i+0x102>
 8003f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f5a:	6805      	ldr	r5, [r0, #0]
 8003f5c:	600b      	str	r3, [r1, #0]
 8003f5e:	bf18      	it	ne
 8003f60:	b22d      	sxthne	r5, r5
 8003f62:	e7ef      	b.n	8003f44 <_printf_i+0xbc>
 8003f64:	680b      	ldr	r3, [r1, #0]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	1d18      	adds	r0, r3, #4
 8003f6a:	6008      	str	r0, [r1, #0]
 8003f6c:	0628      	lsls	r0, r5, #24
 8003f6e:	d501      	bpl.n	8003f74 <_printf_i+0xec>
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <_printf_i+0xf2>
 8003f74:	0669      	lsls	r1, r5, #25
 8003f76:	d5fb      	bpl.n	8003f70 <_printf_i+0xe8>
 8003f78:	881d      	ldrh	r5, [r3, #0]
 8003f7a:	4854      	ldr	r0, [pc, #336]	; (80040cc <_printf_i+0x244>)
 8003f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f7e:	bf0c      	ite	eq
 8003f80:	2308      	moveq	r3, #8
 8003f82:	230a      	movne	r3, #10
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f8a:	6866      	ldr	r6, [r4, #4]
 8003f8c:	60a6      	str	r6, [r4, #8]
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	bfa2      	ittt	ge
 8003f92:	6821      	ldrge	r1, [r4, #0]
 8003f94:	f021 0104 	bicge.w	r1, r1, #4
 8003f98:	6021      	strge	r1, [r4, #0]
 8003f9a:	b90d      	cbnz	r5, 8003fa0 <_printf_i+0x118>
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	d04d      	beq.n	800403c <_printf_i+0x1b4>
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa6:	fb03 5711 	mls	r7, r3, r1, r5
 8003faa:	5dc7      	ldrb	r7, [r0, r7]
 8003fac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fb0:	462f      	mov	r7, r5
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	d9f4      	bls.n	8003fa2 <_printf_i+0x11a>
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10b      	bne.n	8003fd4 <_printf_i+0x14c>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	07df      	lsls	r7, r3, #31
 8003fc0:	d508      	bpl.n	8003fd4 <_printf_i+0x14c>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	6861      	ldr	r1, [r4, #4]
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	bfde      	ittt	le
 8003fca:	2330      	movle	r3, #48	; 0x30
 8003fcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd4:	1b92      	subs	r2, r2, r6
 8003fd6:	6122      	str	r2, [r4, #16]
 8003fd8:	f8cd a000 	str.w	sl, [sp]
 8003fdc:	464b      	mov	r3, r9
 8003fde:	aa03      	add	r2, sp, #12
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f7ff fee2 	bl	8003dac <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d14c      	bne.n	8004086 <_printf_i+0x1fe>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b004      	add	sp, #16
 8003ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff6:	4835      	ldr	r0, [pc, #212]	; (80040cc <_printf_i+0x244>)
 8003ff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	680e      	ldr	r6, [r1, #0]
 8004000:	061f      	lsls	r7, r3, #24
 8004002:	f856 5b04 	ldr.w	r5, [r6], #4
 8004006:	600e      	str	r6, [r1, #0]
 8004008:	d514      	bpl.n	8004034 <_printf_i+0x1ac>
 800400a:	07d9      	lsls	r1, r3, #31
 800400c:	bf44      	itt	mi
 800400e:	f043 0320 	orrmi.w	r3, r3, #32
 8004012:	6023      	strmi	r3, [r4, #0]
 8004014:	b91d      	cbnz	r5, 800401e <_printf_i+0x196>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f023 0320 	bic.w	r3, r3, #32
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	2310      	movs	r3, #16
 8004020:	e7b0      	b.n	8003f84 <_printf_i+0xfc>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	2378      	movs	r3, #120	; 0x78
 800402c:	4828      	ldr	r0, [pc, #160]	; (80040d0 <_printf_i+0x248>)
 800402e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004032:	e7e3      	b.n	8003ffc <_printf_i+0x174>
 8004034:	065e      	lsls	r6, r3, #25
 8004036:	bf48      	it	mi
 8004038:	b2ad      	uxthmi	r5, r5
 800403a:	e7e6      	b.n	800400a <_printf_i+0x182>
 800403c:	4616      	mov	r6, r2
 800403e:	e7bb      	b.n	8003fb8 <_printf_i+0x130>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	6826      	ldr	r6, [r4, #0]
 8004044:	6960      	ldr	r0, [r4, #20]
 8004046:	1d1d      	adds	r5, r3, #4
 8004048:	600d      	str	r5, [r1, #0]
 800404a:	0635      	lsls	r5, r6, #24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	d501      	bpl.n	8004054 <_printf_i+0x1cc>
 8004050:	6018      	str	r0, [r3, #0]
 8004052:	e002      	b.n	800405a <_printf_i+0x1d2>
 8004054:	0671      	lsls	r1, r6, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0x1c8>
 8004058:	8018      	strh	r0, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	4616      	mov	r6, r2
 8004060:	e7ba      	b.n	8003fd8 <_printf_i+0x150>
 8004062:	680b      	ldr	r3, [r1, #0]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	600a      	str	r2, [r1, #0]
 8004068:	681e      	ldr	r6, [r3, #0]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	2100      	movs	r1, #0
 800406e:	4630      	mov	r0, r6
 8004070:	f7fc f8e6 	bl	8000240 <memchr>
 8004074:	b108      	cbz	r0, 800407a <_printf_i+0x1f2>
 8004076:	1b80      	subs	r0, r0, r6
 8004078:	6060      	str	r0, [r4, #4]
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	6123      	str	r3, [r4, #16]
 800407e:	2300      	movs	r3, #0
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004084:	e7a8      	b.n	8003fd8 <_printf_i+0x150>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	4632      	mov	r2, r6
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	47d0      	blx	sl
 8004090:	3001      	adds	r0, #1
 8004092:	d0ab      	beq.n	8003fec <_printf_i+0x164>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d413      	bmi.n	80040c2 <_printf_i+0x23a>
 800409a:	68e0      	ldr	r0, [r4, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	bfb8      	it	lt
 80040a2:	4618      	movlt	r0, r3
 80040a4:	e7a4      	b.n	8003ff0 <_printf_i+0x168>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4632      	mov	r2, r6
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	47d0      	blx	sl
 80040b0:	3001      	adds	r0, #1
 80040b2:	d09b      	beq.n	8003fec <_printf_i+0x164>
 80040b4:	3501      	adds	r5, #1
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	1a5b      	subs	r3, r3, r1
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dcf2      	bgt.n	80040a6 <_printf_i+0x21e>
 80040c0:	e7eb      	b.n	800409a <_printf_i+0x212>
 80040c2:	2500      	movs	r5, #0
 80040c4:	f104 0619 	add.w	r6, r4, #25
 80040c8:	e7f5      	b.n	80040b6 <_printf_i+0x22e>
 80040ca:	bf00      	nop
 80040cc:	08004555 	.word	0x08004555
 80040d0:	08004566 	.word	0x08004566

080040d4 <memcpy>:
 80040d4:	440a      	add	r2, r1
 80040d6:	4291      	cmp	r1, r2
 80040d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040dc:	d100      	bne.n	80040e0 <memcpy+0xc>
 80040de:	4770      	bx	lr
 80040e0:	b510      	push	{r4, lr}
 80040e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ea:	4291      	cmp	r1, r2
 80040ec:	d1f9      	bne.n	80040e2 <memcpy+0xe>
 80040ee:	bd10      	pop	{r4, pc}

080040f0 <memmove>:
 80040f0:	4288      	cmp	r0, r1
 80040f2:	b510      	push	{r4, lr}
 80040f4:	eb01 0402 	add.w	r4, r1, r2
 80040f8:	d902      	bls.n	8004100 <memmove+0x10>
 80040fa:	4284      	cmp	r4, r0
 80040fc:	4623      	mov	r3, r4
 80040fe:	d807      	bhi.n	8004110 <memmove+0x20>
 8004100:	1e43      	subs	r3, r0, #1
 8004102:	42a1      	cmp	r1, r4
 8004104:	d008      	beq.n	8004118 <memmove+0x28>
 8004106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800410a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800410e:	e7f8      	b.n	8004102 <memmove+0x12>
 8004110:	4402      	add	r2, r0
 8004112:	4601      	mov	r1, r0
 8004114:	428a      	cmp	r2, r1
 8004116:	d100      	bne.n	800411a <memmove+0x2a>
 8004118:	bd10      	pop	{r4, pc}
 800411a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800411e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004122:	e7f7      	b.n	8004114 <memmove+0x24>

08004124 <_free_r>:
 8004124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004126:	2900      	cmp	r1, #0
 8004128:	d048      	beq.n	80041bc <_free_r+0x98>
 800412a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800412e:	9001      	str	r0, [sp, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f1a1 0404 	sub.w	r4, r1, #4
 8004136:	bfb8      	it	lt
 8004138:	18e4      	addlt	r4, r4, r3
 800413a:	f000 f8d3 	bl	80042e4 <__malloc_lock>
 800413e:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <_free_r+0x9c>)
 8004140:	9801      	ldr	r0, [sp, #4]
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	4615      	mov	r5, r2
 8004146:	b933      	cbnz	r3, 8004156 <_free_r+0x32>
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	6014      	str	r4, [r2, #0]
 800414c:	b003      	add	sp, #12
 800414e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004152:	f000 b8cd 	b.w	80042f0 <__malloc_unlock>
 8004156:	42a3      	cmp	r3, r4
 8004158:	d90b      	bls.n	8004172 <_free_r+0x4e>
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	1862      	adds	r2, r4, r1
 800415e:	4293      	cmp	r3, r2
 8004160:	bf04      	itt	eq
 8004162:	681a      	ldreq	r2, [r3, #0]
 8004164:	685b      	ldreq	r3, [r3, #4]
 8004166:	6063      	str	r3, [r4, #4]
 8004168:	bf04      	itt	eq
 800416a:	1852      	addeq	r2, r2, r1
 800416c:	6022      	streq	r2, [r4, #0]
 800416e:	602c      	str	r4, [r5, #0]
 8004170:	e7ec      	b.n	800414c <_free_r+0x28>
 8004172:	461a      	mov	r2, r3
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b10b      	cbz	r3, 800417c <_free_r+0x58>
 8004178:	42a3      	cmp	r3, r4
 800417a:	d9fa      	bls.n	8004172 <_free_r+0x4e>
 800417c:	6811      	ldr	r1, [r2, #0]
 800417e:	1855      	adds	r5, r2, r1
 8004180:	42a5      	cmp	r5, r4
 8004182:	d10b      	bne.n	800419c <_free_r+0x78>
 8004184:	6824      	ldr	r4, [r4, #0]
 8004186:	4421      	add	r1, r4
 8004188:	1854      	adds	r4, r2, r1
 800418a:	42a3      	cmp	r3, r4
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	d1dd      	bne.n	800414c <_free_r+0x28>
 8004190:	681c      	ldr	r4, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	6053      	str	r3, [r2, #4]
 8004196:	4421      	add	r1, r4
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	e7d7      	b.n	800414c <_free_r+0x28>
 800419c:	d902      	bls.n	80041a4 <_free_r+0x80>
 800419e:	230c      	movs	r3, #12
 80041a0:	6003      	str	r3, [r0, #0]
 80041a2:	e7d3      	b.n	800414c <_free_r+0x28>
 80041a4:	6825      	ldr	r5, [r4, #0]
 80041a6:	1961      	adds	r1, r4, r5
 80041a8:	428b      	cmp	r3, r1
 80041aa:	bf04      	itt	eq
 80041ac:	6819      	ldreq	r1, [r3, #0]
 80041ae:	685b      	ldreq	r3, [r3, #4]
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	bf04      	itt	eq
 80041b4:	1949      	addeq	r1, r1, r5
 80041b6:	6021      	streq	r1, [r4, #0]
 80041b8:	6054      	str	r4, [r2, #4]
 80041ba:	e7c7      	b.n	800414c <_free_r+0x28>
 80041bc:	b003      	add	sp, #12
 80041be:	bd30      	pop	{r4, r5, pc}
 80041c0:	2000009c 	.word	0x2000009c

080041c4 <_malloc_r>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	1ccd      	adds	r5, r1, #3
 80041c8:	f025 0503 	bic.w	r5, r5, #3
 80041cc:	3508      	adds	r5, #8
 80041ce:	2d0c      	cmp	r5, #12
 80041d0:	bf38      	it	cc
 80041d2:	250c      	movcc	r5, #12
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	4606      	mov	r6, r0
 80041d8:	db01      	blt.n	80041de <_malloc_r+0x1a>
 80041da:	42a9      	cmp	r1, r5
 80041dc:	d903      	bls.n	80041e6 <_malloc_r+0x22>
 80041de:	230c      	movs	r3, #12
 80041e0:	6033      	str	r3, [r6, #0]
 80041e2:	2000      	movs	r0, #0
 80041e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e6:	f000 f87d 	bl	80042e4 <__malloc_lock>
 80041ea:	4921      	ldr	r1, [pc, #132]	; (8004270 <_malloc_r+0xac>)
 80041ec:	680a      	ldr	r2, [r1, #0]
 80041ee:	4614      	mov	r4, r2
 80041f0:	b99c      	cbnz	r4, 800421a <_malloc_r+0x56>
 80041f2:	4f20      	ldr	r7, [pc, #128]	; (8004274 <_malloc_r+0xb0>)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b923      	cbnz	r3, 8004202 <_malloc_r+0x3e>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4630      	mov	r0, r6
 80041fc:	f000 f862 	bl	80042c4 <_sbrk_r>
 8004200:	6038      	str	r0, [r7, #0]
 8004202:	4629      	mov	r1, r5
 8004204:	4630      	mov	r0, r6
 8004206:	f000 f85d 	bl	80042c4 <_sbrk_r>
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	d123      	bne.n	8004256 <_malloc_r+0x92>
 800420e:	230c      	movs	r3, #12
 8004210:	6033      	str	r3, [r6, #0]
 8004212:	4630      	mov	r0, r6
 8004214:	f000 f86c 	bl	80042f0 <__malloc_unlock>
 8004218:	e7e3      	b.n	80041e2 <_malloc_r+0x1e>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	1b5b      	subs	r3, r3, r5
 800421e:	d417      	bmi.n	8004250 <_malloc_r+0x8c>
 8004220:	2b0b      	cmp	r3, #11
 8004222:	d903      	bls.n	800422c <_malloc_r+0x68>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	441c      	add	r4, r3
 8004228:	6025      	str	r5, [r4, #0]
 800422a:	e004      	b.n	8004236 <_malloc_r+0x72>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	42a2      	cmp	r2, r4
 8004230:	bf0c      	ite	eq
 8004232:	600b      	streq	r3, [r1, #0]
 8004234:	6053      	strne	r3, [r2, #4]
 8004236:	4630      	mov	r0, r6
 8004238:	f000 f85a 	bl	80042f0 <__malloc_unlock>
 800423c:	f104 000b 	add.w	r0, r4, #11
 8004240:	1d23      	adds	r3, r4, #4
 8004242:	f020 0007 	bic.w	r0, r0, #7
 8004246:	1ac2      	subs	r2, r0, r3
 8004248:	d0cc      	beq.n	80041e4 <_malloc_r+0x20>
 800424a:	1a1b      	subs	r3, r3, r0
 800424c:	50a3      	str	r3, [r4, r2]
 800424e:	e7c9      	b.n	80041e4 <_malloc_r+0x20>
 8004250:	4622      	mov	r2, r4
 8004252:	6864      	ldr	r4, [r4, #4]
 8004254:	e7cc      	b.n	80041f0 <_malloc_r+0x2c>
 8004256:	1cc4      	adds	r4, r0, #3
 8004258:	f024 0403 	bic.w	r4, r4, #3
 800425c:	42a0      	cmp	r0, r4
 800425e:	d0e3      	beq.n	8004228 <_malloc_r+0x64>
 8004260:	1a21      	subs	r1, r4, r0
 8004262:	4630      	mov	r0, r6
 8004264:	f000 f82e 	bl	80042c4 <_sbrk_r>
 8004268:	3001      	adds	r0, #1
 800426a:	d1dd      	bne.n	8004228 <_malloc_r+0x64>
 800426c:	e7cf      	b.n	800420e <_malloc_r+0x4a>
 800426e:	bf00      	nop
 8004270:	2000009c 	.word	0x2000009c
 8004274:	200000a0 	.word	0x200000a0

08004278 <_realloc_r>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	4607      	mov	r7, r0
 800427c:	4614      	mov	r4, r2
 800427e:	460e      	mov	r6, r1
 8004280:	b921      	cbnz	r1, 800428c <_realloc_r+0x14>
 8004282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004286:	4611      	mov	r1, r2
 8004288:	f7ff bf9c 	b.w	80041c4 <_malloc_r>
 800428c:	b922      	cbnz	r2, 8004298 <_realloc_r+0x20>
 800428e:	f7ff ff49 	bl	8004124 <_free_r>
 8004292:	4625      	mov	r5, r4
 8004294:	4628      	mov	r0, r5
 8004296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004298:	f000 f830 	bl	80042fc <_malloc_usable_size_r>
 800429c:	42a0      	cmp	r0, r4
 800429e:	d20f      	bcs.n	80042c0 <_realloc_r+0x48>
 80042a0:	4621      	mov	r1, r4
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7ff ff8e 	bl	80041c4 <_malloc_r>
 80042a8:	4605      	mov	r5, r0
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d0f2      	beq.n	8004294 <_realloc_r+0x1c>
 80042ae:	4631      	mov	r1, r6
 80042b0:	4622      	mov	r2, r4
 80042b2:	f7ff ff0f 	bl	80040d4 <memcpy>
 80042b6:	4631      	mov	r1, r6
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff ff33 	bl	8004124 <_free_r>
 80042be:	e7e9      	b.n	8004294 <_realloc_r+0x1c>
 80042c0:	4635      	mov	r5, r6
 80042c2:	e7e7      	b.n	8004294 <_realloc_r+0x1c>

080042c4 <_sbrk_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4d06      	ldr	r5, [pc, #24]	; (80042e0 <_sbrk_r+0x1c>)
 80042c8:	2300      	movs	r3, #0
 80042ca:	4604      	mov	r4, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	f7fc fc4e 	bl	8000b70 <_sbrk>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_sbrk_r+0x1a>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_sbrk_r+0x1a>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000588 	.word	0x20000588

080042e4 <__malloc_lock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__malloc_lock+0x8>)
 80042e6:	f000 b811 	b.w	800430c <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000590 	.word	0x20000590

080042f0 <__malloc_unlock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__malloc_unlock+0x8>)
 80042f2:	f000 b80c 	b.w	800430e <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000590 	.word	0x20000590

080042fc <_malloc_usable_size_r>:
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f18      	subs	r0, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfbc      	itt	lt
 8004306:	580b      	ldrlt	r3, [r1, r0]
 8004308:	18c0      	addlt	r0, r0, r3
 800430a:	4770      	bx	lr

0800430c <__retarget_lock_acquire_recursive>:
 800430c:	4770      	bx	lr

0800430e <__retarget_lock_release_recursive>:
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
